import{_ as s,o as n,c as a,a as l}from"./app.09b4d0c2.js";const u=JSON.parse('{"title":"Plugins","description":"","frontmatter":{},"headers":[{"level":2,"title":"Introduction","slug":"introduction","link":"#introduction","children":[]},{"level":2,"title":"Augmenting a Store","slug":"augmenting-a-store","link":"#augmenting-a-store","children":[{"level":3,"title":"Adding new state","slug":"adding-new-state","link":"#adding-new-state","children":[]}]},{"level":2,"title":"Adding new external properties","slug":"adding-new-external-properties","link":"#adding-new-external-properties","children":[]},{"level":2,"title":"Calling $subscribe inside plugins","slug":"calling-subscribe-inside-plugins","link":"#calling-subscribe-inside-plugins","children":[]},{"level":2,"title":"Adding new options","slug":"adding-new-options","link":"#adding-new-options","children":[]},{"level":2,"title":"TypeScript","slug":"typescript","link":"#typescript","children":[{"level":3,"title":"Typing plugins","slug":"typing-plugins","link":"#typing-plugins","children":[]},{"level":3,"title":"Typing new store properties","slug":"typing-new-store-properties","link":"#typing-new-store-properties","children":[]},{"level":3,"title":"Typing new state","slug":"typing-new-state","link":"#typing-new-state","children":[]},{"level":3,"title":"Typing new creation options","slug":"typing-new-creation-options","link":"#typing-new-creation-options","children":[]}]},{"level":2,"title":"Nuxt.js","slug":"nuxt-js","link":"#nuxt-js","children":[{"level":3,"title":"Nuxt.js 2","slug":"nuxt-js-2","link":"#nuxt-js-2","children":[]}]}],"relativePath":"core-concepts/plugins.md"}'),p={name:"core-concepts/plugins.md"},o=l(`<h1 id="plugins" tabindex="-1">Plugins <a class="header-anchor" href="#plugins" aria-hidden="true">#</a></h1><p>Pinia stores can be fully extended thanks to a low level API. Here is a list of things you can do:</p><ul><li>Add new properties to stores</li><li>Add new options when defining stores</li><li>Add new methods to stores</li><li>Wrap existing methods</li><li>Intercept actions and its results</li><li>Implement side effects like <a href="https://developer.mozilla.org/en-US/docs/Web/API/Window/localStorage" target="_blank" rel="noreferrer">Local Storage</a></li><li>Apply <strong>only</strong> to specific stores</li></ul><p>Plugins are added to the pinia instance with <code>pinia.use()</code>. The simplest example is adding a static property to all stores by returning an object:</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula-soft has-diff vp-code-dark"><code><span class="line"><span style="color:#F286C4;">import</span><span style="color:#F6F6F4;"> { createPinia } </span><span style="color:#F286C4;">from</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">pinia</span><span style="color:#DEE492;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;">// add a property named \`secret\` to every store that is created</span></span>
<span class="line"><span style="color:#7B7F8B;">// after this plugin is installed this could be in a different file</span></span>
<span class="line"><span style="color:#F286C4;">function</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">SecretPiniaPlugin</span><span style="color:#F6F6F4;">() {</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> { secret</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">the cake is a lie</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;"> }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F286C4;">const</span><span style="color:#F6F6F4;"> pinia </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">createPinia</span><span style="color:#F6F6F4;">()</span></span>
<span class="line"><span style="color:#7B7F8B;">// give the plugin to pinia</span></span>
<span class="line"><span style="color:#F6F6F4;">pinia.</span><span style="color:#62E884;">use</span><span style="color:#F6F6F4;">(SecretPiniaPlugin)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;">// in another file</span></span>
<span class="line"><span style="color:#F286C4;">const</span><span style="color:#F6F6F4;"> store </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">useStore</span><span style="color:#F6F6F4;">()</span></span>
<span class="line"><span style="color:#F6F6F4;">store.secret </span><span style="color:#7B7F8B;">// &#39;the cake is a lie&#39;</span></span>
<span class="line"></span></code></pre><pre class="shiki vitesse-light has-diff vp-code-light"><code><span class="line"><span style="color:#1E754F;">import</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">createPinia</span><span style="color:#393A34;"> </span><span style="color:#999999;">}</span><span style="color:#393A34;"> </span><span style="color:#1E754F;">from</span><span style="color:#393A34;"> </span><span style="color:#B56959AA;">&#39;</span><span style="color:#B56959;">pinia</span><span style="color:#B56959AA;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A0ADA0;">// add a property named \`secret\` to every store that is created</span></span>
<span class="line"><span style="color:#A0ADA0;">// after this plugin is installed this could be in a different file</span></span>
<span class="line"><span style="color:#AB5959;">function</span><span style="color:#393A34;"> </span><span style="color:#59873A;">SecretPiniaPlugin</span><span style="color:#999999;">()</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#1E754F;">return</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span><span style="color:#393A34;"> </span><span style="color:#998418;">secret</span><span style="color:#999999;">:</span><span style="color:#393A34;"> </span><span style="color:#B56959AA;">&#39;</span><span style="color:#B56959;">the cake is a lie</span><span style="color:#B56959AA;">&#39;</span><span style="color:#393A34;"> </span><span style="color:#999999;">}</span></span>
<span class="line"><span style="color:#999999;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#AB5959;">const</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">pinia</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">=</span><span style="color:#393A34;"> </span><span style="color:#59873A;">createPinia</span><span style="color:#999999;">()</span></span>
<span class="line"><span style="color:#A0ADA0;">// give the plugin to pinia</span></span>
<span class="line"><span style="color:#B07D48;">pinia</span><span style="color:#999999;">.</span><span style="color:#59873A;">use</span><span style="color:#999999;">(</span><span style="color:#B07D48;">SecretPiniaPlugin</span><span style="color:#999999;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A0ADA0;">// in another file</span></span>
<span class="line"><span style="color:#AB5959;">const</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">store</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">=</span><span style="color:#393A34;"> </span><span style="color:#59873A;">useStore</span><span style="color:#999999;">()</span></span>
<span class="line"><span style="color:#B07D48;">store</span><span style="color:#999999;">.</span><span style="color:#B07D48;">secret</span><span style="color:#393A34;"> </span><span style="color:#A0ADA0;">// &#39;the cake is a lie&#39;</span></span>
<span class="line"></span></code></pre></div><p>This is useful to add global objects like the router, modal, or toast managers.</p><h2 id="introduction" tabindex="-1">Introduction <a class="header-anchor" href="#introduction" aria-hidden="true">#</a></h2><p>A Pinia plugin is a function that optionally returns properties to be added to a store. It takes one optional argument, a <em>context</em>:</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">export</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">function</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">myPiniaPlugin</span><span style="color:#F6F6F4;">(</span><span style="color:#FFB86C;font-style:italic;">context</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">  context.pinia </span><span style="color:#7B7F8B;">// the pinia created with \`createPinia()\`</span></span>
<span class="line"><span style="color:#F6F6F4;">  context.app </span><span style="color:#7B7F8B;">// the current app created with \`createApp()\` (Vue 3 only)</span></span>
<span class="line"><span style="color:#F6F6F4;">  context.store </span><span style="color:#7B7F8B;">// the store the plugin is augmenting</span></span>
<span class="line"><span style="color:#F6F6F4;">  context.options </span><span style="color:#7B7F8B;">// the options object defining the store passed to \`defineStore()\`</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#7B7F8B;">// ...</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span>
<span class="line"></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#1E754F;">export</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">function</span><span style="color:#393A34;"> </span><span style="color:#59873A;">myPiniaPlugin</span><span style="color:#999999;">(</span><span style="color:#B07D48;">context</span><span style="color:#999999;">)</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#B07D48;">context</span><span style="color:#999999;">.</span><span style="color:#B07D48;">pinia</span><span style="color:#393A34;"> </span><span style="color:#A0ADA0;">// the pinia created with \`createPinia()\`</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#B07D48;">context</span><span style="color:#999999;">.</span><span style="color:#B07D48;">app</span><span style="color:#393A34;"> </span><span style="color:#A0ADA0;">// the current app created with \`createApp()\` (Vue 3 only)</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#B07D48;">context</span><span style="color:#999999;">.</span><span style="color:#B07D48;">store</span><span style="color:#393A34;"> </span><span style="color:#A0ADA0;">// the store the plugin is augmenting</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#B07D48;">context</span><span style="color:#999999;">.</span><span style="color:#B07D48;">options</span><span style="color:#393A34;"> </span><span style="color:#A0ADA0;">// the options object defining the store passed to \`defineStore()\`</span></span>
<span class="line"><span style="color:#999999;">  </span><span style="color:#A0ADA0;">// ...</span></span>
<span class="line"><span style="color:#999999;">}</span></span>
<span class="line"></span></code></pre></div><p>This function is then passed to <code>pinia</code> with <code>pinia.use()</code>:</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F6F6F4;">pinia.</span><span style="color:#62E884;">use</span><span style="color:#F6F6F4;">(myPiniaPlugin)</span></span>
<span class="line"></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#B07D48;">pinia</span><span style="color:#999999;">.</span><span style="color:#59873A;">use</span><span style="color:#999999;">(</span><span style="color:#B07D48;">myPiniaPlugin</span><span style="color:#999999;">)</span></span>
<span class="line"></span></code></pre></div><p>Plugins are only applied to stores created <strong>after the plugins themselves, and after <code>pinia</code> is passed to the app</strong>, otherwise they won&#39;t be applied.</p><h2 id="augmenting-a-store" tabindex="-1">Augmenting a Store <a class="header-anchor" href="#augmenting-a-store" aria-hidden="true">#</a></h2><p>You can add properties to every store by simply returning an object of them in a plugin:</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F6F6F4;">pinia.</span><span style="color:#62E884;">use</span><span style="color:#F6F6F4;">(() </span><span style="color:#F286C4;">=&gt;</span><span style="color:#F6F6F4;"> ({ hello</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">world</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;"> }))</span></span>
<span class="line"></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#B07D48;">pinia</span><span style="color:#999999;">.</span><span style="color:#59873A;">use</span><span style="color:#999999;">(()</span><span style="color:#393A34;"> </span><span style="color:#999999;">=&gt;</span><span style="color:#393A34;"> </span><span style="color:#999999;">({</span><span style="color:#393A34;"> </span><span style="color:#998418;">hello</span><span style="color:#999999;">:</span><span style="color:#393A34;"> </span><span style="color:#B56959AA;">&#39;</span><span style="color:#B56959;">world</span><span style="color:#B56959AA;">&#39;</span><span style="color:#393A34;"> </span><span style="color:#999999;">}))</span></span>
<span class="line"></span></code></pre></div><p>You can also set the property directly on the <code>store</code> but <strong>if possible use the return version so they can be automatically tracked by devtools</strong>:</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F6F6F4;">pinia.</span><span style="color:#62E884;">use</span><span style="color:#F6F6F4;">(({ </span><span style="color:#FFB86C;font-style:italic;">store</span><span style="color:#F6F6F4;"> }) </span><span style="color:#F286C4;">=&gt;</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">  store.hello </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">world</span><span style="color:#DEE492;">&#39;</span></span>
<span class="line"><span style="color:#F6F6F4;">})</span></span>
<span class="line"></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#B07D48;">pinia</span><span style="color:#999999;">.</span><span style="color:#59873A;">use</span><span style="color:#999999;">(({</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">store</span><span style="color:#393A34;"> </span><span style="color:#999999;">})</span><span style="color:#393A34;"> </span><span style="color:#999999;">=&gt;</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#B07D48;">store</span><span style="color:#999999;">.</span><span style="color:#B07D48;">hello</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">=</span><span style="color:#393A34;"> </span><span style="color:#B56959AA;">&#39;</span><span style="color:#B56959;">world</span><span style="color:#B56959AA;">&#39;</span></span>
<span class="line"><span style="color:#999999;">})</span></span>
<span class="line"></span></code></pre></div><p>Any property <em>returned</em> by a plugin will be automatically tracked by devtools so in order to make <code>hello</code> visible in devtools, make sure to add it to <code>store._customProperties</code> <strong>in dev mode only</strong> if you want to debug it in devtools:</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;">// from the example above</span></span>
<span class="line"><span style="color:#F6F6F4;">pinia.</span><span style="color:#62E884;">use</span><span style="color:#F6F6F4;">(({ </span><span style="color:#FFB86C;font-style:italic;">store</span><span style="color:#F6F6F4;"> }) </span><span style="color:#F286C4;">=&gt;</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">  store.hello </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">world</span><span style="color:#DEE492;">&#39;</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#7B7F8B;">// make sure your bundler handle this. webpack and vite should do it by default</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (p<wbr>rocess.env.</span><span style="color:#BF9EEE;">NODE_ENV</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">===</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">development</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">// add any keys you set on the store</span></span>
<span class="line"><span style="color:#F6F6F4;">    store._customProperties.</span><span style="color:#62E884;">add</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">hello</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">)</span></span>
<span class="line"><span style="color:#F6F6F4;">  }</span></span>
<span class="line"><span style="color:#F6F6F4;">})</span></span>
<span class="line"></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#A0ADA0;">// from the example above</span></span>
<span class="line"><span style="color:#B07D48;">pinia</span><span style="color:#999999;">.</span><span style="color:#59873A;">use</span><span style="color:#999999;">(({</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">store</span><span style="color:#393A34;"> </span><span style="color:#999999;">})</span><span style="color:#393A34;"> </span><span style="color:#999999;">=&gt;</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#B07D48;">store</span><span style="color:#999999;">.</span><span style="color:#B07D48;">hello</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">=</span><span style="color:#393A34;"> </span><span style="color:#B56959AA;">&#39;</span><span style="color:#B56959;">world</span><span style="color:#B56959AA;">&#39;</span></span>
<span class="line"><span style="color:#999999;">  </span><span style="color:#A0ADA0;">// make sure your bundler handle this. webpack and vite should do it by default</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#1E754F;">if</span><span style="color:#393A34;"> </span><span style="color:#999999;">(</span><span style="color:#B07D48;">process</span><span style="color:#999999;">.</span><span style="color:#B07D48;">env</span><span style="color:#999999;">.</span><span style="color:#B07D48;">NODE_ENV</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">===</span><span style="color:#393A34;"> </span><span style="color:#B56959AA;">&#39;</span><span style="color:#B56959;">development</span><span style="color:#B56959AA;">&#39;</span><span style="color:#999999;">)</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#999999;">    </span><span style="color:#A0ADA0;">// add any keys you set on the store</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#B07D48;">store</span><span style="color:#999999;">.</span><span style="color:#B07D48;">_customProperties</span><span style="color:#999999;">.</span><span style="color:#59873A;">add</span><span style="color:#999999;">(</span><span style="color:#B56959AA;">&#39;</span><span style="color:#B56959;">hello</span><span style="color:#B56959AA;">&#39;</span><span style="color:#999999;">)</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#999999;">}</span></span>
<span class="line"><span style="color:#999999;">})</span></span>
<span class="line"></span></code></pre></div><p>Note that every store is wrapped with <a href="https://v3.vuejs.org/api/basic-reactivity.html#reactive" target="_blank" rel="noreferrer"><code>reactive</code></a>, automatically unwrapping any Ref (<code>ref()</code>, <code>computed()</code>, ...) it contains:</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">const</span><span style="color:#F6F6F4;"> sharedRef </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">ref</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">shared</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">)</span></span>
<span class="line"><span style="color:#F6F6F4;">pinia.</span><span style="color:#62E884;">use</span><span style="color:#F6F6F4;">(({ </span><span style="color:#FFB86C;font-style:italic;">store</span><span style="color:#F6F6F4;"> }) </span><span style="color:#F286C4;">=&gt;</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#7B7F8B;">// each store has its individual \`hello\` property</span></span>
<span class="line"><span style="color:#F6F6F4;">  store.hello </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">ref</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">secret</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">)</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#7B7F8B;">// it gets automatically unwrapped</span></span>
<span class="line"><span style="color:#F6F6F4;">  store.hello </span><span style="color:#7B7F8B;">// &#39;secret&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#7B7F8B;">// all stores are sharing the value \`shared\` property</span></span>
<span class="line"><span style="color:#F6F6F4;">  store.shared </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> sharedRef</span></span>
<span class="line"><span style="color:#F6F6F4;">  store.shared </span><span style="color:#7B7F8B;">// &#39;shared&#39;</span></span>
<span class="line"><span style="color:#F6F6F4;">})</span></span>
<span class="line"></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#AB5959;">const</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">sharedRef</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">=</span><span style="color:#393A34;"> </span><span style="color:#59873A;">ref</span><span style="color:#999999;">(</span><span style="color:#B56959AA;">&#39;</span><span style="color:#B56959;">shared</span><span style="color:#B56959AA;">&#39;</span><span style="color:#999999;">)</span></span>
<span class="line"><span style="color:#B07D48;">pinia</span><span style="color:#999999;">.</span><span style="color:#59873A;">use</span><span style="color:#999999;">(({</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">store</span><span style="color:#393A34;"> </span><span style="color:#999999;">})</span><span style="color:#393A34;"> </span><span style="color:#999999;">=&gt;</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#999999;">  </span><span style="color:#A0ADA0;">// each store has its individual \`hello\` property</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#B07D48;">store</span><span style="color:#999999;">.</span><span style="color:#B07D48;">hello</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">=</span><span style="color:#393A34;"> </span><span style="color:#59873A;">ref</span><span style="color:#999999;">(</span><span style="color:#B56959AA;">&#39;</span><span style="color:#B56959;">secret</span><span style="color:#B56959AA;">&#39;</span><span style="color:#999999;">)</span></span>
<span class="line"><span style="color:#999999;">  </span><span style="color:#A0ADA0;">// it gets automatically unwrapped</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#B07D48;">store</span><span style="color:#999999;">.</span><span style="color:#B07D48;">hello</span><span style="color:#393A34;"> </span><span style="color:#A0ADA0;">// &#39;secret&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#999999;">  </span><span style="color:#A0ADA0;">// all stores are sharing the value \`shared\` property</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#B07D48;">store</span><span style="color:#999999;">.</span><span style="color:#B07D48;">shared</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">=</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">sharedRef</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#B07D48;">store</span><span style="color:#999999;">.</span><span style="color:#B07D48;">shared</span><span style="color:#393A34;"> </span><span style="color:#A0ADA0;">// &#39;shared&#39;</span></span>
<span class="line"><span style="color:#999999;">})</span></span>
<span class="line"></span></code></pre></div><p>This is why you can access all computed properties without <code>.value</code> and why they are reactive.</p><h3 id="adding-new-state" tabindex="-1">Adding new state <a class="header-anchor" href="#adding-new-state" aria-hidden="true">#</a></h3><p>If you want to add new state properties to a store or properties that are meant to be used during hydration, <strong>you will have to add it in two places</strong>:</p><ul><li>On the <code>store</code> so you can access it with <code>store.myState</code></li><li>On <code>store.$state</code> so it can be used in devtools and, <strong>be serialized during SSR</strong>.</li></ul><p>On top of that, you will certainly have to use a <code>ref()</code> (or other reactive API) in order to share the value across different accesses:</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">import</span><span style="color:#F6F6F4;"> { toRef, ref } </span><span style="color:#F286C4;">from</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">vue</span><span style="color:#DEE492;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">pinia.</span><span style="color:#62E884;">use</span><span style="color:#F6F6F4;">(({ </span><span style="color:#FFB86C;font-style:italic;">store</span><span style="color:#F6F6F4;"> }) </span><span style="color:#F286C4;">=&gt;</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#7B7F8B;">// to correctly handle SSR, we need to make sure we are not overriding an</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#7B7F8B;">// existing value</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (</span><span style="color:#F286C4;">!</span><span style="color:#97E1F1;font-style:italic;">Object</span><span style="color:#F6F6F4;">.prototype.</span><span style="color:#62E884;">hasOwnProperty</span><span style="color:#F6F6F4;">(store.$state, </span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">hasError</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">)) {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">// hasError is defined within the plugin, so each store has their individual</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">// state property</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">const</span><span style="color:#F6F6F4;"> hasError </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">ref</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">false</span><span style="color:#F6F6F4;">)</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">// setting the variable on \`$state\`, allows it be serialized during SSR</span></span>
<span class="line"><span style="color:#F6F6F4;">    store.$state.hasError </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> hasError</span></span>
<span class="line"><span style="color:#F6F6F4;">  }</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#7B7F8B;">// we need to transfer the ref from the state to the store, this way</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#7B7F8B;">// both accesses: store.hasError and store.$state.hasError will work</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#7B7F8B;">// and share the same variable</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#7B7F8B;">// See https://vuejs.org/api/reactivity-utilities.html#toref</span></span>
<span class="line"><span style="color:#F6F6F4;">  store.hasError </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">toRef</span><span style="color:#F6F6F4;">(store.$state, </span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">hasError</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#7B7F8B;">// in this case it&#39;s better not to return \`hasError\` since it</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#7B7F8B;">// will be displayed in the \`state\` section in the devtools</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#7B7F8B;">// anyway and if we return it, devtools will display it twice.</span></span>
<span class="line"><span style="color:#F6F6F4;">})</span></span>
<span class="line"></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#1E754F;">import</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">toRef</span><span style="color:#999999;">,</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">ref</span><span style="color:#393A34;"> </span><span style="color:#999999;">}</span><span style="color:#393A34;"> </span><span style="color:#1E754F;">from</span><span style="color:#393A34;"> </span><span style="color:#B56959AA;">&#39;</span><span style="color:#B56959;">vue</span><span style="color:#B56959AA;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B07D48;">pinia</span><span style="color:#999999;">.</span><span style="color:#59873A;">use</span><span style="color:#999999;">(({</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">store</span><span style="color:#393A34;"> </span><span style="color:#999999;">})</span><span style="color:#393A34;"> </span><span style="color:#999999;">=&gt;</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#999999;">  </span><span style="color:#A0ADA0;">// to correctly handle SSR, we need to make sure we are not overriding an</span></span>
<span class="line"><span style="color:#999999;">  </span><span style="color:#A0ADA0;">// existing value</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#1E754F;">if</span><span style="color:#393A34;"> </span><span style="color:#999999;">(</span><span style="color:#AB5959;">!</span><span style="color:#998418;">Object</span><span style="color:#999999;">.</span><span style="color:#998418;">prototype</span><span style="color:#999999;">.</span><span style="color:#59873A;">hasOwnProperty</span><span style="color:#999999;">(</span><span style="color:#B07D48;">store</span><span style="color:#999999;">.</span><span style="color:#B07D48;">$state</span><span style="color:#999999;">,</span><span style="color:#393A34;"> </span><span style="color:#B56959AA;">&#39;</span><span style="color:#B56959;">hasError</span><span style="color:#B56959AA;">&#39;</span><span style="color:#999999;">))</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#999999;">    </span><span style="color:#A0ADA0;">// hasError is defined within the plugin, so each store has their individual</span></span>
<span class="line"><span style="color:#999999;">    </span><span style="color:#A0ADA0;">// state property</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#AB5959;">const</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">hasError</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">=</span><span style="color:#393A34;"> </span><span style="color:#59873A;">ref</span><span style="color:#999999;">(</span><span style="color:#1E754F;">false</span><span style="color:#999999;">)</span></span>
<span class="line"><span style="color:#999999;">    </span><span style="color:#A0ADA0;">// setting the variable on \`$state\`, allows it be serialized during SSR</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#B07D48;">store</span><span style="color:#999999;">.</span><span style="color:#B07D48;">$state</span><span style="color:#999999;">.</span><span style="color:#B07D48;">hasError</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">=</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">hasError</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#999999;">}</span></span>
<span class="line"><span style="color:#999999;">  </span><span style="color:#A0ADA0;">// we need to transfer the ref from the state to the store, this way</span></span>
<span class="line"><span style="color:#999999;">  </span><span style="color:#A0ADA0;">// both accesses: store.hasError and store.$state.hasError will work</span></span>
<span class="line"><span style="color:#999999;">  </span><span style="color:#A0ADA0;">// and share the same variable</span></span>
<span class="line"><span style="color:#999999;">  </span><span style="color:#A0ADA0;">// See https://vuejs.org/api/reactivity-utilities.html#toref</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#B07D48;">store</span><span style="color:#999999;">.</span><span style="color:#B07D48;">hasError</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">=</span><span style="color:#393A34;"> </span><span style="color:#59873A;">toRef</span><span style="color:#999999;">(</span><span style="color:#B07D48;">store</span><span style="color:#999999;">.</span><span style="color:#B07D48;">$state</span><span style="color:#999999;">,</span><span style="color:#393A34;"> </span><span style="color:#B56959AA;">&#39;</span><span style="color:#B56959;">hasError</span><span style="color:#B56959AA;">&#39;</span><span style="color:#999999;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#999999;">  </span><span style="color:#A0ADA0;">// in this case it&#39;s better not to return \`hasError\` since it</span></span>
<span class="line"><span style="color:#999999;">  </span><span style="color:#A0ADA0;">// will be displayed in the \`state\` section in the devtools</span></span>
<span class="line"><span style="color:#999999;">  </span><span style="color:#A0ADA0;">// anyway and if we return it, devtools will display it twice.</span></span>
<span class="line"><span style="color:#999999;">})</span></span>
<span class="line"></span></code></pre></div><p>Note that state changes or additions that occur within a plugin (that includes calling <code>store.$patch()</code>) happen before the store is active and therefore <strong>do not trigger any subscriptions</strong>.</p><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>If you are using <strong>Vue 2</strong>, Pinia is subject to the <a href="https://v2.vuejs.org/v2/guide/reactivity.html#Change-Detection-Caveats" target="_blank" rel="noreferrer">same reactivity caveats</a> as Vue. You will need to use <code>Vue.set()</code> (Vue 2.7) or <code>set()</code> (from <code>@vue/composition-api</code> for Vue &lt;2.7) for when creating new state properties like <code>secret</code> and <code>hasError</code>:</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">import</span><span style="color:#F6F6F4;"> { set, toRef } </span><span style="color:#F286C4;">from</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">@vue/composition-api</span><span style="color:#DEE492;">&#39;</span></span>
<span class="line"><span style="color:#F6F6F4;">pinia.</span><span style="color:#62E884;">use</span><span style="color:#F6F6F4;">(({ </span><span style="color:#FFB86C;font-style:italic;">store</span><span style="color:#F6F6F4;"> }) </span><span style="color:#F286C4;">=&gt;</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (</span><span style="color:#F286C4;">!</span><span style="color:#97E1F1;font-style:italic;">Object</span><span style="color:#F6F6F4;">.prototype.</span><span style="color:#62E884;">hasOwnProperty</span><span style="color:#F6F6F4;">(store.$state, </span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">secret</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">)) {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">const</span><span style="color:#F6F6F4;"> secretRef </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">ref</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">secret</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">)</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">// If the data is meant to be used during SSR, you should</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">// set it on the \`$state\` property so it is serialized and</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">// picked up during hydration</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#62E884;">set</span><span style="color:#F6F6F4;">(store.$state, </span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">secret</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">, secretRef)</span></span>
<span class="line"><span style="color:#F6F6F4;">  }</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#7B7F8B;">// set it directly on the store too so you can access it</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#7B7F8B;">// both ways: \`store.$state.secret\` / \`store.secret\`</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#62E884;">set</span><span style="color:#F6F6F4;">(store, </span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">secret</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">, </span><span style="color:#62E884;">toRef</span><span style="color:#F6F6F4;">(store.$state, </span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">secret</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">))</span></span>
<span class="line"><span style="color:#F6F6F4;">  store.secret </span><span style="color:#7B7F8B;">// &#39;secret&#39;</span></span>
<span class="line"><span style="color:#F6F6F4;">})</span></span>
<span class="line"></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#1E754F;">import</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">set</span><span style="color:#999999;">,</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">toRef</span><span style="color:#393A34;"> </span><span style="color:#999999;">}</span><span style="color:#393A34;"> </span><span style="color:#1E754F;">from</span><span style="color:#393A34;"> </span><span style="color:#B56959AA;">&#39;</span><span style="color:#B56959;">@vue/composition-api</span><span style="color:#B56959AA;">&#39;</span></span>
<span class="line"><span style="color:#B07D48;">pinia</span><span style="color:#999999;">.</span><span style="color:#59873A;">use</span><span style="color:#999999;">(({</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">store</span><span style="color:#393A34;"> </span><span style="color:#999999;">})</span><span style="color:#393A34;"> </span><span style="color:#999999;">=&gt;</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#1E754F;">if</span><span style="color:#393A34;"> </span><span style="color:#999999;">(</span><span style="color:#AB5959;">!</span><span style="color:#998418;">Object</span><span style="color:#999999;">.</span><span style="color:#998418;">prototype</span><span style="color:#999999;">.</span><span style="color:#59873A;">hasOwnProperty</span><span style="color:#999999;">(</span><span style="color:#B07D48;">store</span><span style="color:#999999;">.</span><span style="color:#B07D48;">$state</span><span style="color:#999999;">,</span><span style="color:#393A34;"> </span><span style="color:#B56959AA;">&#39;</span><span style="color:#B56959;">secret</span><span style="color:#B56959AA;">&#39;</span><span style="color:#999999;">))</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#AB5959;">const</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">secretRef</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">=</span><span style="color:#393A34;"> </span><span style="color:#59873A;">ref</span><span style="color:#999999;">(</span><span style="color:#B56959AA;">&#39;</span><span style="color:#B56959;">secret</span><span style="color:#B56959AA;">&#39;</span><span style="color:#999999;">)</span></span>
<span class="line"><span style="color:#999999;">    </span><span style="color:#A0ADA0;">// If the data is meant to be used during SSR, you should</span></span>
<span class="line"><span style="color:#999999;">    </span><span style="color:#A0ADA0;">// set it on the \`$state\` property so it is serialized and</span></span>
<span class="line"><span style="color:#999999;">    </span><span style="color:#A0ADA0;">// picked up during hydration</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#59873A;">set</span><span style="color:#999999;">(</span><span style="color:#B07D48;">store</span><span style="color:#999999;">.</span><span style="color:#B07D48;">$state</span><span style="color:#999999;">,</span><span style="color:#393A34;"> </span><span style="color:#B56959AA;">&#39;</span><span style="color:#B56959;">secret</span><span style="color:#B56959AA;">&#39;</span><span style="color:#999999;">,</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">secretRef</span><span style="color:#999999;">)</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#999999;">}</span></span>
<span class="line"><span style="color:#999999;">  </span><span style="color:#A0ADA0;">// set it directly on the store too so you can access it</span></span>
<span class="line"><span style="color:#999999;">  </span><span style="color:#A0ADA0;">// both ways: \`store.$state.secret\` / \`store.secret\`</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#59873A;">set</span><span style="color:#999999;">(</span><span style="color:#B07D48;">store</span><span style="color:#999999;">,</span><span style="color:#393A34;"> </span><span style="color:#B56959AA;">&#39;</span><span style="color:#B56959;">secret</span><span style="color:#B56959AA;">&#39;</span><span style="color:#999999;">,</span><span style="color:#393A34;"> </span><span style="color:#59873A;">toRef</span><span style="color:#999999;">(</span><span style="color:#B07D48;">store</span><span style="color:#999999;">.</span><span style="color:#B07D48;">$state</span><span style="color:#999999;">,</span><span style="color:#393A34;"> </span><span style="color:#B56959AA;">&#39;</span><span style="color:#B56959;">secret</span><span style="color:#B56959AA;">&#39;</span><span style="color:#999999;">))</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#B07D48;">store</span><span style="color:#999999;">.</span><span style="color:#B07D48;">secret</span><span style="color:#393A34;"> </span><span style="color:#A0ADA0;">// &#39;secret&#39;</span></span>
<span class="line"><span style="color:#999999;">})</span></span>
<span class="line"></span></code></pre></div></div><h4 id="resetting-state-added-in-plugins" tabindex="-1">Resetting state added in plugins <a class="header-anchor" href="#resetting-state-added-in-plugins" aria-hidden="true">#</a></h4><p>By default, <code>$reset()</code> will not reset state added by plugins but you can override it to also reset the state you add:</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">import</span><span style="color:#F6F6F4;"> { toRef, ref } </span><span style="color:#F286C4;">from</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">vue</span><span style="color:#DEE492;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">pinia.</span><span style="color:#62E884;">use</span><span style="color:#F6F6F4;">(({ </span><span style="color:#FFB86C;font-style:italic;">store</span><span style="color:#F6F6F4;"> }) </span><span style="color:#F286C4;">=&gt;</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#7B7F8B;">// this is the same code as above for reference</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (</span><span style="color:#F286C4;">!</span><span style="color:#97E1F1;font-style:italic;">Object</span><span style="color:#F6F6F4;">.prototype.</span><span style="color:#62E884;">hasOwnProperty</span><span style="color:#F6F6F4;">(store.$state, </span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">hasError</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">)) {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">const</span><span style="color:#F6F6F4;"> hasError </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">ref</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">false</span><span style="color:#F6F6F4;">)</span></span>
<span class="line"><span style="color:#F6F6F4;">    store.$state.hasError </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> hasError</span></span>
<span class="line"><span style="color:#F6F6F4;">  }</span></span>
<span class="line"><span style="color:#F6F6F4;">  store.hasError </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">toRef</span><span style="color:#F6F6F4;">(store.$state, </span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">hasError</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;"> </span><span style="color:#7B7F8B;">// make sure to set the context (\`this\`) to the store</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#F286C4;">const</span><span style="color:#F6F6F4;"> originalReset </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> store.$reset.</span><span style="color:#62E884;">bind</span><span style="color:#F6F6F4;">(store)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;"> </span><span style="color:#7B7F8B;">// override the $reset function</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#62E884;">$reset</span><span style="color:#F6F6F4;">() {</span></span>
<span class="line"><span style="color:#F6F6F4;">      </span><span style="color:#62E884;">originalReset</span><span style="color:#F6F6F4;">()</span></span>
<span class="line"><span style="color:#F6F6F4;">      store.hasError </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">false</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">  }</span></span>
<span class="line"><span style="color:#F6F6F4;">})</span></span>
<span class="line"></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#1E754F;">import</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">toRef</span><span style="color:#999999;">,</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">ref</span><span style="color:#393A34;"> </span><span style="color:#999999;">}</span><span style="color:#393A34;"> </span><span style="color:#1E754F;">from</span><span style="color:#393A34;"> </span><span style="color:#B56959AA;">&#39;</span><span style="color:#B56959;">vue</span><span style="color:#B56959AA;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B07D48;">pinia</span><span style="color:#999999;">.</span><span style="color:#59873A;">use</span><span style="color:#999999;">(({</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">store</span><span style="color:#393A34;"> </span><span style="color:#999999;">})</span><span style="color:#393A34;"> </span><span style="color:#999999;">=&gt;</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#999999;">  </span><span style="color:#A0ADA0;">// this is the same code as above for reference</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#1E754F;">if</span><span style="color:#393A34;"> </span><span style="color:#999999;">(</span><span style="color:#AB5959;">!</span><span style="color:#998418;">Object</span><span style="color:#999999;">.</span><span style="color:#998418;">prototype</span><span style="color:#999999;">.</span><span style="color:#59873A;">hasOwnProperty</span><span style="color:#999999;">(</span><span style="color:#B07D48;">store</span><span style="color:#999999;">.</span><span style="color:#B07D48;">$state</span><span style="color:#999999;">,</span><span style="color:#393A34;"> </span><span style="color:#B56959AA;">&#39;</span><span style="color:#B56959;">hasError</span><span style="color:#B56959AA;">&#39;</span><span style="color:#999999;">))</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#AB5959;">const</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">hasError</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">=</span><span style="color:#393A34;"> </span><span style="color:#59873A;">ref</span><span style="color:#999999;">(</span><span style="color:#1E754F;">false</span><span style="color:#999999;">)</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#B07D48;">store</span><span style="color:#999999;">.</span><span style="color:#B07D48;">$state</span><span style="color:#999999;">.</span><span style="color:#B07D48;">hasError</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">=</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">hasError</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#999999;">}</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#B07D48;">store</span><span style="color:#999999;">.</span><span style="color:#B07D48;">hasError</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">=</span><span style="color:#393A34;"> </span><span style="color:#59873A;">toRef</span><span style="color:#999999;">(</span><span style="color:#B07D48;">store</span><span style="color:#999999;">.</span><span style="color:#B07D48;">$state</span><span style="color:#999999;">,</span><span style="color:#393A34;"> </span><span style="color:#B56959AA;">&#39;</span><span style="color:#B56959;">hasError</span><span style="color:#B56959AA;">&#39;</span><span style="color:#999999;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#999999;"> </span><span style="color:#A0ADA0;">// make sure to set the context (\`this\`) to the store</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#AB5959;">const</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">originalReset</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">=</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">store</span><span style="color:#999999;">.</span><span style="color:#B07D48;">$reset</span><span style="color:#999999;">.</span><span style="color:#59873A;">bind</span><span style="color:#999999;">(</span><span style="color:#B07D48;">store</span><span style="color:#999999;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#999999;"> </span><span style="color:#A0ADA0;">// override the $reset function</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#1E754F;">return</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#59873A;">$reset</span><span style="color:#999999;">()</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">      </span><span style="color:#59873A;">originalReset</span><span style="color:#999999;">()</span></span>
<span class="line"><span style="color:#393A34;">      </span><span style="color:#B07D48;">store</span><span style="color:#999999;">.</span><span style="color:#B07D48;">hasError</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">=</span><span style="color:#393A34;"> </span><span style="color:#1E754F;">false</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#999999;">}</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#999999;">}</span></span>
<span class="line"><span style="color:#999999;">})</span></span>
<span class="line"></span></code></pre></div><h2 id="adding-new-external-properties" tabindex="-1">Adding new external properties <a class="header-anchor" href="#adding-new-external-properties" aria-hidden="true">#</a></h2><p>When adding external properties, class instances that come from other libraries, or simply things that are not reactive, you should wrap the object with <code>markRaw()</code> before passing it to pinia. Here is an example adding the router to every store:</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">import</span><span style="color:#F6F6F4;"> { markRaw } </span><span style="color:#F286C4;">from</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">vue</span><span style="color:#DEE492;">&#39;</span></span>
<span class="line"><span style="color:#7B7F8B;">// adapt this based on where your router is</span></span>
<span class="line"><span style="color:#F286C4;">import</span><span style="color:#F6F6F4;"> { router } </span><span style="color:#F286C4;">from</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">./router</span><span style="color:#DEE492;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">pinia.</span><span style="color:#62E884;">use</span><span style="color:#F6F6F4;">(({ </span><span style="color:#FFB86C;font-style:italic;">store</span><span style="color:#F6F6F4;"> }) </span><span style="color:#F286C4;">=&gt;</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">  store.router </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">markRaw</span><span style="color:#F6F6F4;">(router)</span></span>
<span class="line"><span style="color:#F6F6F4;">})</span></span>
<span class="line"></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#1E754F;">import</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">markRaw</span><span style="color:#393A34;"> </span><span style="color:#999999;">}</span><span style="color:#393A34;"> </span><span style="color:#1E754F;">from</span><span style="color:#393A34;"> </span><span style="color:#B56959AA;">&#39;</span><span style="color:#B56959;">vue</span><span style="color:#B56959AA;">&#39;</span></span>
<span class="line"><span style="color:#A0ADA0;">// adapt this based on where your router is</span></span>
<span class="line"><span style="color:#1E754F;">import</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">router</span><span style="color:#393A34;"> </span><span style="color:#999999;">}</span><span style="color:#393A34;"> </span><span style="color:#1E754F;">from</span><span style="color:#393A34;"> </span><span style="color:#B56959AA;">&#39;</span><span style="color:#B56959;">./router</span><span style="color:#B56959AA;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B07D48;">pinia</span><span style="color:#999999;">.</span><span style="color:#59873A;">use</span><span style="color:#999999;">(({</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">store</span><span style="color:#393A34;"> </span><span style="color:#999999;">})</span><span style="color:#393A34;"> </span><span style="color:#999999;">=&gt;</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#B07D48;">store</span><span style="color:#999999;">.</span><span style="color:#B07D48;">router</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">=</span><span style="color:#393A34;"> </span><span style="color:#59873A;">markRaw</span><span style="color:#999999;">(</span><span style="color:#B07D48;">router</span><span style="color:#999999;">)</span></span>
<span class="line"><span style="color:#999999;">})</span></span>
<span class="line"></span></code></pre></div><h2 id="calling-subscribe-inside-plugins" tabindex="-1">Calling <code>$subscribe</code> inside plugins <a class="header-anchor" href="#calling-subscribe-inside-plugins" aria-hidden="true">#</a></h2><p>You can use <a href="./state.html#subscribing-to-the-state">store.$subscribe</a> and <a href="./actions.html#subscribing-to-actions">store.$onAction</a> inside plugins too:</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F6F6F4;">pinia.</span><span style="color:#62E884;">use</span><span style="color:#F6F6F4;">(({ </span><span style="color:#FFB86C;font-style:italic;">store</span><span style="color:#F6F6F4;"> }) </span><span style="color:#F286C4;">=&gt;</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">  store.</span><span style="color:#62E884;">$subscribe</span><span style="color:#F6F6F4;">(() </span><span style="color:#F286C4;">=&gt;</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">// react to store changes</span></span>
<span class="line"><span style="color:#F6F6F4;">  })</span></span>
<span class="line"><span style="color:#F6F6F4;">  store.</span><span style="color:#62E884;">$onAction</span><span style="color:#F6F6F4;">(() </span><span style="color:#F286C4;">=&gt;</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">// react to store actions</span></span>
<span class="line"><span style="color:#F6F6F4;">  })</span></span>
<span class="line"><span style="color:#F6F6F4;">})</span></span>
<span class="line"></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#B07D48;">pinia</span><span style="color:#999999;">.</span><span style="color:#59873A;">use</span><span style="color:#999999;">(({</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">store</span><span style="color:#393A34;"> </span><span style="color:#999999;">})</span><span style="color:#393A34;"> </span><span style="color:#999999;">=&gt;</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#B07D48;">store</span><span style="color:#999999;">.</span><span style="color:#59873A;">$subscribe</span><span style="color:#999999;">(()</span><span style="color:#393A34;"> </span><span style="color:#999999;">=&gt;</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#999999;">    </span><span style="color:#A0ADA0;">// react to store changes</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#999999;">})</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#B07D48;">store</span><span style="color:#999999;">.</span><span style="color:#59873A;">$onAction</span><span style="color:#999999;">(()</span><span style="color:#393A34;"> </span><span style="color:#999999;">=&gt;</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#999999;">    </span><span style="color:#A0ADA0;">// react to store actions</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#999999;">})</span></span>
<span class="line"><span style="color:#999999;">})</span></span>
<span class="line"></span></code></pre></div><h2 id="adding-new-options" tabindex="-1">Adding new options <a class="header-anchor" href="#adding-new-options" aria-hidden="true">#</a></h2><p>It is possible to create new options when defining stores to later on consume them from plugins. For example, you could create a <code>debounce</code> option that allows you to debounce any action:</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#62E884;">defineStore</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">search</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">, {</span></span>
<span class="line"><span style="color:#F6F6F4;">  actions</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#62E884;">searchContacts</span><span style="color:#F6F6F4;">() {</span></span>
<span class="line"><span style="color:#F6F6F4;">      </span><span style="color:#7B7F8B;">// ...</span></span>
<span class="line"><span style="color:#F6F6F4;">    },</span></span>
<span class="line"><span style="color:#F6F6F4;">  },</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#7B7F8B;">// this will be read by a plugin later on</span></span>
<span class="line"><span style="color:#F6F6F4;">  debounce</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">// debounce the action searchContacts by 300ms</span></span>
<span class="line"><span style="color:#F6F6F4;">    searchContacts</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">300</span><span style="color:#F6F6F4;">,</span></span>
<span class="line"><span style="color:#F6F6F4;">  },</span></span>
<span class="line"><span style="color:#F6F6F4;">})</span></span>
<span class="line"></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#59873A;">defineStore</span><span style="color:#999999;">(</span><span style="color:#B56959AA;">&#39;</span><span style="color:#B56959;">search</span><span style="color:#B56959AA;">&#39;</span><span style="color:#999999;">,</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#998418;">actions</span><span style="color:#999999;">:</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#59873A;">searchContacts</span><span style="color:#999999;">()</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#999999;">      </span><span style="color:#A0ADA0;">// ...</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#999999;">},</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#999999;">},</span></span>
<span class="line"></span>
<span class="line"><span style="color:#999999;">  </span><span style="color:#A0ADA0;">// this will be read by a plugin later on</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#998418;">debounce</span><span style="color:#999999;">:</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#999999;">    </span><span style="color:#A0ADA0;">// debounce the action searchContacts by 300ms</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#998418;">searchContacts</span><span style="color:#999999;">:</span><span style="color:#393A34;"> </span><span style="color:#2F798A;">300</span><span style="color:#999999;">,</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#999999;">},</span></span>
<span class="line"><span style="color:#999999;">})</span></span>
<span class="line"></span></code></pre></div><p>The plugin can then read that option to wrap actions and replace the original ones:</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;">// use any debounce library</span></span>
<span class="line"><span style="color:#F286C4;">import</span><span style="color:#F6F6F4;"> debounce </span><span style="color:#F286C4;">from</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">lodash/debounce</span><span style="color:#DEE492;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">pinia.</span><span style="color:#62E884;">use</span><span style="color:#F6F6F4;">(({ </span><span style="color:#FFB86C;font-style:italic;">options</span><span style="color:#F6F6F4;">, </span><span style="color:#FFB86C;font-style:italic;">store</span><span style="color:#F6F6F4;"> }) </span><span style="color:#F286C4;">=&gt;</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (options.debounce) {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">// we are overriding the actions with new ones</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> Object.</span><span style="color:#62E884;">keys</span><span style="color:#F6F6F4;">(options.debounce).</span><span style="color:#62E884;">reduce</span><span style="color:#F6F6F4;">((</span><span style="color:#FFB86C;font-style:italic;">debouncedActions</span><span style="color:#F6F6F4;">, </span><span style="color:#FFB86C;font-style:italic;">action</span><span style="color:#F6F6F4;">) </span><span style="color:#F286C4;">=&gt;</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">      debouncedActions[action] </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">debounce</span><span style="color:#F6F6F4;">(</span></span>
<span class="line"><span style="color:#F6F6F4;">        store[action],</span></span>
<span class="line"><span style="color:#F6F6F4;">        options.debounce[action]</span></span>
<span class="line"><span style="color:#F6F6F4;">      )</span></span>
<span class="line"><span style="color:#F6F6F4;">      </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> debouncedActions</span></span>
<span class="line"><span style="color:#F6F6F4;">    }, {})</span></span>
<span class="line"><span style="color:#F6F6F4;">  }</span></span>
<span class="line"><span style="color:#F6F6F4;">})</span></span>
<span class="line"></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#A0ADA0;">// use any debounce library</span></span>
<span class="line"><span style="color:#1E754F;">import</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">debounce</span><span style="color:#393A34;"> </span><span style="color:#1E754F;">from</span><span style="color:#393A34;"> </span><span style="color:#B56959AA;">&#39;</span><span style="color:#B56959;">lodash/debounce</span><span style="color:#B56959AA;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B07D48;">pinia</span><span style="color:#999999;">.</span><span style="color:#59873A;">use</span><span style="color:#999999;">(({</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">options</span><span style="color:#999999;">,</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">store</span><span style="color:#393A34;"> </span><span style="color:#999999;">})</span><span style="color:#393A34;"> </span><span style="color:#999999;">=&gt;</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#1E754F;">if</span><span style="color:#393A34;"> </span><span style="color:#999999;">(</span><span style="color:#B07D48;">options</span><span style="color:#999999;">.</span><span style="color:#B07D48;">debounce</span><span style="color:#999999;">)</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#999999;">    </span><span style="color:#A0ADA0;">// we are overriding the actions with new ones</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#1E754F;">return</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">Object</span><span style="color:#999999;">.</span><span style="color:#59873A;">keys</span><span style="color:#999999;">(</span><span style="color:#B07D48;">options</span><span style="color:#999999;">.</span><span style="color:#B07D48;">debounce</span><span style="color:#999999;">).</span><span style="color:#59873A;">reduce</span><span style="color:#999999;">((</span><span style="color:#B07D48;">debouncedActions</span><span style="color:#999999;">,</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">action</span><span style="color:#999999;">)</span><span style="color:#393A34;"> </span><span style="color:#999999;">=&gt;</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">      </span><span style="color:#B07D48;">debouncedActions</span><span style="color:#999999;">[</span><span style="color:#B07D48;">action</span><span style="color:#999999;">]</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">=</span><span style="color:#393A34;"> </span><span style="color:#59873A;">debounce</span><span style="color:#999999;">(</span></span>
<span class="line"><span style="color:#393A34;">        </span><span style="color:#B07D48;">store</span><span style="color:#999999;">[</span><span style="color:#B07D48;">action</span><span style="color:#999999;">],</span></span>
<span class="line"><span style="color:#393A34;">        </span><span style="color:#B07D48;">options</span><span style="color:#999999;">.</span><span style="color:#B07D48;">debounce</span><span style="color:#999999;">[</span><span style="color:#B07D48;">action</span><span style="color:#999999;">]</span></span>
<span class="line"><span style="color:#393A34;">      </span><span style="color:#999999;">)</span></span>
<span class="line"><span style="color:#393A34;">      </span><span style="color:#1E754F;">return</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">debouncedActions</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#999999;">},</span><span style="color:#393A34;"> </span><span style="color:#999999;">{})</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#999999;">}</span></span>
<span class="line"><span style="color:#999999;">})</span></span>
<span class="line"></span></code></pre></div><p>Note that custom options are passed as the 3rd argument when using the setup syntax:</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#62E884;">defineStore</span><span style="color:#F6F6F4;">(</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">search</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">,</span></span>
<span class="line"><span style="color:#F6F6F4;">  () </span><span style="color:#F286C4;">=&gt;</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">// ...</span></span>
<span class="line"><span style="color:#F6F6F4;">  },</span></span>
<span class="line"><span style="color:#F6F6F4;">  {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">// this will be read by a plugin later on</span></span>
<span class="line"><span style="color:#F6F6F4;">    debounce</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">      </span><span style="color:#7B7F8B;">// debounce the action searchContacts by 300ms</span></span>
<span class="line"><span style="color:#F6F6F4;">      searchContacts</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">300</span><span style="color:#F6F6F4;">,</span></span>
<span class="line"><span style="color:#F6F6F4;">    },</span></span>
<span class="line"><span style="color:#F6F6F4;">  }</span></span>
<span class="line"><span style="color:#F6F6F4;">)</span></span>
<span class="line"></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#59873A;">defineStore</span><span style="color:#999999;">(</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#B56959AA;">&#39;</span><span style="color:#B56959;">search</span><span style="color:#B56959AA;">&#39;</span><span style="color:#999999;">,</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#999999;">()</span><span style="color:#393A34;"> </span><span style="color:#999999;">=&gt;</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#999999;">    </span><span style="color:#A0ADA0;">// ...</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#999999;">},</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#999999;">    </span><span style="color:#A0ADA0;">// this will be read by a plugin later on</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#998418;">debounce</span><span style="color:#999999;">:</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#999999;">      </span><span style="color:#A0ADA0;">// debounce the action searchContacts by 300ms</span></span>
<span class="line"><span style="color:#393A34;">      </span><span style="color:#998418;">searchContacts</span><span style="color:#999999;">:</span><span style="color:#393A34;"> </span><span style="color:#2F798A;">300</span><span style="color:#999999;">,</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#999999;">},</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#999999;">}</span></span>
<span class="line"><span style="color:#999999;">)</span></span>
<span class="line"></span></code></pre></div><h2 id="typescript" tabindex="-1">TypeScript <a class="header-anchor" href="#typescript" aria-hidden="true">#</a></h2><p>Everything shown above can be done with typing support, so you don&#39;t ever need to use <code>any</code> or <code>@ts-ignore</code>.</p><h3 id="typing-plugins" tabindex="-1">Typing plugins <a class="header-anchor" href="#typing-plugins" aria-hidden="true">#</a></h3><p>A Pinia plugin can be typed as follows:</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">import</span><span style="color:#F6F6F4;"> { PiniaPluginContext } </span><span style="color:#F286C4;">from</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">pinia</span><span style="color:#DEE492;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F286C4;">export</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">function</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">myPiniaPlugin</span><span style="color:#F6F6F4;">(</span><span style="color:#FFB86C;font-style:italic;">context</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">PiniaPluginContext</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#7B7F8B;">// ...</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span>
<span class="line"></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#1E754F;">import</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">PiniaPluginContext</span><span style="color:#393A34;"> </span><span style="color:#999999;">}</span><span style="color:#393A34;"> </span><span style="color:#1E754F;">from</span><span style="color:#393A34;"> </span><span style="color:#B56959AA;">&#39;</span><span style="color:#B56959;">pinia</span><span style="color:#B56959AA;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#1E754F;">export</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">function</span><span style="color:#393A34;"> </span><span style="color:#59873A;">myPiniaPlugin</span><span style="color:#999999;">(</span><span style="color:#B07D48;">context</span><span style="color:#999999;">: </span><span style="color:#2E808F;">PiniaPluginContext</span><span style="color:#999999;">)</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#999999;">  </span><span style="color:#A0ADA0;">// ...</span></span>
<span class="line"><span style="color:#999999;">}</span></span>
<span class="line"></span></code></pre></div><h3 id="typing-new-store-properties" tabindex="-1">Typing new store properties <a class="header-anchor" href="#typing-new-store-properties" aria-hidden="true">#</a></h3><p>When adding new properties to stores, you should also extend the <code>PiniaCustomProperties</code> interface.</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">import</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">pinia</span><span style="color:#DEE492;">&#39;</span></span>
<span class="line"><span style="color:#F286C4;">import</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">type</span><span style="color:#F6F6F4;"> { Router } </span><span style="color:#F286C4;">from</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">vue-router</span><span style="color:#DEE492;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F286C4;">declare</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">module</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">pinia</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#F286C4;">export</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">interface</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">PiniaCustomProperties</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">// by using a setter we can allow both strings and refs</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">set</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">hello</span><span style="color:#F6F6F4;">(</span><span style="color:#FFB86C;font-style:italic;">value</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">string</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">|</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">Ref</span><span style="color:#F6F6F4;">&lt;</span><span style="color:#97E1F1;font-style:italic;">string</span><span style="color:#F6F6F4;">&gt;)</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">get</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">hello</span><span style="color:#F6F6F4;">()</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">string</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">// you can define simpler values too</span></span>
<span class="line"><span style="color:#F6F6F4;">    simpleNumber</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">number</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">// type the router added by the plugin above (#adding-new-external-properties)</span></span>
<span class="line"><span style="color:#F6F6F4;">    router</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">Router</span></span>
<span class="line"><span style="color:#F6F6F4;">  }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span>
<span class="line"></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#1E754F;">import</span><span style="color:#393A34;"> </span><span style="color:#B56959AA;">&#39;</span><span style="color:#B56959;">pinia</span><span style="color:#B56959AA;">&#39;</span></span>
<span class="line"><span style="color:#1E754F;">import</span><span style="color:#393A34;"> </span><span style="color:#1E754F;">type</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">Router</span><span style="color:#393A34;"> </span><span style="color:#999999;">}</span><span style="color:#393A34;"> </span><span style="color:#1E754F;">from</span><span style="color:#393A34;"> </span><span style="color:#B56959AA;">&#39;</span><span style="color:#B56959;">vue-router</span><span style="color:#B56959AA;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#AB5959;">declare</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">module</span><span style="color:#393A34;"> </span><span style="color:#B56959AA;">&#39;</span><span style="color:#B56959;">pinia</span><span style="color:#B56959AA;">&#39;</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#1E754F;">export</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">interface</span><span style="color:#393A34;"> </span><span style="color:#2E808F;">PiniaCustomProperties</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#999999;">    </span><span style="color:#A0ADA0;">// by using a setter we can allow both strings and refs</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#AB5959;">set</span><span style="color:#393A34;"> </span><span style="color:#59873A;">hello</span><span style="color:#999999;">(</span><span style="color:#B07D48;">value</span><span style="color:#999999;">: </span><span style="color:#2E808F;">string</span><span style="color:#999999;"> | </span><span style="color:#2E808F;">Ref</span><span style="color:#999999;">&lt;</span><span style="color:#2E808F;">string</span><span style="color:#999999;">&gt;)</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#AB5959;">get</span><span style="color:#393A34;"> </span><span style="color:#59873A;">hello</span><span style="color:#999999;">():</span><span style="color:#393A34;"> </span><span style="color:#2E808F;">string</span></span>
<span class="line"></span>
<span class="line"><span style="color:#999999;">    </span><span style="color:#A0ADA0;">// you can define simpler values too</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#B07D48;">simpleNumber</span><span style="color:#999999;">: </span><span style="color:#2E808F;">number</span></span>
<span class="line"></span>
<span class="line"><span style="color:#999999;">    </span><span style="color:#A0ADA0;">// type the router added by the plugin above (#adding-new-external-properties)</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#B07D48;">router</span><span style="color:#999999;">: </span><span style="color:#2E808F;">Router</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#999999;">}</span></span>
<span class="line"><span style="color:#999999;">}</span></span>
<span class="line"></span></code></pre></div><p>It can then be written and read safely:</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F6F6F4;">pinia.</span><span style="color:#62E884;">use</span><span style="color:#F6F6F4;">(({ </span><span style="color:#FFB86C;font-style:italic;">store</span><span style="color:#F6F6F4;"> }) </span><span style="color:#F286C4;">=&gt;</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">  store.hello </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">Hola</span><span style="color:#DEE492;">&#39;</span></span>
<span class="line"><span style="color:#F6F6F4;">  store.hello </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">ref</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">Hola</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">  store.simpleNumber </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> Math.</span><span style="color:#62E884;">random</span><span style="color:#F6F6F4;">()</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#7B7F8B;">// @ts-expect-error: we haven&#39;t typed this correctly</span></span>
<span class="line"><span style="color:#F6F6F4;">  store.simpleNumber </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">ref</span><span style="color:#F6F6F4;">(Math.</span><span style="color:#62E884;">random</span><span style="color:#F6F6F4;">())</span></span>
<span class="line"><span style="color:#F6F6F4;">})</span></span>
<span class="line"></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#B07D48;">pinia</span><span style="color:#999999;">.</span><span style="color:#59873A;">use</span><span style="color:#999999;">(({</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">store</span><span style="color:#393A34;"> </span><span style="color:#999999;">})</span><span style="color:#393A34;"> </span><span style="color:#999999;">=&gt;</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#B07D48;">store</span><span style="color:#999999;">.</span><span style="color:#B07D48;">hello</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">=</span><span style="color:#393A34;"> </span><span style="color:#B56959AA;">&#39;</span><span style="color:#B56959;">Hola</span><span style="color:#B56959AA;">&#39;</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#B07D48;">store</span><span style="color:#999999;">.</span><span style="color:#B07D48;">hello</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">=</span><span style="color:#393A34;"> </span><span style="color:#59873A;">ref</span><span style="color:#999999;">(</span><span style="color:#B56959AA;">&#39;</span><span style="color:#B56959;">Hola</span><span style="color:#B56959AA;">&#39;</span><span style="color:#999999;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#B07D48;">store</span><span style="color:#999999;">.</span><span style="color:#B07D48;">simpleNumber</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">=</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">Math</span><span style="color:#999999;">.</span><span style="color:#59873A;">random</span><span style="color:#999999;">()</span></span>
<span class="line"><span style="color:#999999;">  </span><span style="color:#A0ADA0;">// @ts-expect-error: we haven&#39;t typed this correctly</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#B07D48;">store</span><span style="color:#999999;">.</span><span style="color:#B07D48;">simpleNumber</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">=</span><span style="color:#393A34;"> </span><span style="color:#59873A;">ref</span><span style="color:#999999;">(</span><span style="color:#B07D48;">Math</span><span style="color:#999999;">.</span><span style="color:#59873A;">random</span><span style="color:#999999;">())</span></span>
<span class="line"><span style="color:#999999;">})</span></span>
<span class="line"></span></code></pre></div><p><code>PiniaCustomProperties</code> is a generic type that allows you to reference properties of a store. Imagine the following example where we copy over the initial options as <code>$options</code> (this would only work for option stores):</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F6F6F4;">pinia.</span><span style="color:#62E884;">use</span><span style="color:#F6F6F4;">(({ </span><span style="color:#FFB86C;font-style:italic;">options</span><span style="color:#F6F6F4;"> }) </span><span style="color:#F286C4;">=&gt;</span><span style="color:#F6F6F4;"> ({ $options</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> options }))</span></span>
<span class="line"></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#B07D48;">pinia</span><span style="color:#999999;">.</span><span style="color:#59873A;">use</span><span style="color:#999999;">(({</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">options</span><span style="color:#393A34;"> </span><span style="color:#999999;">})</span><span style="color:#393A34;"> </span><span style="color:#999999;">=&gt;</span><span style="color:#393A34;"> </span><span style="color:#999999;">({ </span><span style="color:#998418;">$options</span><span style="color:#999999;">: </span><span style="color:#B07D48;">options</span><span style="color:#999999;"> }))</span></span>
<span class="line"></span></code></pre></div><p>We can properly type this by using the 4 generic types of <code>PiniaCustomProperties</code>:</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">import</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">pinia</span><span style="color:#DEE492;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F286C4;">declare</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">module</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">pinia</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#F286C4;">export</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">interface</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">PiniaCustomProperties</span><span style="color:#F6F6F4;">&lt;</span><span style="color:#FFB86C;font-style:italic;">Id</span><span style="color:#F6F6F4;">, </span><span style="color:#FFB86C;font-style:italic;">S</span><span style="color:#F6F6F4;">, </span><span style="color:#FFB86C;font-style:italic;">G</span><span style="color:#F6F6F4;">, </span><span style="color:#FFB86C;font-style:italic;">A</span><span style="color:#F6F6F4;">&gt; {</span></span>
<span class="line"><span style="color:#F6F6F4;">    $options</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">      id</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">Id</span></span>
<span class="line"><span style="color:#F6F6F4;">      </span><span style="color:#62E884;">state</span><span style="color:#F286C4;">?:</span><span style="color:#F6F6F4;"> () </span><span style="color:#F286C4;">=&gt;</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">S</span></span>
<span class="line"><span style="color:#F6F6F4;">      getters</span><span style="color:#F286C4;">?:</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">G</span></span>
<span class="line"><span style="color:#F6F6F4;">      actions</span><span style="color:#F286C4;">?:</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">A</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">  }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span>
<span class="line"></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#1E754F;">import</span><span style="color:#393A34;"> </span><span style="color:#B56959AA;">&#39;</span><span style="color:#B56959;">pinia</span><span style="color:#B56959AA;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#AB5959;">declare</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">module</span><span style="color:#393A34;"> </span><span style="color:#B56959AA;">&#39;</span><span style="color:#B56959;">pinia</span><span style="color:#B56959AA;">&#39;</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#1E754F;">export</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">interface</span><span style="color:#393A34;"> </span><span style="color:#2E808F;">PiniaCustomProperties</span><span style="color:#999999;">&lt;</span><span style="color:#2E808F;">Id</span><span style="color:#999999;">,</span><span style="color:#393A34;"> </span><span style="color:#2E808F;">S</span><span style="color:#999999;">,</span><span style="color:#393A34;"> </span><span style="color:#2E808F;">G</span><span style="color:#999999;">,</span><span style="color:#393A34;"> </span><span style="color:#2E808F;">A</span><span style="color:#999999;">&gt;</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#B07D48;">$options</span><span style="color:#999999;">: {</span></span>
<span class="line"><span style="color:#999999;">      </span><span style="color:#B07D48;">id</span><span style="color:#999999;">: </span><span style="color:#2E808F;">Id</span></span>
<span class="line"><span style="color:#999999;">      </span><span style="color:#59873A;">state</span><span style="color:#AB5959;">?</span><span style="color:#999999;">: () =&gt; </span><span style="color:#2E808F;">S</span></span>
<span class="line"><span style="color:#999999;">      </span><span style="color:#B07D48;">getters</span><span style="color:#AB5959;">?</span><span style="color:#999999;">: </span><span style="color:#2E808F;">G</span></span>
<span class="line"><span style="color:#999999;">      </span><span style="color:#B07D48;">actions</span><span style="color:#AB5959;">?</span><span style="color:#999999;">: </span><span style="color:#2E808F;">A</span></span>
<span class="line"><span style="color:#999999;">    }</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#999999;">}</span></span>
<span class="line"><span style="color:#999999;">}</span></span>
<span class="line"></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>When extending types in generics, they must be named <strong>exactly as in the source code</strong>. <code>Id</code> cannot be named <code>id</code> or <code>I</code>, and <code>S</code> cannot be named <code>State</code>. Here is what every letter stands for:</p><ul><li>S: State</li><li>G: Getters</li><li>A: Actions</li><li>SS: Setup Store / Store</li></ul></div><h3 id="typing-new-state" tabindex="-1">Typing new state <a class="header-anchor" href="#typing-new-state" aria-hidden="true">#</a></h3><p>When adding new state properties (to both, the <code>store</code> and <code>store.$state</code>), you need to add the type to <code>PiniaCustomStateProperties</code> instead. Differently from <code>PiniaCustomProperties</code>, it only receives the <code>State</code> generic:</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">import</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">pinia</span><span style="color:#DEE492;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F286C4;">declare</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">module</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">pinia</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#F286C4;">export</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">interface</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">PiniaCustomStateProperties</span><span style="color:#F6F6F4;">&lt;</span><span style="color:#FFB86C;font-style:italic;">S</span><span style="color:#F6F6F4;">&gt; {</span></span>
<span class="line"><span style="color:#F6F6F4;">    hello</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">string</span></span>
<span class="line"><span style="color:#F6F6F4;">  }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span>
<span class="line"></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#1E754F;">import</span><span style="color:#393A34;"> </span><span style="color:#B56959AA;">&#39;</span><span style="color:#B56959;">pinia</span><span style="color:#B56959AA;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#AB5959;">declare</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">module</span><span style="color:#393A34;"> </span><span style="color:#B56959AA;">&#39;</span><span style="color:#B56959;">pinia</span><span style="color:#B56959AA;">&#39;</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#1E754F;">export</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">interface</span><span style="color:#393A34;"> </span><span style="color:#2E808F;">PiniaCustomStateProperties</span><span style="color:#999999;">&lt;</span><span style="color:#2E808F;">S</span><span style="color:#999999;">&gt;</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#B07D48;">hello</span><span style="color:#999999;">: </span><span style="color:#2E808F;">string</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#999999;">}</span></span>
<span class="line"><span style="color:#999999;">}</span></span>
<span class="line"></span></code></pre></div><h3 id="typing-new-creation-options" tabindex="-1">Typing new creation options <a class="header-anchor" href="#typing-new-creation-options" aria-hidden="true">#</a></h3><p>When creating new options for <code>defineStore()</code>, you should extend the <code>DefineStoreOptionsBase</code>. Differently from <code>PiniaCustomProperties</code>, it only exposes two generics: the State and the Store type, allowing you to limit what can be defined. For example, you can use the names of the actions:</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">import</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">pinia</span><span style="color:#DEE492;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F286C4;">declare</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">module</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">pinia</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#F286C4;">export</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">interface</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">DefineStoreOptionsBase</span><span style="color:#F6F6F4;">&lt;</span><span style="color:#FFB86C;font-style:italic;">S</span><span style="color:#F6F6F4;">, </span><span style="color:#FFB86C;font-style:italic;">Store</span><span style="color:#F6F6F4;">&gt; {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">// allow defining a number of ms for any of the actions</span></span>
<span class="line"><span style="color:#F6F6F4;">    debounce</span><span style="color:#F286C4;">?:</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">Partial</span><span style="color:#F6F6F4;">&lt;</span><span style="color:#FFB86C;font-style:italic;">Record</span><span style="color:#F6F6F4;">&lt;</span><span style="color:#F286C4;">keyof</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">StoreActions</span><span style="color:#F6F6F4;">&lt;</span><span style="color:#FFB86C;font-style:italic;">Store</span><span style="color:#F6F6F4;">&gt;, </span><span style="color:#97E1F1;font-style:italic;">number</span><span style="color:#F6F6F4;">&gt;&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">  }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span>
<span class="line"></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#1E754F;">import</span><span style="color:#393A34;"> </span><span style="color:#B56959AA;">&#39;</span><span style="color:#B56959;">pinia</span><span style="color:#B56959AA;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#AB5959;">declare</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">module</span><span style="color:#393A34;"> </span><span style="color:#B56959AA;">&#39;</span><span style="color:#B56959;">pinia</span><span style="color:#B56959AA;">&#39;</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#1E754F;">export</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">interface</span><span style="color:#393A34;"> </span><span style="color:#2E808F;">DefineStoreOptionsBase</span><span style="color:#999999;">&lt;</span><span style="color:#2E808F;">S</span><span style="color:#999999;">,</span><span style="color:#393A34;"> </span><span style="color:#2E808F;">Store</span><span style="color:#999999;">&gt;</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#999999;">    </span><span style="color:#A0ADA0;">// allow defining a number of ms for any of the actions</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#B07D48;">debounce</span><span style="color:#AB5959;">?</span><span style="color:#999999;">: </span><span style="color:#2E808F;">Partial</span><span style="color:#999999;">&lt;</span><span style="color:#2E808F;">Record</span><span style="color:#999999;">&lt;</span><span style="color:#AB5959;">keyof</span><span style="color:#999999;"> </span><span style="color:#2E808F;">StoreActions</span><span style="color:#999999;">&lt;</span><span style="color:#2E808F;">Store</span><span style="color:#999999;">&gt;, </span><span style="color:#2E808F;">number</span><span style="color:#999999;">&gt;&gt;</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#999999;">}</span></span>
<span class="line"><span style="color:#999999;">}</span></span>
<span class="line"></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>There is also a <code>StoreGetters</code> type to extract the <em>getters</em> from a Store type. You can also extend the options of <em>setup stores</em> or <em>option stores</em> <strong>only</strong> by extending the types <code>DefineStoreOptions</code> and <code>DefineSetupStoreOptions</code> respectively.</p></div><h2 id="nuxt-js" tabindex="-1">Nuxt.js <a class="header-anchor" href="#nuxt-js" aria-hidden="true">#</a></h2><p>When <a href="./../ssr/nuxt.html">using pinia alongside Nuxt</a>, you will have to create a <a href="https://nuxt.com/docs/guide/directory-structure/plugins" target="_blank" rel="noreferrer">Nuxt plugin</a> first. This will give you access to the <code>pinia</code> instance:</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;">// plugins/myPiniaPlugin.ts</span></span>
<span class="line"><span style="color:#F286C4;">import</span><span style="color:#F6F6F4;"> { PiniaPluginContext } </span><span style="color:#F286C4;">from</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">pinia</span><span style="color:#DEE492;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F286C4;">function</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">MyPiniaPlugin</span><span style="color:#F6F6F4;">({ </span><span style="color:#FFB86C;font-style:italic;">store</span><span style="color:#F6F6F4;"> }</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">PiniaPluginContext</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">  store.</span><span style="color:#62E884;">$subscribe</span><span style="color:#F6F6F4;">((</span><span style="color:#FFB86C;font-style:italic;">mutation</span><span style="color:#F6F6F4;">) </span><span style="color:#F286C4;">=&gt;</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">// react to store changes</span></span>
<span class="line"><span style="color:#F6F6F4;">    console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(</span><span style="color:#E7EE98;">\`[🍍 </span><span style="color:#F286C4;">\${</span><span style="color:#F6F6F4;">mutation.storeId</span><span style="color:#F286C4;">}</span><span style="color:#E7EE98;">]: </span><span style="color:#F286C4;">\${</span><span style="color:#F6F6F4;">mutation.type</span><span style="color:#F286C4;">}</span><span style="color:#E7EE98;">.\`</span><span style="color:#F6F6F4;">)</span></span>
<span class="line"><span style="color:#F6F6F4;">  })</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#7B7F8B;">// Note this has to be typed if you are using TS</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> { creationTime</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">Date</span><span style="color:#F6F6F4;">() }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F286C4;">export</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">default</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">defineNuxtPlugin</span><span style="color:#F6F6F4;">(({ </span><span style="color:#FFB86C;font-style:italic;">$pinia</span><span style="color:#F6F6F4;"> }) </span><span style="color:#F286C4;">=&gt;</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">  $pinia.</span><span style="color:#62E884;">use</span><span style="color:#F6F6F4;">(MyPiniaPlugin)</span></span>
<span class="line"><span style="color:#F6F6F4;">})</span></span>
<span class="line"></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#A0ADA0;">// plugins/myPiniaPlugin.ts</span></span>
<span class="line"><span style="color:#1E754F;">import</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">PiniaPluginContext</span><span style="color:#393A34;"> </span><span style="color:#999999;">}</span><span style="color:#393A34;"> </span><span style="color:#1E754F;">from</span><span style="color:#393A34;"> </span><span style="color:#B56959AA;">&#39;</span><span style="color:#B56959;">pinia</span><span style="color:#B56959AA;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#AB5959;">function</span><span style="color:#393A34;"> </span><span style="color:#59873A;">MyPiniaPlugin</span><span style="color:#999999;">({</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">store</span><span style="color:#393A34;"> </span><span style="color:#999999;">}: </span><span style="color:#2E808F;">PiniaPluginContext</span><span style="color:#999999;">)</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#B07D48;">store</span><span style="color:#999999;">.</span><span style="color:#59873A;">$subscribe</span><span style="color:#999999;">((</span><span style="color:#B07D48;">mutation</span><span style="color:#999999;">)</span><span style="color:#393A34;"> </span><span style="color:#999999;">=&gt;</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#999999;">    </span><span style="color:#A0ADA0;">// react to store changes</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#B07D48;">console</span><span style="color:#999999;">.</span><span style="color:#59873A;">log</span><span style="color:#999999;">(</span><span style="color:#B56959AA;">\`</span><span style="color:#B56959;">[🍍 </span><span style="color:#999999;">\${</span><span style="color:#B56959;">mutation</span><span style="color:#999999;">.</span><span style="color:#B56959;">storeId</span><span style="color:#999999;">}</span><span style="color:#B56959;">]: </span><span style="color:#999999;">\${</span><span style="color:#B56959;">mutation</span><span style="color:#999999;">.</span><span style="color:#B56959;">type</span><span style="color:#999999;">}</span><span style="color:#B56959;">.</span><span style="color:#B56959AA;">\`</span><span style="color:#999999;">)</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#999999;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#999999;">  </span><span style="color:#A0ADA0;">// Note this has to be typed if you are using TS</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#1E754F;">return</span><span style="color:#393A34;"> </span><span style="color:#999999;">{ </span><span style="color:#998418;">creationTime</span><span style="color:#999999;">: </span><span style="color:#AB5959;">new</span><span style="color:#999999;"> </span><span style="color:#59873A;">Date</span><span style="color:#999999;">() }</span></span>
<span class="line"><span style="color:#999999;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#1E754F;">export</span><span style="color:#393A34;"> </span><span style="color:#1E754F;">default</span><span style="color:#393A34;"> </span><span style="color:#59873A;">defineNuxtPlugin</span><span style="color:#999999;">(({</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">$pinia</span><span style="color:#393A34;"> </span><span style="color:#999999;">})</span><span style="color:#393A34;"> </span><span style="color:#999999;">=&gt;</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#B07D48;">$pinia</span><span style="color:#999999;">.</span><span style="color:#59873A;">use</span><span style="color:#999999;">(</span><span style="color:#B07D48;">MyPiniaPlugin</span><span style="color:#999999;">)</span></span>
<span class="line"><span style="color:#999999;">})</span></span>
<span class="line"></span></code></pre></div><p>Note the above example is using TypeScript, you have to remove the type annotations <code>PiniaPluginContext</code> and <code>Plugin</code> as well as their imports if you are using a <code>.js</code> file.</p><h3 id="nuxt-js-2" tabindex="-1">Nuxt.js 2 <a class="header-anchor" href="#nuxt-js-2" aria-hidden="true">#</a></h3><p>If you are using Nuxt.js 2, the types are slightly different:</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;">// plugins/myPiniaPlugin.ts</span></span>
<span class="line"><span style="color:#F286C4;">import</span><span style="color:#F6F6F4;"> { PiniaPluginContext } </span><span style="color:#F286C4;">from</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">pinia</span><span style="color:#DEE492;">&#39;</span></span>
<span class="line"><span style="color:#F286C4;">import</span><span style="color:#F6F6F4;"> { Plugin } </span><span style="color:#F286C4;">from</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">@nuxt/types</span><span style="color:#DEE492;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F286C4;">function</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">MyPiniaPlugin</span><span style="color:#F6F6F4;">({ </span><span style="color:#FFB86C;font-style:italic;">store</span><span style="color:#F6F6F4;"> }</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">PiniaPluginContext</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">  store.</span><span style="color:#62E884;">$subscribe</span><span style="color:#F6F6F4;">((</span><span style="color:#FFB86C;font-style:italic;">mutation</span><span style="color:#F6F6F4;">) </span><span style="color:#F286C4;">=&gt;</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">// react to store changes</span></span>
<span class="line"><span style="color:#F6F6F4;">    console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(</span><span style="color:#E7EE98;">\`[🍍 </span><span style="color:#F286C4;">\${</span><span style="color:#F6F6F4;">mutation.storeId</span><span style="color:#F286C4;">}</span><span style="color:#E7EE98;">]: </span><span style="color:#F286C4;">\${</span><span style="color:#F6F6F4;">mutation.type</span><span style="color:#F286C4;">}</span><span style="color:#E7EE98;">.\`</span><span style="color:#F6F6F4;">)</span></span>
<span class="line"><span style="color:#F6F6F4;">  })</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#7B7F8B;">// Note this has to be typed if you are using TS</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> { creationTime</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">Date</span><span style="color:#F6F6F4;">() }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F286C4;">const</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">myPlugin</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">Plugin</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> ({ </span><span style="color:#FFB86C;font-style:italic;">$pinia</span><span style="color:#F6F6F4;"> }) </span><span style="color:#F286C4;">=&gt;</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">  $pinia.</span><span style="color:#62E884;">use</span><span style="color:#F6F6F4;">(MyPiniaPlugin)</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F286C4;">export</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">default</span><span style="color:#F6F6F4;"> myPlugin</span></span>
<span class="line"></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#A0ADA0;">// plugins/myPiniaPlugin.ts</span></span>
<span class="line"><span style="color:#1E754F;">import</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">PiniaPluginContext</span><span style="color:#393A34;"> </span><span style="color:#999999;">}</span><span style="color:#393A34;"> </span><span style="color:#1E754F;">from</span><span style="color:#393A34;"> </span><span style="color:#B56959AA;">&#39;</span><span style="color:#B56959;">pinia</span><span style="color:#B56959AA;">&#39;</span></span>
<span class="line"><span style="color:#1E754F;">import</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">Plugin</span><span style="color:#393A34;"> </span><span style="color:#999999;">}</span><span style="color:#393A34;"> </span><span style="color:#1E754F;">from</span><span style="color:#393A34;"> </span><span style="color:#B56959AA;">&#39;</span><span style="color:#B56959;">@nuxt/types</span><span style="color:#B56959AA;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#AB5959;">function</span><span style="color:#393A34;"> </span><span style="color:#59873A;">MyPiniaPlugin</span><span style="color:#999999;">({</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">store</span><span style="color:#393A34;"> </span><span style="color:#999999;">}: </span><span style="color:#2E808F;">PiniaPluginContext</span><span style="color:#999999;">)</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#B07D48;">store</span><span style="color:#999999;">.</span><span style="color:#59873A;">$subscribe</span><span style="color:#999999;">((</span><span style="color:#B07D48;">mutation</span><span style="color:#999999;">)</span><span style="color:#393A34;"> </span><span style="color:#999999;">=&gt;</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#999999;">    </span><span style="color:#A0ADA0;">// react to store changes</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#B07D48;">console</span><span style="color:#999999;">.</span><span style="color:#59873A;">log</span><span style="color:#999999;">(</span><span style="color:#B56959AA;">\`</span><span style="color:#B56959;">[🍍 </span><span style="color:#999999;">\${</span><span style="color:#B56959;">mutation</span><span style="color:#999999;">.</span><span style="color:#B56959;">storeId</span><span style="color:#999999;">}</span><span style="color:#B56959;">]: </span><span style="color:#999999;">\${</span><span style="color:#B56959;">mutation</span><span style="color:#999999;">.</span><span style="color:#B56959;">type</span><span style="color:#999999;">}</span><span style="color:#B56959;">.</span><span style="color:#B56959AA;">\`</span><span style="color:#999999;">)</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#999999;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#999999;">  </span><span style="color:#A0ADA0;">// Note this has to be typed if you are using TS</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#1E754F;">return</span><span style="color:#393A34;"> </span><span style="color:#999999;">{ </span><span style="color:#998418;">creationTime</span><span style="color:#999999;">: </span><span style="color:#AB5959;">new</span><span style="color:#999999;"> </span><span style="color:#59873A;">Date</span><span style="color:#999999;">() }</span></span>
<span class="line"><span style="color:#999999;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#AB5959;">const </span><span style="color:#59873A;">myPlugin</span><span style="color:#999999;">: </span><span style="color:#2E808F;">Plugin</span><span style="color:#999999;"> </span><span style="color:#AB5959;">= </span><span style="color:#999999;">({</span><span style="color:#AB5959;"> </span><span style="color:#B07D48;">$pinia</span><span style="color:#AB5959;"> </span><span style="color:#999999;">})</span><span style="color:#AB5959;"> </span><span style="color:#999999;">=&gt;</span><span style="color:#AB5959;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#AB5959;">  </span><span style="color:#B07D48;">$pinia</span><span style="color:#999999;">.</span><span style="color:#59873A;">use</span><span style="color:#999999;">(</span><span style="color:#B07D48;">MyPiniaPlugin</span><span style="color:#999999;">)</span></span>
<span class="line"><span style="color:#999999;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#1E754F;">export</span><span style="color:#393A34;"> </span><span style="color:#1E754F;">default</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">myPlugin</span></span>
<span class="line"></span></code></pre></div>`,74),e=[o];function t(c,r,y,i,F,d){return n(),a("div",null,e)}const h=s(p,[["render",t]]);export{u as __pageData,h as default};
