import{_ as s,o as n,c as a,a as l}from"./app.09b4d0c2.js";const d=JSON.parse('{"title":"Dealing with Composables","description":"","frontmatter":{},"headers":[{"level":2,"title":"Option Stores","slug":"option-stores","link":"#option-stores","children":[]},{"level":2,"title":"Setup Stores","slug":"setup-stores","link":"#setup-stores","children":[]},{"level":2,"title":"SSR","slug":"ssr","link":"#ssr","children":[]}],"relativePath":"cookbook/composables.md"}'),o={name:"cookbook/composables.md"},p=l(`<h1 id="dealing-with-composables" tabindex="-1">Dealing with Composables <a class="header-anchor" href="#dealing-with-composables" aria-hidden="true">#</a></h1><p><a href="https://vuejs.org/guide/reusability/composables.html#composables" target="_blank" rel="noreferrer">Composables</a> are functions that leverage Vue Composition API to encapsulate and reuse stateful logic. Whether you write your own, you use <a href="https://vueuse.org/" target="_blank" rel="noreferrer">external libraries</a> or do both, you can fully use the power of Composables in your pinia stores.</p><h2 id="option-stores" tabindex="-1">Option Stores <a class="header-anchor" href="#option-stores" aria-hidden="true">#</a></h2><p>When defining an option store, you can call a composable inside of the <code>state</code> property:</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">export</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">const</span><span style="color:#F6F6F4;"> useAuthStore </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">defineStore</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">auth</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">, {</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#62E884;">state</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> () </span><span style="color:#F286C4;">=&gt;</span><span style="color:#F6F6F4;"> ({</span></span>
<span class="line"><span style="color:#F6F6F4;">    user</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">useLocalStorage</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">pinia/auth/login</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">, </span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">bob</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">),</span></span>
<span class="line"><span style="color:#F6F6F4;">  }),</span></span>
<span class="line"><span style="color:#F6F6F4;">})</span></span>
<span class="line"></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#1E754F;">export</span><span style="color:#AB5959;"> const </span><span style="color:#B07D48;">useAuthStore</span><span style="color:#AB5959;"> = </span><span style="color:#59873A;">defineStore</span><span style="color:#999999;">(</span><span style="color:#B56959AA;">&#39;</span><span style="color:#B56959;">auth</span><span style="color:#B56959AA;">&#39;</span><span style="color:#999999;">,</span><span style="color:#AB5959;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#999999;">  </span><span style="color:#59873A;">state</span><span style="color:#999999;">: () =&gt; ({</span></span>
<span class="line"><span style="color:#999999;">    </span><span style="color:#998418;">user</span><span style="color:#999999;">: </span><span style="color:#59873A;">useLocalStorage</span><span style="color:#999999;">(</span><span style="color:#B56959AA;">&#39;</span><span style="color:#B56959;">pinia/auth/login</span><span style="color:#B56959AA;">&#39;</span><span style="color:#999999;">, </span><span style="color:#B56959AA;">&#39;</span><span style="color:#B56959;">bob</span><span style="color:#B56959AA;">&#39;</span><span style="color:#999999;">),</span></span>
<span class="line"><span style="color:#999999;">  }),</span></span>
<span class="line"><span style="color:#999999;">})</span></span>
<span class="line"></span></code></pre></div><p>Keep in mind that <strong>you can only return writable state</strong> (e.g. a <code>ref()</code>). Here are some examples of composables that you can use:</p><ul><li><a href="https://vueuse.org/core/useLocalStorage/" target="_blank" rel="noreferrer">useLocalStorage</a></li><li><a href="https://vueuse.org/core/useAsyncState/" target="_blank" rel="noreferrer">useAsyncState</a></li></ul><p>Here are some examples of composables that cannot be used in an option stores (but can be used with setup stores):</p><ul><li><a href="https://vueuse.org/core/useMediaControls/" target="_blank" rel="noreferrer">useMediaControls</a>: exposes functions</li><li><a href="https://vueuse.org/core/useMemory/" target="_blank" rel="noreferrer">useMemoryInfo</a>: exposes readonly data</li><li><a href="https://vueuse.org/core/useEyeDropper/" target="_blank" rel="noreferrer">useEyeDropper</a>: exposes readonly data and functions</li></ul><h2 id="setup-stores" tabindex="-1">Setup Stores <a class="header-anchor" href="#setup-stores" aria-hidden="true">#</a></h2><p>On the other hand, when defining a setup store, you can use almost any composable since every property gets discerned into state, action, or getter:</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">import</span><span style="color:#F6F6F4;"> { defineStore, skipHydrate } </span><span style="color:#F286C4;">from</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">pinia</span><span style="color:#DEE492;">&#39;</span></span>
<span class="line"><span style="color:#F286C4;">import</span><span style="color:#F6F6F4;"> { useMediaControls } </span><span style="color:#F286C4;">from</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">@vueuse/core</span><span style="color:#DEE492;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F286C4;">export</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">const</span><span style="color:#F6F6F4;"> useVideoPlayer </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">defineStore</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">video</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">, () </span><span style="color:#F286C4;">=&gt;</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#7B7F8B;">// we won&#39;t expose this element directly</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#F286C4;">const</span><span style="color:#F6F6F4;"> videoElement </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">ref</span><span style="color:#F6F6F4;">&lt;</span><span style="color:#FFB86C;font-style:italic;">HTMLVideoElement</span><span style="color:#F6F6F4;">&gt;()</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#F286C4;">const</span><span style="color:#F6F6F4;"> src </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">ref</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">/data/video.mp4</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">)</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#F286C4;">const</span><span style="color:#F6F6F4;"> { playing, volume, currentTime, togglePictureInPicture } </span><span style="color:#F286C4;">=</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#62E884;">useMediaControls</span><span style="color:#F6F6F4;">(videoElement, { src })</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#F286C4;">function</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">loadVideo</span><span style="color:#F6F6F4;">(</span><span style="color:#FFB86C;font-style:italic;">element</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">HTMLVideoElement</span><span style="color:#F6F6F4;">, </span><span style="color:#FFB86C;font-style:italic;">src</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">string</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">    videoElement.value </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> element</span></span>
<span class="line"><span style="color:#F6F6F4;">    src.value </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> src</span></span>
<span class="line"><span style="color:#F6F6F4;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">    src,</span></span>
<span class="line"><span style="color:#F6F6F4;">    playing,</span></span>
<span class="line"><span style="color:#F6F6F4;">    volume,</span></span>
<span class="line"><span style="color:#F6F6F4;">    currentTime,</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">    loadVideo,</span></span>
<span class="line"><span style="color:#F6F6F4;">    togglePictureInPicture,</span></span>
<span class="line"><span style="color:#F6F6F4;">  }</span></span>
<span class="line"><span style="color:#F6F6F4;">})</span></span>
<span class="line"></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#1E754F;">import</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">defineStore</span><span style="color:#999999;">,</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">skipHydrate</span><span style="color:#393A34;"> </span><span style="color:#999999;">}</span><span style="color:#393A34;"> </span><span style="color:#1E754F;">from</span><span style="color:#393A34;"> </span><span style="color:#B56959AA;">&#39;</span><span style="color:#B56959;">pinia</span><span style="color:#B56959AA;">&#39;</span></span>
<span class="line"><span style="color:#1E754F;">import</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">useMediaControls</span><span style="color:#393A34;"> </span><span style="color:#999999;">}</span><span style="color:#393A34;"> </span><span style="color:#1E754F;">from</span><span style="color:#393A34;"> </span><span style="color:#B56959AA;">&#39;</span><span style="color:#B56959;">@vueuse/core</span><span style="color:#B56959AA;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#1E754F;">export</span><span style="color:#AB5959;"> const </span><span style="color:#B07D48;">useVideoPlayer</span><span style="color:#AB5959;"> = </span><span style="color:#59873A;">defineStore</span><span style="color:#999999;">(</span><span style="color:#B56959AA;">&#39;</span><span style="color:#B56959;">video</span><span style="color:#B56959AA;">&#39;</span><span style="color:#999999;">,</span><span style="color:#AB5959;"> </span><span style="color:#999999;">()</span><span style="color:#AB5959;"> </span><span style="color:#999999;">=&gt;</span><span style="color:#AB5959;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#999999;">  </span><span style="color:#A0ADA0;">// we won&#39;t expose this element directly</span></span>
<span class="line"><span style="color:#AB5959;">  const </span><span style="color:#B07D48;">videoElement</span><span style="color:#AB5959;"> = </span><span style="color:#59873A;">ref</span><span style="color:#999999;">&lt;</span><span style="color:#2E808F;">HTMLVideoElement</span><span style="color:#999999;">&gt;()</span></span>
<span class="line"><span style="color:#AB5959;">  const </span><span style="color:#B07D48;">src</span><span style="color:#AB5959;"> = </span><span style="color:#59873A;">ref</span><span style="color:#999999;">(</span><span style="color:#B56959AA;">&#39;</span><span style="color:#B56959;">/data/video.mp4</span><span style="color:#B56959AA;">&#39;</span><span style="color:#999999;">)</span></span>
<span class="line"><span style="color:#AB5959;">  const </span><span style="color:#999999;">{</span><span style="color:#AB5959;"> </span><span style="color:#B07D48;">playing</span><span style="color:#999999;">,</span><span style="color:#AB5959;"> </span><span style="color:#B07D48;">volume</span><span style="color:#999999;">,</span><span style="color:#AB5959;"> </span><span style="color:#B07D48;">currentTime</span><span style="color:#999999;">,</span><span style="color:#AB5959;"> </span><span style="color:#B07D48;">togglePictureInPicture</span><span style="color:#AB5959;"> </span><span style="color:#999999;">}</span><span style="color:#AB5959;"> =</span></span>
<span class="line"><span style="color:#AB5959;">    </span><span style="color:#59873A;">useMediaControls</span><span style="color:#999999;">(</span><span style="color:#B07D48;">videoElement</span><span style="color:#999999;">,</span><span style="color:#AB5959;"> </span><span style="color:#999999;">{ </span><span style="color:#B07D48;">src</span><span style="color:#999999;"> })</span></span>
<span class="line"></span>
<span class="line"><span style="color:#AB5959;">  function </span><span style="color:#59873A;">loadVideo</span><span style="color:#999999;">(</span><span style="color:#B07D48;">element</span><span style="color:#999999;">: </span><span style="color:#2E808F;">HTMLVideoElement</span><span style="color:#999999;">,</span><span style="color:#AB5959;"> </span><span style="color:#B07D48;">src</span><span style="color:#999999;">: </span><span style="color:#2E808F;">string</span><span style="color:#999999;">)</span><span style="color:#AB5959;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#AB5959;">    </span><span style="color:#B07D48;">videoElement</span><span style="color:#999999;">.</span><span style="color:#B07D48;">value</span><span style="color:#AB5959;"> = </span><span style="color:#B07D48;">element</span></span>
<span class="line"><span style="color:#AB5959;">    </span><span style="color:#B07D48;">src</span><span style="color:#999999;">.</span><span style="color:#B07D48;">value</span><span style="color:#AB5959;"> = </span><span style="color:#B07D48;">src</span></span>
<span class="line"><span style="color:#AB5959;">  </span><span style="color:#999999;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#AB5959;">  </span><span style="color:#1E754F;">return</span><span style="color:#AB5959;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#999999;">    </span><span style="color:#B07D48;">src</span><span style="color:#999999;">,</span></span>
<span class="line"><span style="color:#999999;">    </span><span style="color:#B07D48;">playing</span><span style="color:#999999;">,</span></span>
<span class="line"><span style="color:#999999;">    </span><span style="color:#B07D48;">volume</span><span style="color:#999999;">,</span></span>
<span class="line"><span style="color:#999999;">    </span><span style="color:#B07D48;">currentTime</span><span style="color:#999999;">,</span></span>
<span class="line"></span>
<span class="line"><span style="color:#999999;">    </span><span style="color:#B07D48;">loadVideo</span><span style="color:#999999;">,</span></span>
<span class="line"><span style="color:#999999;">    </span><span style="color:#B07D48;">togglePictureInPicture</span><span style="color:#999999;">,</span></span>
<span class="line"><span style="color:#999999;">  }</span></span>
<span class="line"><span style="color:#999999;">})</span></span>
<span class="line"></span></code></pre></div><h2 id="ssr" tabindex="-1">SSR <a class="header-anchor" href="#ssr" aria-hidden="true">#</a></h2><p>When dealing with <a href="./../ssr/">Server Side Rendering</a>, you need to take care of some extra steps in order to use composables within your stores.</p><p>In <a href="#option-stores">Option Stores</a>, you need to define a <code>hydrate()</code> function. This function is called when the store is instantiated on the client (the browser) when there is an initial state available at the time the store is created. The reason we need to define this function is because in such scenario, <code>state()</code> is not called.</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">import</span><span style="color:#F6F6F4;"> { defineStore, skipHydrate } </span><span style="color:#F286C4;">from</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">pinia</span><span style="color:#DEE492;">&#39;</span></span>
<span class="line"><span style="color:#F286C4;">import</span><span style="color:#F6F6F4;"> { useLocalStorage } </span><span style="color:#F286C4;">from</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">@vueuse/core</span><span style="color:#DEE492;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F286C4;">export</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">const</span><span style="color:#F6F6F4;"> useAuthStore </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">defineStore</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">auth</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">, {</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#62E884;">state</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> () </span><span style="color:#F286C4;">=&gt;</span><span style="color:#F6F6F4;"> ({</span></span>
<span class="line"><span style="color:#F6F6F4;">    user</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">useLocalStorage</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">pinia/auth/login</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">, </span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">bob</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">),</span></span>
<span class="line"><span style="color:#F6F6F4;">  }),</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#62E884;">hydrate</span><span style="color:#F6F6F4;">(</span><span style="color:#FFB86C;font-style:italic;">state</span><span style="color:#F6F6F4;">, </span><span style="color:#FFB86C;font-style:italic;">initialState</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">// in this case we can completely ignore the initial state since we</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">// want to read the value from the browser</span></span>
<span class="line"><span style="color:#F6F6F4;">    state.user </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">useLocalStorage</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">pinia/auth/login</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">, </span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">bob</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">)</span></span>
<span class="line"><span style="color:#F6F6F4;">  },</span></span>
<span class="line"><span style="color:#F6F6F4;">})</span></span>
<span class="line"></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#1E754F;">import</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">defineStore</span><span style="color:#999999;">,</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">skipHydrate</span><span style="color:#393A34;"> </span><span style="color:#999999;">}</span><span style="color:#393A34;"> </span><span style="color:#1E754F;">from</span><span style="color:#393A34;"> </span><span style="color:#B56959AA;">&#39;</span><span style="color:#B56959;">pinia</span><span style="color:#B56959AA;">&#39;</span></span>
<span class="line"><span style="color:#1E754F;">import</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">useLocalStorage</span><span style="color:#393A34;"> </span><span style="color:#999999;">}</span><span style="color:#393A34;"> </span><span style="color:#1E754F;">from</span><span style="color:#393A34;"> </span><span style="color:#B56959AA;">&#39;</span><span style="color:#B56959;">@vueuse/core</span><span style="color:#B56959AA;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#1E754F;">export</span><span style="color:#AB5959;"> const </span><span style="color:#B07D48;">useAuthStore</span><span style="color:#AB5959;"> = </span><span style="color:#59873A;">defineStore</span><span style="color:#999999;">(</span><span style="color:#B56959AA;">&#39;</span><span style="color:#B56959;">auth</span><span style="color:#B56959AA;">&#39;</span><span style="color:#999999;">,</span><span style="color:#AB5959;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#999999;">  </span><span style="color:#59873A;">state</span><span style="color:#999999;">: () =&gt; ({</span></span>
<span class="line"><span style="color:#999999;">    </span><span style="color:#998418;">user</span><span style="color:#999999;">: </span><span style="color:#59873A;">useLocalStorage</span><span style="color:#999999;">(</span><span style="color:#B56959AA;">&#39;</span><span style="color:#B56959;">pinia/auth/login</span><span style="color:#B56959AA;">&#39;</span><span style="color:#999999;">, </span><span style="color:#B56959AA;">&#39;</span><span style="color:#B56959;">bob</span><span style="color:#B56959AA;">&#39;</span><span style="color:#999999;">),</span></span>
<span class="line"><span style="color:#999999;">  }),</span></span>
<span class="line"></span>
<span class="line"><span style="color:#999999;">  </span><span style="color:#59873A;">hydrate</span><span style="color:#999999;">(</span><span style="color:#B07D48;">state</span><span style="color:#999999;">, </span><span style="color:#B07D48;">initialState</span><span style="color:#999999;">) {</span></span>
<span class="line"><span style="color:#999999;">    </span><span style="color:#A0ADA0;">// in this case we can completely ignore the initial state since we</span></span>
<span class="line"><span style="color:#999999;">    </span><span style="color:#A0ADA0;">// want to read the value from the browser</span></span>
<span class="line"><span style="color:#999999;">    </span><span style="color:#B07D48;">state</span><span style="color:#999999;">.</span><span style="color:#B07D48;">user</span><span style="color:#999999;"> </span><span style="color:#AB5959;">=</span><span style="color:#999999;"> </span><span style="color:#59873A;">useLocalStorage</span><span style="color:#999999;">(</span><span style="color:#B56959AA;">&#39;</span><span style="color:#B56959;">pinia/auth/login</span><span style="color:#B56959AA;">&#39;</span><span style="color:#999999;">, </span><span style="color:#B56959AA;">&#39;</span><span style="color:#B56959;">bob</span><span style="color:#B56959AA;">&#39;</span><span style="color:#999999;">)</span></span>
<span class="line"><span style="color:#999999;">  },</span></span>
<span class="line"><span style="color:#999999;">})</span></span>
<span class="line"></span></code></pre></div><p>In <a href="#setup-stores">Setup Stores</a>, you need to use a helper named <code>skipHydrate()</code> on any state property that shouldn&#39;t be picked up from the initial state. Differently from option stores, setup stores cannot just <em>skip calling <code>state()</code></em>, so we mark properties that cannot be hydrated with <code>skipHydrate()</code>. Note that this only applies to writable reactive properties:</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">import</span><span style="color:#F6F6F4;"> { defineStore, skipHydrate } </span><span style="color:#F286C4;">from</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">pinia</span><span style="color:#DEE492;">&#39;</span></span>
<span class="line"><span style="color:#F286C4;">import</span><span style="color:#F6F6F4;"> { useEyeDropper, useLocalStorage } </span><span style="color:#F286C4;">from</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">@vueuse/core</span><span style="color:#DEE492;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F286C4;">export</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">const</span><span style="color:#F6F6F4;"> useColorStore </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">defineStore</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">colors</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">, () </span><span style="color:#F286C4;">=&gt;</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#F286C4;">const</span><span style="color:#F6F6F4;"> { isSupported, open, sRGBHex } </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">useEyeDropper</span><span style="color:#F6F6F4;">()</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#F286C4;">const</span><span style="color:#F6F6F4;"> lastColor </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">useLocalStorage</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">lastColor</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">, sRGBHex)</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#7B7F8B;">// ...</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">    lastColor</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">skipHydrate</span><span style="color:#F6F6F4;">(lastColor), </span><span style="color:#7B7F8B;">// Ref&lt;string&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">    open, </span><span style="color:#7B7F8B;">// Function</span></span>
<span class="line"><span style="color:#F6F6F4;">    isSupported, </span><span style="color:#7B7F8B;">// boolean (not even reactive)</span></span>
<span class="line"><span style="color:#F6F6F4;">  }</span></span>
<span class="line"><span style="color:#F6F6F4;">})</span></span>
<span class="line"></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#1E754F;">import</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">defineStore</span><span style="color:#999999;">,</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">skipHydrate</span><span style="color:#393A34;"> </span><span style="color:#999999;">}</span><span style="color:#393A34;"> </span><span style="color:#1E754F;">from</span><span style="color:#393A34;"> </span><span style="color:#B56959AA;">&#39;</span><span style="color:#B56959;">pinia</span><span style="color:#B56959AA;">&#39;</span></span>
<span class="line"><span style="color:#1E754F;">import</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">useEyeDropper</span><span style="color:#999999;">,</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">useLocalStorage</span><span style="color:#393A34;"> </span><span style="color:#999999;">}</span><span style="color:#393A34;"> </span><span style="color:#1E754F;">from</span><span style="color:#393A34;"> </span><span style="color:#B56959AA;">&#39;</span><span style="color:#B56959;">@vueuse/core</span><span style="color:#B56959AA;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#1E754F;">export</span><span style="color:#AB5959;"> const </span><span style="color:#B07D48;">useColorStore</span><span style="color:#AB5959;"> = </span><span style="color:#59873A;">defineStore</span><span style="color:#999999;">(</span><span style="color:#B56959AA;">&#39;</span><span style="color:#B56959;">colors</span><span style="color:#B56959AA;">&#39;</span><span style="color:#999999;">,</span><span style="color:#AB5959;"> </span><span style="color:#999999;">()</span><span style="color:#AB5959;"> </span><span style="color:#999999;">=&gt;</span><span style="color:#AB5959;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#AB5959;">  const </span><span style="color:#999999;">{</span><span style="color:#AB5959;"> </span><span style="color:#B07D48;">isSupported</span><span style="color:#999999;">,</span><span style="color:#AB5959;"> </span><span style="color:#B07D48;">open</span><span style="color:#999999;">,</span><span style="color:#AB5959;"> </span><span style="color:#B07D48;">sRGBHex</span><span style="color:#AB5959;"> </span><span style="color:#999999;">}</span><span style="color:#AB5959;"> = </span><span style="color:#59873A;">useEyeDropper</span><span style="color:#999999;">()</span></span>
<span class="line"><span style="color:#AB5959;">  const </span><span style="color:#B07D48;">lastColor</span><span style="color:#AB5959;"> = </span><span style="color:#59873A;">useLocalStorage</span><span style="color:#999999;">(</span><span style="color:#B56959AA;">&#39;</span><span style="color:#B56959;">lastColor</span><span style="color:#B56959AA;">&#39;</span><span style="color:#999999;">,</span><span style="color:#AB5959;"> </span><span style="color:#B07D48;">sRGBHex</span><span style="color:#999999;">)</span></span>
<span class="line"><span style="color:#999999;">  </span><span style="color:#A0ADA0;">// ...</span></span>
<span class="line"><span style="color:#AB5959;">  </span><span style="color:#1E754F;">return</span><span style="color:#AB5959;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#999999;">    </span><span style="color:#998418;">lastColor</span><span style="color:#999999;">: </span><span style="color:#59873A;">skipHydrate</span><span style="color:#999999;">(</span><span style="color:#B07D48;">lastColor</span><span style="color:#999999;">), </span><span style="color:#A0ADA0;">// Ref&lt;string&gt;</span></span>
<span class="line"><span style="color:#999999;">    </span><span style="color:#B07D48;">open</span><span style="color:#999999;">, </span><span style="color:#A0ADA0;">// Function</span></span>
<span class="line"><span style="color:#999999;">    </span><span style="color:#B07D48;">isSupported</span><span style="color:#999999;">, </span><span style="color:#A0ADA0;">// boolean (not even reactive)</span></span>
<span class="line"><span style="color:#999999;">  }</span></span>
<span class="line"><span style="color:#999999;">})</span></span>
<span class="line"></span></code></pre></div>`,18),e=[p];function t(r,c,y,i,F,A){return n(),a("div",null,e)}const E=s(o,[["render",t]]);export{d as __pageData,E as default};
