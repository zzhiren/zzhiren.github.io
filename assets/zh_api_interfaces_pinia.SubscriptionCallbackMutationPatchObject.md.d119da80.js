import{_ as a,o as e,c as t,a as i}from"./app.09b4d0c2.js";const _=JSON.parse('{"title":"接口：SubscriptionCallbackMutationPatchObject<S>","description":"","frontmatter":{"sidebar":"auto","editLinks":false,"sidebarDepth":3},"headers":[{"level":2,"title":"类型参数","slug":"type-parameters","link":"#type-parameters","children":[]},{"level":2,"title":"层次结构","slug":"hierarchy","link":"#hierarchy","children":[]},{"level":2,"title":"属性","slug":"属性","link":"#属性","children":[{"level":3,"title":"事件","slug":"events","link":"#events","children":[]},{"level":3,"title":"payload","slug":"payload","link":"#payload","children":[]},{"level":3,"title":"storeId","slug":"storeid","link":"#storeid","children":[]},{"level":3,"title":"类型","slug":"type","link":"#type","children":[]}]}],"relativePath":"zh/api/interfaces/pinia.SubscriptionCallbackMutationPatchObject.md"}'),r={name:"zh/api/interfaces/pinia.SubscriptionCallbackMutationPatchObject.md"},c=i('<p><a href="./../">API 文档</a> / <a href="./../modules/pinia.html">pinia</a> / SubscriptionCallbackMutationPatchObject</p><h1 id="interface-subscriptioncallbackmutationpatchobject-s" tabindex="-1">接口：SubscriptionCallbackMutationPatchObject&lt;S&gt; <a class="header-anchor" href="#interface-subscriptioncallbackmutationpatchobject-s" aria-hidden="true">#</a></h1><p><a href="./../modules/pinia.html">pinia</a>.SubscriptionCallbackMutationPatchObject</p><p>当 <code>store.$patch()</code> 与一个对象一起被调用时， 传递给订阅回调的上下文。</p><h2 id="type-parameters" tabindex="-1">类型参数 <a class="header-anchor" href="#type-parameters" aria-hidden="true">#</a></h2><table><thead><tr><th style="text-align:left;">名称</th></tr></thead><tbody><tr><td style="text-align:left;"><code>S</code></td></tr></tbody></table><h2 id="hierarchy" tabindex="-1">层次结构 <a class="header-anchor" href="#hierarchy" aria-hidden="true">#</a></h2><ul><li><p><a href="./pinia._SubscriptionCallbackMutationBase.html"><code>_SubscriptionCallbackMutationBase</code></a></p><p>↳ <strong><code>SubscriptionCallbackMutationPatchObject</code></strong></p></li></ul><h2 id="属性" tabindex="-1">属性 <a class="header-anchor" href="#属性" aria-hidden="true">#</a></h2><h3 id="events" tabindex="-1">事件 <a class="header-anchor" href="#events" aria-hidden="true">#</a></h3><p>• <strong>events</strong>: <code>DebuggerEvent</code>[]</p><p>仅限 DEV， patch 调用的数组。</p><hr><h3 id="payload" tabindex="-1">payload <a class="header-anchor" href="#payload" aria-hidden="true">#</a></h3><p>• <strong>payload</strong>: <a href="./../modules/pinia.html#_deeppartial"><code>_DeepPartial</code></a>&lt;<code>S</code>&gt;</p><p>传递给 <code>store.$patch()</code> 的对象</p><hr><h3 id="storeid" tabindex="-1">storeId <a class="header-anchor" href="#storeid" aria-hidden="true">#</a></h3><p>• <strong>storeId</strong>: <code>string</code></p><p>执行 mutation 的 store 的 <code>id</code></p><h4 id="继承于" tabindex="-1">继承于 <a class="header-anchor" href="#继承于" aria-hidden="true">#</a></h4><p><a href="./pinia._SubscriptionCallbackMutationBase.html">_SubscriptionCallbackMutationBase</a>.<a href="./pinia._SubscriptionCallbackMutationBase.html#storeid">storeId</a></p><hr><h3 id="type" tabindex="-1">类型 <a class="header-anchor" href="#type" aria-hidden="true">#</a></h3><p>• <strong>type</strong>: <a href="./../enums/pinia.MutationType.html#patchobject"><code>patchObject</code></a></p><p>mutation 的类型</p><h4 id="overrides" tabindex="-1">重写 <a class="header-anchor" href="#overrides" aria-hidden="true">#</a></h4><p><a href="./pinia._SubscriptionCallbackMutationBase.html">_SubscriptionCallbackMutationBase</a>.<a href="./pinia._SubscriptionCallbackMutationBase.html#type">type</a></p>',28),n=[c];function o(l,h,s,d,p,u){return e(),t("div",null,n)}const f=a(r,[["render",o]]);export{_ as __pageData,f as default};
