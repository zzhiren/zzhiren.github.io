import{_ as e,o as t,c as a,a as o}from"./app.09b4d0c2.js";const m=JSON.parse('{"title":"Interface: _StoreOnActionListenerContext<Store, ActionName, A>","description":"","frontmatter":{"editLink":false},"headers":[{"level":2,"title":"Type parameters","slug":"type-parameters","link":"#type-parameters","children":[]},{"level":2,"title":"Properties","slug":"properties","link":"#properties","children":[{"level":3,"title":"after","slug":"after","link":"#after","children":[]},{"level":3,"title":"args","slug":"args","link":"#args","children":[]},{"level":3,"title":"name","slug":"name","link":"#name","children":[]},{"level":3,"title":"onError","slug":"onerror","link":"#onerror","children":[]},{"level":3,"title":"store","slug":"store","link":"#store","children":[]}]}],"relativePath":"api/interfaces/pinia._StoreOnActionListenerContext.md"}'),r={name:"api/interfaces/pinia._StoreOnActionListenerContext.md"},d=o('<p><a href="./../">API Documentation</a> / <a href="./../modules/pinia.html">pinia</a> / _StoreOnActionListenerContext</p><h1 id="interface-storeonactionlistenercontext-store-actionname-a" tabindex="-1">Interface: _StoreOnActionListenerContext&lt;Store, ActionName, A&gt; <a class="header-anchor" href="#interface-storeonactionlistenercontext-store-actionname-a" aria-hidden="true">#</a></h1><p><a href="./../modules/pinia.html">pinia</a>._StoreOnActionListenerContext</p><p>Actual type for <a href="./../modules/pinia.html#StoreOnActionListenerContext">StoreOnActionListenerContext</a>. Exists for refactoring purposes. For internal use only. For internal use <strong>only</strong></p><h2 id="type-parameters" tabindex="-1">Type parameters <a class="header-anchor" href="#type-parameters" aria-hidden="true">#</a></h2><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th></tr></thead><tbody><tr><td style="text-align:left;"><code>Store</code></td><td style="text-align:left;"><code>Store</code></td></tr><tr><td style="text-align:left;"><code>ActionName</code></td><td style="text-align:left;">extends <code>string</code></td></tr><tr><td style="text-align:left;"><code>A</code></td><td style="text-align:left;"><code>A</code></td></tr></tbody></table><h2 id="properties" tabindex="-1">Properties <a class="header-anchor" href="#properties" aria-hidden="true">#</a></h2><h3 id="after" tabindex="-1">after <a class="header-anchor" href="#after" aria-hidden="true">#</a></h3><p>• <strong>after</strong>: (<code>callback</code>: <code>A</code> extends <code>Record</code>&lt;<code>ActionName</code>, <a href="./../modules/pinia.html#_Method"><code>_Method</code></a>&gt; ? (<code>resolvedReturn</code>: <a href="./../modules/pinia.html#_Awaited"><code>_Awaited</code></a>&lt;<code>ReturnType</code>&lt;<code>A</code>[<code>ActionName</code>]&gt;&gt;) =&gt; <code>void</code> : () =&gt; <code>void</code>) =&gt; <code>void</code></p><h4 id="type-declaration" tabindex="-1">Type declaration <a class="header-anchor" href="#type-declaration" aria-hidden="true">#</a></h4><p>▸ (<code>callback</code>): <code>void</code></p><p>Sets up a hook once the action is finished. It receives the return value of the action, if it&#39;s a Promise, it will be unwrapped.</p><h5 id="parameters" tabindex="-1">Parameters <a class="header-anchor" href="#parameters" aria-hidden="true">#</a></h5><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th></tr></thead><tbody><tr><td style="text-align:left;"><code>callback</code></td><td style="text-align:left;"><code>A</code> extends <code>Record</code>&lt;<code>ActionName</code>, <a href="./../modules/pinia.html#_Method"><code>_Method</code></a>&gt; ? (<code>resolvedReturn</code>: <a href="./../modules/pinia.html#_Awaited"><code>_Awaited</code></a>&lt;<code>ReturnType</code>&lt;<code>A</code>[<code>ActionName</code>]&gt;&gt;) =&gt; <code>void</code> : () =&gt; <code>void</code></td></tr></tbody></table><h5 id="returns" tabindex="-1">Returns <a class="header-anchor" href="#returns" aria-hidden="true">#</a></h5><p><code>void</code></p><hr><h3 id="args" tabindex="-1">args <a class="header-anchor" href="#args" aria-hidden="true">#</a></h3><p>• <strong>args</strong>: <code>A</code> extends <code>Record</code>&lt;<code>ActionName</code>, <a href="./../modules/pinia.html#_Method"><code>_Method</code></a>&gt; ? <code>Parameters</code>&lt;<code>A</code>[<code>ActionName</code>]&gt; : <code>unknown</code>[]</p><p>Parameters passed to the action</p><hr><h3 id="name" tabindex="-1">name <a class="header-anchor" href="#name" aria-hidden="true">#</a></h3><p>• <strong>name</strong>: <code>ActionName</code></p><p>Name of the action</p><hr><h3 id="onerror" tabindex="-1">onError <a class="header-anchor" href="#onerror" aria-hidden="true">#</a></h3><p>• <strong>onError</strong>: (<code>callback</code>: (<code>error</code>: <code>unknown</code>) =&gt; <code>void</code>) =&gt; <code>void</code></p><h4 id="type-declaration-1" tabindex="-1">Type declaration <a class="header-anchor" href="#type-declaration-1" aria-hidden="true">#</a></h4><p>▸ (<code>callback</code>): <code>void</code></p><p>Sets up a hook if the action fails. Return <code>false</code> to catch the error and stop it from propagating.</p><h5 id="parameters-1" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-1" aria-hidden="true">#</a></h5><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th></tr></thead><tbody><tr><td style="text-align:left;"><code>callback</code></td><td style="text-align:left;">(<code>error</code>: <code>unknown</code>) =&gt; <code>void</code></td></tr></tbody></table><h5 id="returns-1" tabindex="-1">Returns <a class="header-anchor" href="#returns-1" aria-hidden="true">#</a></h5><p><code>void</code></p><hr><h3 id="store" tabindex="-1">store <a class="header-anchor" href="#store" aria-hidden="true">#</a></h3><p>• <strong>store</strong>: <code>Store</code></p><p>Store that is invoking the action</p>',38),n=[d];function c(i,l,s,h,p,f){return t(),a("div",null,n)}const u=e(r,[["render",c]]);export{m as __pageData,u as default};
