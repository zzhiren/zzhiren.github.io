import{_ as s,o as n,c as a,a as p}from"./app.09b4d0c2.js";const u=JSON.parse('{"title":"store 测试","description":"","frontmatter":{},"headers":[{"level":2,"title":"对 store 进行单元测试","slug":"unit-testing-a-store","link":"#unit-testing-a-store","children":[]},{"level":2,"title":"对组件单元测试","slug":"unit-testing-components","link":"#unit-testing-components","children":[{"level":3,"title":"初始 State","slug":"initial-state","link":"#initial-state","children":[]},{"level":3,"title":"自定义 action 的行为","slug":"customizing-behavior-of-actions","link":"#customizing-behavior-of-actions","children":[]},{"level":3,"title":"指定 createSpy 函数","slug":"specifying-the-createspy-function","link":"#specifying-the-createspy-function","children":[]},{"level":3,"title":"Mocking getters","slug":"mocking-getters","link":"#mocking-getters","children":[]},{"level":3,"title":"Pinia 插件","slug":"pinia-plugins","link":"#pinia-plugins","children":[]}]},{"level":2,"title":"端到端测试","slug":"e2e-tests","link":"#e2e-tests","children":[]},{"level":2,"title":"对组件单元测试(Vue 2)","slug":"unit-test-components-vue-2","link":"#unit-test-components-vue-2","children":[]}],"relativePath":"zh/cookbook/testing.md"}'),l={name:"zh/cookbook/testing.md"},o=p(`<h1 id="testing-stores" tabindex="-1">store 测试 <a class="header-anchor" href="#testing-stores" aria-hidden="true">#</a></h1><p>从设计上来说，许多地方都会使用 store，所以可能比正常情况更难测试。但幸运的是，这不一定是真的。在测试 store 时，我们需要注意三件事：</p><ul><li><code>pinia</code> 实例：没有它，store 不能正常工作</li><li><code>actions</code>：大多数时候，它们包含了 store 最复杂的逻辑。如果它们默认就可以被 mocked，那不是很好吗？</li><li>插件：如果你依赖插件，你也必须为测试安装它们</li></ul><p>根据测试的内容和方式，我们需要以不同的方式来处理这三个问题：</p><ul><li><a href="#testing-stores">store 测试</a><ul><li><a href="#unit-testing-a-store">对 store 单元测试</a></li><li><a href="#unit-testing-components">对组件单元测试</a><ul><li><a href="#initial-state">初始 state</a></li><li><a href="#customizing-behavior-of-actions">自定义 action 的行为</a></li><li><a href="#specifying-the-creespy-function">指定 createSpy 函数</a></li><li><a href="#mocking-getters">Mocking getters</a></li><li><a href="#pinia-plugins">Pinia 插件</a></li></ul></li><li><a href="#e2e-tests">端到端测试</a></li><li><a href="#unit-test-components-vue-2">对组件单元测试(Vue 2)</a></li></ul></li></ul><h2 id="unit-testing-a-store" tabindex="-1">对 store 进行单元测试 <a class="header-anchor" href="#unit-testing-a-store" aria-hidden="true">#</a></h2><p>要对一个 store 进行单元测试，最重要的是创建一个 <code>pinia</code> 实例：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;">// stores/counter.spec.ts</span></span>
<span class="line"><span style="color:#F286C4;">import</span><span style="color:#F6F6F4;"> { setActivePinia, createPinia } </span><span style="color:#F286C4;">from</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">pinia</span><span style="color:#DEE492;">&#39;</span></span>
<span class="line"><span style="color:#F286C4;">import</span><span style="color:#F6F6F4;"> { useCounter } </span><span style="color:#F286C4;">from</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">../src/stores/counter</span><span style="color:#DEE492;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#62E884;">describe</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">Counter Store</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">, () </span><span style="color:#F286C4;">=&gt;</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#62E884;">beforeEach</span><span style="color:#F6F6F4;">(() </span><span style="color:#F286C4;">=&gt;</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">// 创建一个新 pinia，并使其处于激活状态，这样它就会被任何 useStore() 调用自动接收</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">// 而不需要手动传递：</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">// \`useStore(pinia)\`</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#62E884;">setActivePinia</span><span style="color:#F6F6F4;">(</span><span style="color:#62E884;">createPinia</span><span style="color:#F6F6F4;">())</span></span>
<span class="line"><span style="color:#F6F6F4;">  })</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#62E884;">it</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">increments</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">, () </span><span style="color:#F286C4;">=&gt;</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">const</span><span style="color:#F6F6F4;"> counter </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">useCounter</span><span style="color:#F6F6F4;">()</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#62E884;">expect</span><span style="color:#F6F6F4;">(counter.n).</span><span style="color:#62E884;">toBe</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;">)</span></span>
<span class="line"><span style="color:#F6F6F4;">    counter.</span><span style="color:#62E884;">increment</span><span style="color:#F6F6F4;">()</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#62E884;">expect</span><span style="color:#F6F6F4;">(counter.n).</span><span style="color:#62E884;">toBe</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">)</span></span>
<span class="line"><span style="color:#F6F6F4;">  })</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#62E884;">it</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">increments by amount</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">, () </span><span style="color:#F286C4;">=&gt;</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">const</span><span style="color:#F6F6F4;"> counter </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">useCounter</span><span style="color:#F6F6F4;">()</span></span>
<span class="line"><span style="color:#F6F6F4;">    counter.</span><span style="color:#62E884;">increment</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">10</span><span style="color:#F6F6F4;">)</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#62E884;">expect</span><span style="color:#F6F6F4;">(counter.n).</span><span style="color:#62E884;">toBe</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">10</span><span style="color:#F6F6F4;">)</span></span>
<span class="line"><span style="color:#F6F6F4;">  })</span></span>
<span class="line"><span style="color:#F6F6F4;">})</span></span>
<span class="line"></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#A0ADA0;">// stores/counter.spec.ts</span></span>
<span class="line"><span style="color:#1E754F;">import</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">setActivePinia</span><span style="color:#999999;">,</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">createPinia</span><span style="color:#393A34;"> </span><span style="color:#999999;">}</span><span style="color:#393A34;"> </span><span style="color:#1E754F;">from</span><span style="color:#393A34;"> </span><span style="color:#B56959AA;">&#39;</span><span style="color:#B56959;">pinia</span><span style="color:#B56959AA;">&#39;</span></span>
<span class="line"><span style="color:#1E754F;">import</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">useCounter</span><span style="color:#393A34;"> </span><span style="color:#999999;">}</span><span style="color:#393A34;"> </span><span style="color:#1E754F;">from</span><span style="color:#393A34;"> </span><span style="color:#B56959AA;">&#39;</span><span style="color:#B56959;">../src/stores/counter</span><span style="color:#B56959AA;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#59873A;">describe</span><span style="color:#999999;">(</span><span style="color:#B56959AA;">&#39;</span><span style="color:#B56959;">Counter Store</span><span style="color:#B56959AA;">&#39;</span><span style="color:#999999;">,</span><span style="color:#393A34;"> </span><span style="color:#999999;">()</span><span style="color:#393A34;"> </span><span style="color:#999999;">=&gt;</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#59873A;">beforeEach</span><span style="color:#999999;">(()</span><span style="color:#393A34;"> </span><span style="color:#999999;">=&gt;</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#999999;">    </span><span style="color:#A0ADA0;">// 创建一个新 pinia，并使其处于激活状态，这样它就会被任何 useStore() 调用自动接收</span></span>
<span class="line"><span style="color:#999999;">    </span><span style="color:#A0ADA0;">// 而不需要手动传递：</span></span>
<span class="line"><span style="color:#999999;">    </span><span style="color:#A0ADA0;">// \`useStore(pinia)\`</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#59873A;">setActivePinia</span><span style="color:#999999;">(</span><span style="color:#59873A;">createPinia</span><span style="color:#999999;">())</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#999999;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#59873A;">it</span><span style="color:#999999;">(</span><span style="color:#B56959AA;">&#39;</span><span style="color:#B56959;">increments</span><span style="color:#B56959AA;">&#39;</span><span style="color:#999999;">,</span><span style="color:#393A34;"> </span><span style="color:#999999;">()</span><span style="color:#393A34;"> </span><span style="color:#999999;">=&gt;</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#AB5959;">const</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">counter</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">=</span><span style="color:#393A34;"> </span><span style="color:#59873A;">useCounter</span><span style="color:#999999;">()</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#59873A;">expect</span><span style="color:#999999;">(</span><span style="color:#B07D48;">counter</span><span style="color:#999999;">.</span><span style="color:#B07D48;">n</span><span style="color:#999999;">).</span><span style="color:#59873A;">toBe</span><span style="color:#999999;">(</span><span style="color:#2F798A;">0</span><span style="color:#999999;">)</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#B07D48;">counter</span><span style="color:#999999;">.</span><span style="color:#59873A;">increment</span><span style="color:#999999;">()</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#59873A;">expect</span><span style="color:#999999;">(</span><span style="color:#B07D48;">counter</span><span style="color:#999999;">.</span><span style="color:#B07D48;">n</span><span style="color:#999999;">).</span><span style="color:#59873A;">toBe</span><span style="color:#999999;">(</span><span style="color:#2F798A;">1</span><span style="color:#999999;">)</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#999999;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#59873A;">it</span><span style="color:#999999;">(</span><span style="color:#B56959AA;">&#39;</span><span style="color:#B56959;">increments by amount</span><span style="color:#B56959AA;">&#39;</span><span style="color:#999999;">,</span><span style="color:#393A34;"> </span><span style="color:#999999;">()</span><span style="color:#393A34;"> </span><span style="color:#999999;">=&gt;</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#AB5959;">const</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">counter</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">=</span><span style="color:#393A34;"> </span><span style="color:#59873A;">useCounter</span><span style="color:#999999;">()</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#B07D48;">counter</span><span style="color:#999999;">.</span><span style="color:#59873A;">increment</span><span style="color:#999999;">(</span><span style="color:#2F798A;">10</span><span style="color:#999999;">)</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#59873A;">expect</span><span style="color:#999999;">(</span><span style="color:#B07D48;">counter</span><span style="color:#999999;">.</span><span style="color:#B07D48;">n</span><span style="color:#999999;">).</span><span style="color:#59873A;">toBe</span><span style="color:#999999;">(</span><span style="color:#2F798A;">10</span><span style="color:#999999;">)</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#999999;">})</span></span>
<span class="line"><span style="color:#999999;">})</span></span>
<span class="line"></span></code></pre></div><p>如果你有使用任何 store 的插件，有一件重要的事情需要了解：<strong>在 <code>pinia</code> 被安装在一个应用之后，插件才会被使用</strong>。可以通过创建一个空的或假的应用来解决这个问题：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">import</span><span style="color:#F6F6F4;"> { setActivePinia, createPinia } </span><span style="color:#F286C4;">from</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">pinia</span><span style="color:#DEE492;">&#39;</span></span>
<span class="line"><span style="color:#F286C4;">import</span><span style="color:#F6F6F4;"> { createApp } </span><span style="color:#F286C4;">from</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">vue</span><span style="color:#DEE492;">&#39;</span></span>
<span class="line"><span style="color:#F286C4;">import</span><span style="color:#F6F6F4;"> { somePlugin } </span><span style="color:#F286C4;">from</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">../src/stores/plugin</span><span style="color:#DEE492;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;">// 和前面一样的代码...</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;">// 测试前你不需要创建应用</span></span>
<span class="line"><span style="color:#F286C4;">const</span><span style="color:#F6F6F4;"> app </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">createApp</span><span style="color:#F6F6F4;">({})</span></span>
<span class="line"><span style="color:#62E884;">beforeEach</span><span style="color:#F6F6F4;">(() </span><span style="color:#F286C4;">=&gt;</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#F286C4;">const</span><span style="color:#F6F6F4;"> pinia </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">createPinia</span><span style="color:#F6F6F4;">().</span><span style="color:#62E884;">use</span><span style="color:#F6F6F4;">(somePlugin)</span></span>
<span class="line"><span style="color:#F6F6F4;">  app.</span><span style="color:#62E884;">use</span><span style="color:#F6F6F4;">(pinia)</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#62E884;">setActivePinia</span><span style="color:#F6F6F4;">(pinia)</span></span>
<span class="line"><span style="color:#F6F6F4;">})</span></span>
<span class="line"></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#1E754F;">import</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">setActivePinia</span><span style="color:#999999;">,</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">createPinia</span><span style="color:#393A34;"> </span><span style="color:#999999;">}</span><span style="color:#393A34;"> </span><span style="color:#1E754F;">from</span><span style="color:#393A34;"> </span><span style="color:#B56959AA;">&#39;</span><span style="color:#B56959;">pinia</span><span style="color:#B56959AA;">&#39;</span></span>
<span class="line"><span style="color:#1E754F;">import</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">createApp</span><span style="color:#393A34;"> </span><span style="color:#999999;">}</span><span style="color:#393A34;"> </span><span style="color:#1E754F;">from</span><span style="color:#393A34;"> </span><span style="color:#B56959AA;">&#39;</span><span style="color:#B56959;">vue</span><span style="color:#B56959AA;">&#39;</span></span>
<span class="line"><span style="color:#1E754F;">import</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">somePlugin</span><span style="color:#393A34;"> </span><span style="color:#999999;">}</span><span style="color:#393A34;"> </span><span style="color:#1E754F;">from</span><span style="color:#393A34;"> </span><span style="color:#B56959AA;">&#39;</span><span style="color:#B56959;">../src/stores/plugin</span><span style="color:#B56959AA;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A0ADA0;">// 和前面一样的代码...</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A0ADA0;">// 测试前你不需要创建应用</span></span>
<span class="line"><span style="color:#AB5959;">const</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">app</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">=</span><span style="color:#393A34;"> </span><span style="color:#59873A;">createApp</span><span style="color:#999999;">({})</span></span>
<span class="line"><span style="color:#59873A;">beforeEach</span><span style="color:#999999;">(()</span><span style="color:#393A34;"> </span><span style="color:#999999;">=&gt;</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#AB5959;">const</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">pinia</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">=</span><span style="color:#393A34;"> </span><span style="color:#59873A;">createPinia</span><span style="color:#999999;">().</span><span style="color:#59873A;">use</span><span style="color:#999999;">(</span><span style="color:#B07D48;">somePlugin</span><span style="color:#999999;">)</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#B07D48;">app</span><span style="color:#999999;">.</span><span style="color:#59873A;">use</span><span style="color:#999999;">(</span><span style="color:#B07D48;">pinia</span><span style="color:#999999;">)</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#59873A;">setActivePinia</span><span style="color:#999999;">(</span><span style="color:#B07D48;">pinia</span><span style="color:#999999;">)</span></span>
<span class="line"><span style="color:#999999;">})</span></span>
<span class="line"></span></code></pre></div><h2 id="unit-testing-components" tabindex="-1">对组件单元测试 <a class="header-anchor" href="#unit-testing-components" aria-hidden="true">#</a></h2><p>这可以通过 <code>createTestingPinia()</code> 实现，它会返回一个仅用于帮助对组件单元测试的 pinia 实例。</p><p>从安装 <code>@pinia/testing</code> 开始：</p><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F6F6F4;">npm </span><span style="color:#E7EE98;">i</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">-D</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">@pinia/testing</span></span>
<span class="line"></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#59873A;">npm</span><span style="color:#393A34;"> </span><span style="color:#B56959;">i</span><span style="color:#393A34;"> </span><span style="color:#A65E2B;">-D</span><span style="color:#393A34;"> </span><span style="color:#B56959;">@pinia/testing</span></span>
<span class="line"></span></code></pre></div><p>确保挂在组件时，在你的测试中创建一个用于测试的 pinia 实例：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">import</span><span style="color:#F6F6F4;"> { mount } </span><span style="color:#F286C4;">from</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">@vue/test-utils</span><span style="color:#DEE492;">&#39;</span></span>
<span class="line"><span style="color:#F286C4;">import</span><span style="color:#F6F6F4;"> { createTestingPinia } </span><span style="color:#F286C4;">from</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">@pinia/testing</span><span style="color:#DEE492;">&#39;</span></span>
<span class="line"><span style="color:#7B7F8B;">// 引入任何你想要测试的 store</span></span>
<span class="line"><span style="color:#F286C4;">import</span><span style="color:#F6F6F4;"> { useSomeStore } </span><span style="color:#F286C4;">from</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">@/stores/myStore</span><span style="color:#DEE492;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F286C4;">const</span><span style="color:#F6F6F4;"> wrapper </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">mount</span><span style="color:#F6F6F4;">(Counter, {</span></span>
<span class="line"><span style="color:#F6F6F4;">  global</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">    plugins</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> [</span><span style="color:#62E884;">createTestingPinia</span><span style="color:#F6F6F4;">()],</span></span>
<span class="line"><span style="color:#F6F6F4;">  },</span></span>
<span class="line"><span style="color:#F6F6F4;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F286C4;">const</span><span style="color:#F6F6F4;"> store </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">useSomeStore</span><span style="color:#F6F6F4;">() </span><span style="color:#7B7F8B;">// // 使用 pinia 的测试实例!</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;">// 可直接操作 state</span></span>
<span class="line"><span style="color:#F6F6F4;">store.name </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">my new name</span><span style="color:#DEE492;">&#39;</span></span>
<span class="line"><span style="color:#7B7F8B;">// 也可以通过 patch 来完成</span></span>
<span class="line"><span style="color:#F6F6F4;">store.</span><span style="color:#62E884;">$patch</span><span style="color:#F6F6F4;">({ name</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">new name</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;"> })</span></span>
<span class="line"><span style="color:#62E884;">expect</span><span style="color:#F6F6F4;">(store.name).</span><span style="color:#62E884;">toBe</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">new name</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;">// action 默认是存根的(stubbed)，意味着它们默认不执行其代码。</span></span>
<span class="line"><span style="color:#7B7F8B;">// 请看下面的内容来定制这一行为。</span></span>
<span class="line"><span style="color:#F6F6F4;">store.</span><span style="color:#62E884;">someAction</span><span style="color:#F6F6F4;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#62E884;">expect</span><span style="color:#F6F6F4;">(store.someAction).</span><span style="color:#62E884;">toHaveBeenCalledTimes</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">)</span></span>
<span class="line"><span style="color:#62E884;">expect</span><span style="color:#F6F6F4;">(store.someAction).</span><span style="color:#62E884;">toHaveBeenLastCalledWith</span><span style="color:#F6F6F4;">()</span></span>
<span class="line"></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#1E754F;">import</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">mount</span><span style="color:#393A34;"> </span><span style="color:#999999;">}</span><span style="color:#393A34;"> </span><span style="color:#1E754F;">from</span><span style="color:#393A34;"> </span><span style="color:#B56959AA;">&#39;</span><span style="color:#B56959;">@vue/test-utils</span><span style="color:#B56959AA;">&#39;</span></span>
<span class="line"><span style="color:#1E754F;">import</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">createTestingPinia</span><span style="color:#393A34;"> </span><span style="color:#999999;">}</span><span style="color:#393A34;"> </span><span style="color:#1E754F;">from</span><span style="color:#393A34;"> </span><span style="color:#B56959AA;">&#39;</span><span style="color:#B56959;">@pinia/testing</span><span style="color:#B56959AA;">&#39;</span></span>
<span class="line"><span style="color:#A0ADA0;">// 引入任何你想要测试的 store</span></span>
<span class="line"><span style="color:#1E754F;">import</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">useSomeStore</span><span style="color:#393A34;"> </span><span style="color:#999999;">}</span><span style="color:#393A34;"> </span><span style="color:#1E754F;">from</span><span style="color:#393A34;"> </span><span style="color:#B56959AA;">&#39;</span><span style="color:#B56959;">@/stores/myStore</span><span style="color:#B56959AA;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#AB5959;">const</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">wrapper</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">=</span><span style="color:#393A34;"> </span><span style="color:#59873A;">mount</span><span style="color:#999999;">(</span><span style="color:#B07D48;">Counter</span><span style="color:#999999;">,</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#998418;">global</span><span style="color:#999999;">:</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#998418;">plugins</span><span style="color:#999999;">:</span><span style="color:#393A34;"> </span><span style="color:#999999;">[</span><span style="color:#59873A;">createTestingPinia</span><span style="color:#999999;">()],</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#999999;">},</span></span>
<span class="line"><span style="color:#999999;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#AB5959;">const</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">store</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">=</span><span style="color:#393A34;"> </span><span style="color:#59873A;">useSomeStore</span><span style="color:#999999;">()</span><span style="color:#393A34;"> </span><span style="color:#A0ADA0;">// // 使用 pinia 的测试实例!</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A0ADA0;">// 可直接操作 state</span></span>
<span class="line"><span style="color:#B07D48;">store</span><span style="color:#999999;">.</span><span style="color:#B07D48;">name</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">=</span><span style="color:#393A34;"> </span><span style="color:#B56959AA;">&#39;</span><span style="color:#B56959;">my new name</span><span style="color:#B56959AA;">&#39;</span></span>
<span class="line"><span style="color:#A0ADA0;">// 也可以通过 patch 来完成</span></span>
<span class="line"><span style="color:#B07D48;">store</span><span style="color:#999999;">.</span><span style="color:#59873A;">$patch</span><span style="color:#999999;">({</span><span style="color:#393A34;"> </span><span style="color:#998418;">name</span><span style="color:#999999;">:</span><span style="color:#393A34;"> </span><span style="color:#B56959AA;">&#39;</span><span style="color:#B56959;">new name</span><span style="color:#B56959AA;">&#39;</span><span style="color:#393A34;"> </span><span style="color:#999999;">})</span></span>
<span class="line"><span style="color:#59873A;">expect</span><span style="color:#999999;">(</span><span style="color:#B07D48;">store</span><span style="color:#999999;">.</span><span style="color:#B07D48;">name</span><span style="color:#999999;">).</span><span style="color:#59873A;">toBe</span><span style="color:#999999;">(</span><span style="color:#B56959AA;">&#39;</span><span style="color:#B56959;">new name</span><span style="color:#B56959AA;">&#39;</span><span style="color:#999999;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A0ADA0;">// action 默认是存根的(stubbed)，意味着它们默认不执行其代码。</span></span>
<span class="line"><span style="color:#A0ADA0;">// 请看下面的内容来定制这一行为。</span></span>
<span class="line"><span style="color:#B07D48;">store</span><span style="color:#999999;">.</span><span style="color:#59873A;">someAction</span><span style="color:#999999;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#59873A;">expect</span><span style="color:#999999;">(</span><span style="color:#B07D48;">store</span><span style="color:#999999;">.</span><span style="color:#B07D48;">someAction</span><span style="color:#999999;">).</span><span style="color:#59873A;">toHaveBeenCalledTimes</span><span style="color:#999999;">(</span><span style="color:#2F798A;">1</span><span style="color:#999999;">)</span></span>
<span class="line"><span style="color:#59873A;">expect</span><span style="color:#999999;">(</span><span style="color:#B07D48;">store</span><span style="color:#999999;">.</span><span style="color:#B07D48;">someAction</span><span style="color:#999999;">).</span><span style="color:#59873A;">toHaveBeenLastCalledWith</span><span style="color:#999999;">()</span></span>
<span class="line"></span></code></pre></div><p>请注意，如果你使用的是 Vue 2，<code>@vue/test-utils</code> 需要一个<a href="#unit-test-components-vue-2">轻微不同的配置</a>。</p><h3 id="initial-state" tabindex="-1">初始 State <a class="header-anchor" href="#initial-state" aria-hidden="true">#</a></h3><p>在创建测试 Pinia 时，你可以通过传递一个 <code>initialState</code> 对象来设置<strong>所有 store 的初始状态</strong>。这个对象将被 pinia 的测试实例用于创建 store 时 <em>patch</em> store。比方说，你想初始化这个 store 的状态：</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">import</span><span style="color:#F6F6F4;"> { defineStore } </span><span style="color:#F286C4;">from</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">pinia</span><span style="color:#DEE492;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F286C4;">const</span><span style="color:#F6F6F4;"> useCounterStore </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">defineStore</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">counter</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">, {</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#62E884;">state</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> () </span><span style="color:#F286C4;">=&gt;</span><span style="color:#F6F6F4;"> ({ n</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;"> }),</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#7B7F8B;">// ...</span></span>
<span class="line"><span style="color:#F6F6F4;">})</span></span>
<span class="line"></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#1E754F;">import</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">defineStore</span><span style="color:#393A34;"> </span><span style="color:#999999;">}</span><span style="color:#393A34;"> </span><span style="color:#1E754F;">from</span><span style="color:#393A34;"> </span><span style="color:#B56959AA;">&#39;</span><span style="color:#B56959;">pinia</span><span style="color:#B56959AA;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#AB5959;">const </span><span style="color:#B07D48;">useCounterStore</span><span style="color:#AB5959;"> = </span><span style="color:#59873A;">defineStore</span><span style="color:#999999;">(</span><span style="color:#B56959AA;">&#39;</span><span style="color:#B56959;">counter</span><span style="color:#B56959AA;">&#39;</span><span style="color:#999999;">,</span><span style="color:#AB5959;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#999999;">  </span><span style="color:#59873A;">state</span><span style="color:#999999;">: () =&gt; ({ </span><span style="color:#998418;">n</span><span style="color:#999999;">: </span><span style="color:#2F798A;">0</span><span style="color:#999999;"> }),</span></span>
<span class="line"><span style="color:#999999;">  </span><span style="color:#A0ADA0;">// ...</span></span>
<span class="line"><span style="color:#999999;">})</span></span>
<span class="line"></span></code></pre></div><p>由于 store 的名字是 <em>&quot;counter&quot;</em>，所以你需要传递相应的对象给 <code>initialState</code>：</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;">// 在测试中的某处</span></span>
<span class="line"><span style="color:#F286C4;">const</span><span style="color:#F6F6F4;"> wrapper </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">mount</span><span style="color:#F6F6F4;">(Counter, {</span></span>
<span class="line"><span style="color:#F6F6F4;">  global</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">    plugins</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> [</span></span>
<span class="line"><span style="color:#F6F6F4;">      </span><span style="color:#62E884;">createTestingPinia</span><span style="color:#F6F6F4;">({</span></span>
<span class="line"><span style="color:#F6F6F4;">        initialState</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">          counter</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> { n</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">20</span><span style="color:#F6F6F4;"> }, </span><span style="color:#7B7F8B;">//从 20 开始计数，而不是 0</span></span>
<span class="line"><span style="color:#F6F6F4;">        },</span></span>
<span class="line"><span style="color:#F6F6F4;">      }),</span></span>
<span class="line"><span style="color:#F6F6F4;">    ],</span></span>
<span class="line"><span style="color:#F6F6F4;">  },</span></span>
<span class="line"><span style="color:#F6F6F4;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F286C4;">const</span><span style="color:#F6F6F4;"> store </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">useSomeStore</span><span style="color:#F6F6F4;">() </span><span style="color:#7B7F8B;">// 使用 pinia 的测试实例!</span></span>
<span class="line"><span style="color:#F6F6F4;">store.n </span><span style="color:#7B7F8B;">// 20</span></span>
<span class="line"></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#A0ADA0;">// 在测试中的某处</span></span>
<span class="line"><span style="color:#AB5959;">const </span><span style="color:#B07D48;">wrapper</span><span style="color:#AB5959;"> = </span><span style="color:#59873A;">mount</span><span style="color:#999999;">(</span><span style="color:#B07D48;">Counter</span><span style="color:#999999;">,</span><span style="color:#AB5959;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#999999;">  </span><span style="color:#998418;">global</span><span style="color:#999999;">: {</span></span>
<span class="line"><span style="color:#999999;">    </span><span style="color:#998418;">plugins</span><span style="color:#999999;">: [</span></span>
<span class="line"><span style="color:#999999;">      </span><span style="color:#59873A;">createTestingPinia</span><span style="color:#999999;">({</span></span>
<span class="line"><span style="color:#999999;">        </span><span style="color:#998418;">initialState</span><span style="color:#999999;">: {</span></span>
<span class="line"><span style="color:#999999;">          </span><span style="color:#998418;">counter</span><span style="color:#999999;">: { </span><span style="color:#998418;">n</span><span style="color:#999999;">: </span><span style="color:#2F798A;">20</span><span style="color:#999999;"> }, </span><span style="color:#A0ADA0;">//从 20 开始计数，而不是 0</span></span>
<span class="line"><span style="color:#999999;">        },</span></span>
<span class="line"><span style="color:#999999;">      }),</span></span>
<span class="line"><span style="color:#999999;">    ],</span></span>
<span class="line"><span style="color:#999999;">  },</span></span>
<span class="line"><span style="color:#999999;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#AB5959;">const </span><span style="color:#B07D48;">store</span><span style="color:#AB5959;"> = </span><span style="color:#59873A;">useSomeStore</span><span style="color:#999999;">()</span><span style="color:#AB5959;"> </span><span style="color:#A0ADA0;">// 使用 pinia 的测试实例!</span></span>
<span class="line"><span style="color:#B07D48;">store</span><span style="color:#999999;">.</span><span style="color:#B07D48;">n</span><span style="color:#393A34;"> </span><span style="color:#A0ADA0;">// 20</span></span>
<span class="line"></span></code></pre></div><h3 id="customizing-behavior-of-actions" tabindex="-1">自定义 action 的行为 <a class="header-anchor" href="#customizing-behavior-of-actions" aria-hidden="true">#</a></h3><p>除非另有指示，<code>createTestingPinia</code> 会存根 (stub) 出所有的 store action。这样可以让你独立测试你的组件和 store。</p><p>如果你想恢复这种行为，并在测试中正常执行 action，请在调用 <code>createTestingPinia</code> 时指定 <code>stubActions: false</code>：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">const</span><span style="color:#F6F6F4;"> wrapper </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">mount</span><span style="color:#F6F6F4;">(Counter, {</span></span>
<span class="line"><span style="color:#F6F6F4;">  global</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">    plugins</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> [</span><span style="color:#62E884;">createTestingPinia</span><span style="color:#F6F6F4;">({ stubActions</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">false</span><span style="color:#F6F6F4;"> })],</span></span>
<span class="line"><span style="color:#F6F6F4;">  },</span></span>
<span class="line"><span style="color:#F6F6F4;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F286C4;">const</span><span style="color:#F6F6F4;"> store </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">useSomeStore</span><span style="color:#F6F6F4;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;">// 现在，这个调用将由 store 定义的实现执行。</span></span>
<span class="line"><span style="color:#F6F6F4;">store.</span><span style="color:#62E884;">someAction</span><span style="color:#F6F6F4;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;">// ...但它仍然被一个 spy 包装着，所以你可以检查调用</span></span>
<span class="line"><span style="color:#62E884;">expect</span><span style="color:#F6F6F4;">(store.someAction).</span><span style="color:#62E884;">toHaveBeenCalledTimes</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">)</span></span>
<span class="line"></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#AB5959;">const</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">wrapper</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">=</span><span style="color:#393A34;"> </span><span style="color:#59873A;">mount</span><span style="color:#999999;">(</span><span style="color:#B07D48;">Counter</span><span style="color:#999999;">,</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#998418;">global</span><span style="color:#999999;">:</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#998418;">plugins</span><span style="color:#999999;">:</span><span style="color:#393A34;"> </span><span style="color:#999999;">[</span><span style="color:#59873A;">createTestingPinia</span><span style="color:#999999;">({</span><span style="color:#393A34;"> </span><span style="color:#998418;">stubActions</span><span style="color:#999999;">:</span><span style="color:#393A34;"> </span><span style="color:#1E754F;">false</span><span style="color:#393A34;"> </span><span style="color:#999999;">})],</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#999999;">},</span></span>
<span class="line"><span style="color:#999999;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#AB5959;">const</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">store</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">=</span><span style="color:#393A34;"> </span><span style="color:#59873A;">useSomeStore</span><span style="color:#999999;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A0ADA0;">// 现在，这个调用将由 store 定义的实现执行。</span></span>
<span class="line"><span style="color:#B07D48;">store</span><span style="color:#999999;">.</span><span style="color:#59873A;">someAction</span><span style="color:#999999;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A0ADA0;">// ...但它仍然被一个 spy 包装着，所以你可以检查调用</span></span>
<span class="line"><span style="color:#59873A;">expect</span><span style="color:#999999;">(</span><span style="color:#B07D48;">store</span><span style="color:#999999;">.</span><span style="color:#B07D48;">someAction</span><span style="color:#999999;">).</span><span style="color:#59873A;">toHaveBeenCalledTimes</span><span style="color:#999999;">(</span><span style="color:#2F798A;">1</span><span style="color:#999999;">)</span></span>
<span class="line"></span></code></pre></div><h3 id="specifying-the-createspy-function" tabindex="-1">指定 createSpy 函数 <a class="header-anchor" href="#specifying-the-createspy-function" aria-hidden="true">#</a></h3><p>当使用 Jest，或 vitest 且设置 <code>globals: true</code> 时，<code>createTestingPinia</code> 会自动使用现有测试框架 (<code>jest.fn</code> 或 <code>vitest.fn</code>) 的 spy 函数存根 (stub) action。如果你使用的是不同的框架，你需要提供一个 <a href="/zh/api/interfaces/pinia_testing.TestingOptions.html#createspy">createSpy</a> 选项：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">import</span><span style="color:#F6F6F4;"> sinon </span><span style="color:#F286C4;">from</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">sinon</span><span style="color:#DEE492;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#62E884;">createTestingPinia</span><span style="color:#F6F6F4;">({</span></span>
<span class="line"><span style="color:#F6F6F4;">  createSpy</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> sinon.spy, </span><span style="color:#7B7F8B;">// 使用 sinon&#39;s spy 包装 action</span></span>
<span class="line"><span style="color:#F6F6F4;">})</span></span>
<span class="line"></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#1E754F;">import</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">sinon</span><span style="color:#393A34;"> </span><span style="color:#1E754F;">from</span><span style="color:#393A34;"> </span><span style="color:#B56959AA;">&#39;</span><span style="color:#B56959;">sinon</span><span style="color:#B56959AA;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#59873A;">createTestingPinia</span><span style="color:#999999;">({</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#998418;">createSpy</span><span style="color:#999999;">:</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">sinon</span><span style="color:#999999;">.</span><span style="color:#B07D48;">spy</span><span style="color:#999999;">,</span><span style="color:#393A34;"> </span><span style="color:#A0ADA0;">// 使用 sinon&#39;s spy 包装 action</span></span>
<span class="line"><span style="color:#999999;">})</span></span>
<span class="line"></span></code></pre></div><p>你可以在<a href="https://github.com/vuejs/pinia/blob/v2/packages/testing/src/testing.spec.ts" target="_blank" rel="noreferrer">测试包的测试源码</a>中找到更多的例子。</p><h3 id="mocking-getters" tabindex="-1">Mocking getters <a class="header-anchor" href="#mocking-getters" aria-hidden="true">#</a></h3><p>默认情况下，任何 getter 都会像常规用法一样进行计算，但你可以通过将 getter 设置为任何你想要的值来手动强制计算：</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">import</span><span style="color:#F6F6F4;"> { defineStore } </span><span style="color:#F286C4;">from</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">pinia</span><span style="color:#DEE492;">&#39;</span></span>
<span class="line"><span style="color:#F286C4;">import</span><span style="color:#F6F6F4;"> { createTestingPinia } </span><span style="color:#F286C4;">from</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">@pinia/testing</span><span style="color:#DEE492;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F286C4;">const</span><span style="color:#F6F6F4;"> useCounter </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">defineStore</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">counter</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">, {</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#62E884;">state</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> () </span><span style="color:#F286C4;">=&gt;</span><span style="color:#F6F6F4;"> ({ n</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;"> }),</span></span>
<span class="line"><span style="color:#F6F6F4;">  getters</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#62E884;">double</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> (</span><span style="color:#FFB86C;font-style:italic;">state</span><span style="color:#F6F6F4;">) </span><span style="color:#F286C4;">=&gt;</span><span style="color:#F6F6F4;"> state.n </span><span style="color:#F286C4;">*</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">2</span><span style="color:#F6F6F4;">,</span></span>
<span class="line"><span style="color:#F6F6F4;">  },</span></span>
<span class="line"><span style="color:#F6F6F4;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F286C4;">const</span><span style="color:#F6F6F4;"> pinia </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">createTestingPinia</span><span style="color:#F6F6F4;">()</span></span>
<span class="line"><span style="color:#F286C4;">const</span><span style="color:#F6F6F4;"> counter </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">useCounter</span><span style="color:#F6F6F4;">(pinia)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">counter.double </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">3</span><span style="color:#F6F6F4;"> </span><span style="color:#7B7F8B;">// 🪄 getter 仅在测试中可被重写</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;">// 设置为 undefined，以重置默认行为</span></span>
<span class="line"><span style="color:#7B7F8B;">// @ts-expect-error: usually it&#39;s a number</span></span>
<span class="line"><span style="color:#F6F6F4;">counter.double </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">undefined</span></span>
<span class="line"><span style="color:#F6F6F4;">counter.double </span><span style="color:#7B7F8B;">// 2 (=1 x 2)</span></span>
<span class="line"></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#1E754F;">import</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">defineStore</span><span style="color:#393A34;"> </span><span style="color:#999999;">}</span><span style="color:#393A34;"> </span><span style="color:#1E754F;">from</span><span style="color:#393A34;"> </span><span style="color:#B56959AA;">&#39;</span><span style="color:#B56959;">pinia</span><span style="color:#B56959AA;">&#39;</span></span>
<span class="line"><span style="color:#1E754F;">import</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">createTestingPinia</span><span style="color:#393A34;"> </span><span style="color:#999999;">}</span><span style="color:#393A34;"> </span><span style="color:#1E754F;">from</span><span style="color:#393A34;"> </span><span style="color:#B56959AA;">&#39;</span><span style="color:#B56959;">@pinia/testing</span><span style="color:#B56959AA;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#AB5959;">const </span><span style="color:#B07D48;">useCounter</span><span style="color:#AB5959;"> = </span><span style="color:#59873A;">defineStore</span><span style="color:#999999;">(</span><span style="color:#B56959AA;">&#39;</span><span style="color:#B56959;">counter</span><span style="color:#B56959AA;">&#39;</span><span style="color:#999999;">,</span><span style="color:#AB5959;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#999999;">  </span><span style="color:#59873A;">state</span><span style="color:#999999;">: () =&gt; ({ </span><span style="color:#998418;">n</span><span style="color:#999999;">: </span><span style="color:#2F798A;">1</span><span style="color:#999999;"> }),</span></span>
<span class="line"><span style="color:#999999;">  </span><span style="color:#998418;">getters</span><span style="color:#999999;">: {</span></span>
<span class="line"><span style="color:#999999;">    </span><span style="color:#59873A;">double</span><span style="color:#999999;">: (</span><span style="color:#B07D48;">state</span><span style="color:#999999;">) =&gt; </span><span style="color:#B07D48;">state</span><span style="color:#999999;">.</span><span style="color:#B07D48;">n</span><span style="color:#999999;"> </span><span style="color:#AB5959;">*</span><span style="color:#999999;"> </span><span style="color:#2F798A;">2</span><span style="color:#999999;">,</span></span>
<span class="line"><span style="color:#999999;">  },</span></span>
<span class="line"><span style="color:#999999;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#AB5959;">const </span><span style="color:#B07D48;">pinia</span><span style="color:#AB5959;"> = </span><span style="color:#59873A;">createTestingPinia</span><span style="color:#999999;">()</span></span>
<span class="line"><span style="color:#AB5959;">const </span><span style="color:#B07D48;">counter</span><span style="color:#AB5959;"> = </span><span style="color:#59873A;">useCounter</span><span style="color:#999999;">(</span><span style="color:#B07D48;">pinia</span><span style="color:#999999;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B07D48;">counter</span><span style="color:#999999;">.</span><span style="color:#B07D48;">double</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">=</span><span style="color:#393A34;"> </span><span style="color:#2F798A;">3</span><span style="color:#393A34;"> </span><span style="color:#A0ADA0;">// 🪄 getter 仅在测试中可被重写</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A0ADA0;">// 设置为 undefined，以重置默认行为</span></span>
<span class="line"><span style="color:#A0ADA0;">// @ts-expect-error: usually it&#39;s a number</span></span>
<span class="line"><span style="color:#B07D48;">counter</span><span style="color:#999999;">.</span><span style="color:#B07D48;">double</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">=</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">undefined</span></span>
<span class="line"><span style="color:#B07D48;">counter</span><span style="color:#999999;">.</span><span style="color:#B07D48;">double</span><span style="color:#393A34;"> </span><span style="color:#A0ADA0;">// 2 (=1 x 2)</span></span>
<span class="line"></span></code></pre></div><h3 id="pinia-plugins" tabindex="-1">Pinia 插件 <a class="header-anchor" href="#pinia-plugins" aria-hidden="true">#</a></h3><p>如果你有使用任何 pinia 插件，确保在调用 <code>createTestingPinia()</code> 时传入它们，这样它们就会被正确加载。<strong>不要使用 <code>testingPinia.use(MyPlugin)</code></strong> 来加载它们，而应该像正常的 pinia 那样：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">import</span><span style="color:#F6F6F4;"> { createTestingPinia } </span><span style="color:#F286C4;">from</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">@pinia/testing</span><span style="color:#DEE492;">&#39;</span></span>
<span class="line"><span style="color:#F286C4;">import</span><span style="color:#F6F6F4;"> { somePlugin } </span><span style="color:#F286C4;">from</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">../src/stores/plugin</span><span style="color:#DEE492;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;">// 某些测试</span></span>
<span class="line"><span style="color:#F286C4;">const</span><span style="color:#F6F6F4;"> wrapper </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">mount</span><span style="color:#F6F6F4;">(Counter, {</span></span>
<span class="line"><span style="color:#F6F6F4;">  global</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">    plugins</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> [</span></span>
<span class="line"><span style="color:#F6F6F4;">      </span><span style="color:#62E884;">createTestingPinia</span><span style="color:#F6F6F4;">({</span></span>
<span class="line"><span style="color:#F6F6F4;">        stubActions</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">false</span><span style="color:#F6F6F4;">,</span></span>
<span class="line"><span style="color:#F6F6F4;">        plugins</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> [somePlugin],</span></span>
<span class="line"><span style="color:#F6F6F4;">      }),</span></span>
<span class="line"><span style="color:#F6F6F4;">    ],</span></span>
<span class="line"><span style="color:#F6F6F4;">  },</span></span>
<span class="line"><span style="color:#F6F6F4;">})</span></span>
<span class="line"></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#1E754F;">import</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">createTestingPinia</span><span style="color:#393A34;"> </span><span style="color:#999999;">}</span><span style="color:#393A34;"> </span><span style="color:#1E754F;">from</span><span style="color:#393A34;"> </span><span style="color:#B56959AA;">&#39;</span><span style="color:#B56959;">@pinia/testing</span><span style="color:#B56959AA;">&#39;</span></span>
<span class="line"><span style="color:#1E754F;">import</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">somePlugin</span><span style="color:#393A34;"> </span><span style="color:#999999;">}</span><span style="color:#393A34;"> </span><span style="color:#1E754F;">from</span><span style="color:#393A34;"> </span><span style="color:#B56959AA;">&#39;</span><span style="color:#B56959;">../src/stores/plugin</span><span style="color:#B56959AA;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A0ADA0;">// 某些测试</span></span>
<span class="line"><span style="color:#AB5959;">const</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">wrapper</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">=</span><span style="color:#393A34;"> </span><span style="color:#59873A;">mount</span><span style="color:#999999;">(</span><span style="color:#B07D48;">Counter</span><span style="color:#999999;">,</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#998418;">global</span><span style="color:#999999;">:</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#998418;">plugins</span><span style="color:#999999;">:</span><span style="color:#393A34;"> </span><span style="color:#999999;">[</span></span>
<span class="line"><span style="color:#393A34;">      </span><span style="color:#59873A;">createTestingPinia</span><span style="color:#999999;">({</span></span>
<span class="line"><span style="color:#393A34;">        </span><span style="color:#998418;">stubActions</span><span style="color:#999999;">:</span><span style="color:#393A34;"> </span><span style="color:#1E754F;">false</span><span style="color:#999999;">,</span></span>
<span class="line"><span style="color:#393A34;">        </span><span style="color:#998418;">plugins</span><span style="color:#999999;">:</span><span style="color:#393A34;"> </span><span style="color:#999999;">[</span><span style="color:#B07D48;">somePlugin</span><span style="color:#999999;">],</span></span>
<span class="line"><span style="color:#393A34;">      </span><span style="color:#999999;">}),</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#999999;">],</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#999999;">},</span></span>
<span class="line"><span style="color:#999999;">})</span></span>
<span class="line"></span></code></pre></div><h2 id="e2e-tests" tabindex="-1">端到端测试 <a class="header-anchor" href="#e2e-tests" aria-hidden="true">#</a></h2><p>对于 pinia，你不需要为端到端测试修改任何代码，这就是端到端测试的含义！也许你想测试 HTTP 请求，但这已经超出了本指南的范围😄。</p><h2 id="unit-test-components-vue-2" tabindex="-1">对组件单元测试(Vue 2) <a class="header-anchor" href="#unit-test-components-vue-2" aria-hidden="true">#</a></h2><p>当你使用的是 <a href="https://v1.test-utils.vuejs.org/zh/" target="_blank" rel="noreferrer">Vue Test Utils 1</a> 时，请将 Pinia 安装在 <code>localVue</code> 上：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">import</span><span style="color:#F6F6F4;"> { PiniaVuePlugin } </span><span style="color:#F286C4;">from</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">pinia</span><span style="color:#DEE492;">&#39;</span></span>
<span class="line"><span style="color:#F286C4;">import</span><span style="color:#F6F6F4;"> { createLocalVue, mount } </span><span style="color:#F286C4;">from</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">@vue/test-utils</span><span style="color:#DEE492;">&#39;</span></span>
<span class="line"><span style="color:#F286C4;">import</span><span style="color:#F6F6F4;"> { createTestingPinia } </span><span style="color:#F286C4;">from</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">@pinia/testing</span><span style="color:#DEE492;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F286C4;">const</span><span style="color:#F6F6F4;"> localVue </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">createLocalVue</span><span style="color:#F6F6F4;">()</span></span>
<span class="line"><span style="color:#F6F6F4;">localVue.</span><span style="color:#62E884;">use</span><span style="color:#F6F6F4;">(PiniaVuePlugin)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F286C4;">const</span><span style="color:#F6F6F4;"> wrapper </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">mount</span><span style="color:#F6F6F4;">(Counter, {</span></span>
<span class="line"><span style="color:#F6F6F4;">  localVue,</span></span>
<span class="line"><span style="color:#F6F6F4;">  pinia</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">createTestingPinia</span><span style="color:#F6F6F4;">(),</span></span>
<span class="line"><span style="color:#F6F6F4;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F286C4;">const</span><span style="color:#F6F6F4;"> store </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">useSomeStore</span><span style="color:#F6F6F4;">() </span><span style="color:#7B7F8B;">// 使用 pinia 的测试实例！</span></span>
<span class="line"></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#1E754F;">import</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">PiniaVuePlugin</span><span style="color:#393A34;"> </span><span style="color:#999999;">}</span><span style="color:#393A34;"> </span><span style="color:#1E754F;">from</span><span style="color:#393A34;"> </span><span style="color:#B56959AA;">&#39;</span><span style="color:#B56959;">pinia</span><span style="color:#B56959AA;">&#39;</span></span>
<span class="line"><span style="color:#1E754F;">import</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">createLocalVue</span><span style="color:#999999;">,</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">mount</span><span style="color:#393A34;"> </span><span style="color:#999999;">}</span><span style="color:#393A34;"> </span><span style="color:#1E754F;">from</span><span style="color:#393A34;"> </span><span style="color:#B56959AA;">&#39;</span><span style="color:#B56959;">@vue/test-utils</span><span style="color:#B56959AA;">&#39;</span></span>
<span class="line"><span style="color:#1E754F;">import</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">createTestingPinia</span><span style="color:#393A34;"> </span><span style="color:#999999;">}</span><span style="color:#393A34;"> </span><span style="color:#1E754F;">from</span><span style="color:#393A34;"> </span><span style="color:#B56959AA;">&#39;</span><span style="color:#B56959;">@pinia/testing</span><span style="color:#B56959AA;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#AB5959;">const</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">localVue</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">=</span><span style="color:#393A34;"> </span><span style="color:#59873A;">createLocalVue</span><span style="color:#999999;">()</span></span>
<span class="line"><span style="color:#B07D48;">localVue</span><span style="color:#999999;">.</span><span style="color:#59873A;">use</span><span style="color:#999999;">(</span><span style="color:#B07D48;">PiniaVuePlugin</span><span style="color:#999999;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#AB5959;">const</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">wrapper</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">=</span><span style="color:#393A34;"> </span><span style="color:#59873A;">mount</span><span style="color:#999999;">(</span><span style="color:#B07D48;">Counter</span><span style="color:#999999;">,</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#B07D48;">localVue</span><span style="color:#999999;">,</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#998418;">pinia</span><span style="color:#999999;">:</span><span style="color:#393A34;"> </span><span style="color:#59873A;">createTestingPinia</span><span style="color:#999999;">(),</span></span>
<span class="line"><span style="color:#999999;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#AB5959;">const</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">store</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">=</span><span style="color:#393A34;"> </span><span style="color:#59873A;">useSomeStore</span><span style="color:#999999;">()</span><span style="color:#393A34;"> </span><span style="color:#A0ADA0;">// 使用 pinia 的测试实例！</span></span>
<span class="line"></span></code></pre></div>`,41),e=[o];function t(c,r,y,i,F,A){return n(),a("div",null,e)}const B=s(l,[["render",t]]);export{u as __pageData,B as default};
