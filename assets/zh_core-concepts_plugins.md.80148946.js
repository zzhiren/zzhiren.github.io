import{_ as s,o as n,c as a,a as l}from"./app.09b4d0c2.js";const B=JSON.parse('{"title":"插件","description":"","frontmatter":{},"headers":[{"level":2,"title":"简介","slug":"introduction","link":"#introduction","children":[]},{"level":2,"title":"扩展 Store","slug":"augmenting-a-store","link":"#augmenting-a-store","children":[{"level":3,"title":"添加新的 state","slug":"adding-new-state","link":"#adding-new-state","children":[]}]},{"level":2,"title":"添加新的外部属性","slug":"adding-new-external-properties","link":"#adding-new-external-properties","children":[]},{"level":2,"title":"在插件中调用 $subscribe","slug":"calling-subscribe-inside-plugins","link":"#calling-subscribe-inside-plugins","children":[]},{"level":2,"title":"添加新的选项","slug":"adding-new-options","link":"#adding-new-options","children":[]},{"level":2,"title":"TypeScript","slug":"typescript","link":"#typescript","children":[{"level":3,"title":"标注插件类型","slug":"typing-plugins","link":"#typing-plugins","children":[]},{"level":3,"title":"为新的 store 属性添加类型","slug":"typing-new-store-properties","link":"#typing-new-store-properties","children":[]},{"level":3,"title":"为新的 state 添加类型","slug":"typing-new-state","link":"#typing-new-state","children":[]},{"level":3,"title":"为新的定义选项添加类型","slug":"typing-new-creation-options","link":"#typing-new-creation-options","children":[]}]},{"level":2,"title":"Nuxt.js","slug":"nuxt-js","link":"#nuxt-js","children":[]}],"relativePath":"zh/core-concepts/plugins.md"}'),p={name:"zh/core-concepts/plugins.md"},o=l(`<h1 id="plugins" tabindex="-1">插件 <a class="header-anchor" href="#plugins" aria-hidden="true">#</a></h1><p>由于有了底层 API 的支持，Pinia store 现在完全支持扩展。以下是你可以扩展的内容：</p><ul><li>为 store 添加新的属性</li><li>定义 store 时增加新的选项</li><li>为 store 增加新的方法</li><li>包装现有的方法</li><li>改变甚至取消 action</li><li>实现副作用，如<a href="https://developer.mozilla.org/en-US/docs/Web/API/Window/localStorage" target="_blank" rel="noreferrer">本地存储</a></li><li><strong>仅</strong>应用插件于特定 store</li></ul><p>插件是通过 <code>pinia.use()</code> 添加到 pinia 实例的。最简单的例子是通过返回一个对象将一个静态属性添加到所有 store。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">import</span><span style="color:#F6F6F4;"> { createPinia } </span><span style="color:#F286C4;">from</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">pinia</span><span style="color:#DEE492;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;">// 创建的每个 store 中都会添加一个名为 \`secret\` 的属性。</span></span>
<span class="line"><span style="color:#7B7F8B;">// 在安装此插件后，插件可以保存在不同的文件中</span></span>
<span class="line"><span style="color:#F286C4;">function</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">SecretPiniaPlugin</span><span style="color:#F6F6F4;">() {</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> { secret</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">the cake is a lie</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;"> }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F286C4;">const</span><span style="color:#F6F6F4;"> pinia </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">createPinia</span><span style="color:#F6F6F4;">()</span></span>
<span class="line"><span style="color:#7B7F8B;">// 将该插件交给 Pinia</span></span>
<span class="line"><span style="color:#F6F6F4;">pinia.</span><span style="color:#62E884;">use</span><span style="color:#F6F6F4;">(SecretPiniaPlugin)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;">// 在另一个文件中</span></span>
<span class="line"><span style="color:#F286C4;">const</span><span style="color:#F6F6F4;"> store </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">useStore</span><span style="color:#F6F6F4;">()</span></span>
<span class="line"><span style="color:#F6F6F4;">store.secret </span><span style="color:#7B7F8B;">// &#39;the cake is a lie&#39;</span></span>
<span class="line"></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#1E754F;">import</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">createPinia</span><span style="color:#393A34;"> </span><span style="color:#999999;">}</span><span style="color:#393A34;"> </span><span style="color:#1E754F;">from</span><span style="color:#393A34;"> </span><span style="color:#B56959AA;">&#39;</span><span style="color:#B56959;">pinia</span><span style="color:#B56959AA;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A0ADA0;">// 创建的每个 store 中都会添加一个名为 \`secret\` 的属性。</span></span>
<span class="line"><span style="color:#A0ADA0;">// 在安装此插件后，插件可以保存在不同的文件中</span></span>
<span class="line"><span style="color:#AB5959;">function</span><span style="color:#393A34;"> </span><span style="color:#59873A;">SecretPiniaPlugin</span><span style="color:#999999;">()</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#1E754F;">return</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span><span style="color:#393A34;"> </span><span style="color:#998418;">secret</span><span style="color:#999999;">:</span><span style="color:#393A34;"> </span><span style="color:#B56959AA;">&#39;</span><span style="color:#B56959;">the cake is a lie</span><span style="color:#B56959AA;">&#39;</span><span style="color:#393A34;"> </span><span style="color:#999999;">}</span></span>
<span class="line"><span style="color:#999999;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#AB5959;">const</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">pinia</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">=</span><span style="color:#393A34;"> </span><span style="color:#59873A;">createPinia</span><span style="color:#999999;">()</span></span>
<span class="line"><span style="color:#A0ADA0;">// 将该插件交给 Pinia</span></span>
<span class="line"><span style="color:#B07D48;">pinia</span><span style="color:#999999;">.</span><span style="color:#59873A;">use</span><span style="color:#999999;">(</span><span style="color:#B07D48;">SecretPiniaPlugin</span><span style="color:#999999;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A0ADA0;">// 在另一个文件中</span></span>
<span class="line"><span style="color:#AB5959;">const</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">store</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">=</span><span style="color:#393A34;"> </span><span style="color:#59873A;">useStore</span><span style="color:#999999;">()</span></span>
<span class="line"><span style="color:#B07D48;">store</span><span style="color:#999999;">.</span><span style="color:#B07D48;">secret</span><span style="color:#393A34;"> </span><span style="color:#A0ADA0;">// &#39;the cake is a lie&#39;</span></span>
<span class="line"></span></code></pre></div><p>这对添加全局对象很有用，如路由器、modal 或 toast 管理器。</p><h2 id="introduction" tabindex="-1">简介 <a class="header-anchor" href="#introduction" aria-hidden="true">#</a></h2><p>Pinia 插件是一个函数，可以选择性地返回要添加到 store 的属性。它接收一个可选参数，即 <em>context</em>。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">export</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">function</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">myPiniaPlugin</span><span style="color:#F6F6F4;">(</span><span style="color:#FFB86C;font-style:italic;">context</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">  context.pinia </span><span style="color:#7B7F8B;">// 用 \`createPinia()\` 创建的 pinia。 </span></span>
<span class="line"><span style="color:#F6F6F4;">  context.app </span><span style="color:#7B7F8B;">// 用 \`createApp()\` 创建的当前应用(仅 Vue 3)。</span></span>
<span class="line"><span style="color:#F6F6F4;">  context.store </span><span style="color:#7B7F8B;">// 该插件想扩展的 store</span></span>
<span class="line"><span style="color:#F6F6F4;">  context.options </span><span style="color:#7B7F8B;">// 定义传给 \`defineStore()\` 的 store 的可选对象。</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#7B7F8B;">// ...</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span>
<span class="line"></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#1E754F;">export</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">function</span><span style="color:#393A34;"> </span><span style="color:#59873A;">myPiniaPlugin</span><span style="color:#999999;">(</span><span style="color:#B07D48;">context</span><span style="color:#999999;">)</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#B07D48;">context</span><span style="color:#999999;">.</span><span style="color:#B07D48;">pinia</span><span style="color:#393A34;"> </span><span style="color:#A0ADA0;">// 用 \`createPinia()\` 创建的 pinia。 </span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#B07D48;">context</span><span style="color:#999999;">.</span><span style="color:#B07D48;">app</span><span style="color:#393A34;"> </span><span style="color:#A0ADA0;">// 用 \`createApp()\` 创建的当前应用(仅 Vue 3)。</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#B07D48;">context</span><span style="color:#999999;">.</span><span style="color:#B07D48;">store</span><span style="color:#393A34;"> </span><span style="color:#A0ADA0;">// 该插件想扩展的 store</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#B07D48;">context</span><span style="color:#999999;">.</span><span style="color:#B07D48;">options</span><span style="color:#393A34;"> </span><span style="color:#A0ADA0;">// 定义传给 \`defineStore()\` 的 store 的可选对象。</span></span>
<span class="line"><span style="color:#999999;">  </span><span style="color:#A0ADA0;">// ...</span></span>
<span class="line"><span style="color:#999999;">}</span></span>
<span class="line"></span></code></pre></div><p>然后用 <code>pinia.use()</code> 将这个函数传给 <code>pinia</code>：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F6F6F4;">pinia.</span><span style="color:#62E884;">use</span><span style="color:#F6F6F4;">(myPiniaPlugin)</span></span>
<span class="line"></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#B07D48;">pinia</span><span style="color:#999999;">.</span><span style="color:#59873A;">use</span><span style="color:#999999;">(</span><span style="color:#B07D48;">myPiniaPlugin</span><span style="color:#999999;">)</span></span>
<span class="line"></span></code></pre></div><p>插件只会应用于<strong>在 <code>pinia</code> 传递给应用后</strong>创建的 store，否则它们不会生效。</p><h2 id="augmenting-a-store" tabindex="-1">扩展 Store <a class="header-anchor" href="#augmenting-a-store" aria-hidden="true">#</a></h2><p>你可以直接通过在一个插件中返回包含特定属性的对象来为每个 store 都添加上特定属性：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F6F6F4;">pinia.</span><span style="color:#62E884;">use</span><span style="color:#F6F6F4;">(() </span><span style="color:#F286C4;">=&gt;</span><span style="color:#F6F6F4;"> ({ hello</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">world</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;"> }))</span></span>
<span class="line"></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#B07D48;">pinia</span><span style="color:#999999;">.</span><span style="color:#59873A;">use</span><span style="color:#999999;">(()</span><span style="color:#393A34;"> </span><span style="color:#999999;">=&gt;</span><span style="color:#393A34;"> </span><span style="color:#999999;">({</span><span style="color:#393A34;"> </span><span style="color:#998418;">hello</span><span style="color:#999999;">:</span><span style="color:#393A34;"> </span><span style="color:#B56959AA;">&#39;</span><span style="color:#B56959;">world</span><span style="color:#B56959AA;">&#39;</span><span style="color:#393A34;"> </span><span style="color:#999999;">}))</span></span>
<span class="line"></span></code></pre></div><p>你也可以直接在 <code>store</code> 上设置该属性，但<strong>可以的话，请使用返回对象的方法，这样它们就能被 devtools 自动追踪到</strong>：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F6F6F4;">pinia.</span><span style="color:#62E884;">use</span><span style="color:#F6F6F4;">(({ </span><span style="color:#FFB86C;font-style:italic;">store</span><span style="color:#F6F6F4;"> }) </span><span style="color:#F286C4;">=&gt;</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">  store.hello </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">world</span><span style="color:#DEE492;">&#39;</span></span>
<span class="line"><span style="color:#F6F6F4;">})</span></span>
<span class="line"></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#B07D48;">pinia</span><span style="color:#999999;">.</span><span style="color:#59873A;">use</span><span style="color:#999999;">(({</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">store</span><span style="color:#393A34;"> </span><span style="color:#999999;">})</span><span style="color:#393A34;"> </span><span style="color:#999999;">=&gt;</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#B07D48;">store</span><span style="color:#999999;">.</span><span style="color:#B07D48;">hello</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">=</span><span style="color:#393A34;"> </span><span style="color:#B56959AA;">&#39;</span><span style="color:#B56959;">world</span><span style="color:#B56959AA;">&#39;</span></span>
<span class="line"><span style="color:#999999;">})</span></span>
<span class="line"></span></code></pre></div><p>任何由插件返回的属性都会被 devtools 自动追踪，所以如果你想在 devtools 中调试 <code>hello</code> 属性，为了使 devtools 能追踪到 <code>hello</code>，请确保<strong>在 dev 模式下</strong>将其添加到 <code>store._customProperties</code> 中：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;">// 上文示例</span></span>
<span class="line"><span style="color:#F6F6F4;">pinia.</span><span style="color:#62E884;">use</span><span style="color:#F6F6F4;">(({ </span><span style="color:#FFB86C;font-style:italic;">store</span><span style="color:#F6F6F4;"> }) </span><span style="color:#F286C4;">=&gt;</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">  store.hello </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">world</span><span style="color:#DEE492;">&#39;</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#7B7F8B;">// 确保你的构建工具能处理这个问题，webpack 和 vite 在默认情况下应该能处理。</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (p<wbr>rocess.env.</span><span style="color:#BF9EEE;">NODE_ENV</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">===</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">development</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">// 添加你在 store 中设置的键值</span></span>
<span class="line"><span style="color:#F6F6F4;">    store._customProperties.</span><span style="color:#62E884;">add</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">hello</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">)</span></span>
<span class="line"><span style="color:#F6F6F4;">  }</span></span>
<span class="line"><span style="color:#F6F6F4;">})</span></span>
<span class="line"></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#A0ADA0;">// 上文示例</span></span>
<span class="line"><span style="color:#B07D48;">pinia</span><span style="color:#999999;">.</span><span style="color:#59873A;">use</span><span style="color:#999999;">(({</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">store</span><span style="color:#393A34;"> </span><span style="color:#999999;">})</span><span style="color:#393A34;"> </span><span style="color:#999999;">=&gt;</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#B07D48;">store</span><span style="color:#999999;">.</span><span style="color:#B07D48;">hello</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">=</span><span style="color:#393A34;"> </span><span style="color:#B56959AA;">&#39;</span><span style="color:#B56959;">world</span><span style="color:#B56959AA;">&#39;</span></span>
<span class="line"><span style="color:#999999;">  </span><span style="color:#A0ADA0;">// 确保你的构建工具能处理这个问题，webpack 和 vite 在默认情况下应该能处理。</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#1E754F;">if</span><span style="color:#393A34;"> </span><span style="color:#999999;">(</span><span style="color:#B07D48;">process</span><span style="color:#999999;">.</span><span style="color:#B07D48;">env</span><span style="color:#999999;">.</span><span style="color:#B07D48;">NODE_ENV</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">===</span><span style="color:#393A34;"> </span><span style="color:#B56959AA;">&#39;</span><span style="color:#B56959;">development</span><span style="color:#B56959AA;">&#39;</span><span style="color:#999999;">)</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#999999;">    </span><span style="color:#A0ADA0;">// 添加你在 store 中设置的键值</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#B07D48;">store</span><span style="color:#999999;">.</span><span style="color:#B07D48;">_customProperties</span><span style="color:#999999;">.</span><span style="color:#59873A;">add</span><span style="color:#999999;">(</span><span style="color:#B56959AA;">&#39;</span><span style="color:#B56959;">hello</span><span style="color:#B56959AA;">&#39;</span><span style="color:#999999;">)</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#999999;">}</span></span>
<span class="line"><span style="color:#999999;">})</span></span>
<span class="line"></span></code></pre></div><p>值得注意的是，每个 store 都被 <a href="https://cn.vuejs.org/api/reactivity-core.html#reactive" target="_blank" rel="noreferrer"><code>reactive</code></a>包装过，所以可以自动解包任何它所包含的 Ref(<code>ref()</code>、<code>computed()</code>...)。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">const</span><span style="color:#F6F6F4;"> sharedRef </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">ref</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">shared</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">)</span></span>
<span class="line"><span style="color:#F6F6F4;">pinia.</span><span style="color:#62E884;">use</span><span style="color:#F6F6F4;">(({ </span><span style="color:#FFB86C;font-style:italic;">store</span><span style="color:#F6F6F4;"> }) </span><span style="color:#F286C4;">=&gt;</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#7B7F8B;">// 每个 store 都有单独的 \`hello\` 属性</span></span>
<span class="line"><span style="color:#F6F6F4;">  store.hello </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">ref</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">secret</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">)</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#7B7F8B;">// 它会被自动解包</span></span>
<span class="line"><span style="color:#F6F6F4;">  store.hello </span><span style="color:#7B7F8B;">// &#39;secret&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#7B7F8B;">// 所有的 store 都在共享 \`shared\` 属性的值</span></span>
<span class="line"><span style="color:#F6F6F4;">  store.shared </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> sharedRef</span></span>
<span class="line"><span style="color:#F6F6F4;">  store.shared </span><span style="color:#7B7F8B;">// &#39;shared&#39;</span></span>
<span class="line"><span style="color:#F6F6F4;">})</span></span>
<span class="line"></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#AB5959;">const</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">sharedRef</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">=</span><span style="color:#393A34;"> </span><span style="color:#59873A;">ref</span><span style="color:#999999;">(</span><span style="color:#B56959AA;">&#39;</span><span style="color:#B56959;">shared</span><span style="color:#B56959AA;">&#39;</span><span style="color:#999999;">)</span></span>
<span class="line"><span style="color:#B07D48;">pinia</span><span style="color:#999999;">.</span><span style="color:#59873A;">use</span><span style="color:#999999;">(({</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">store</span><span style="color:#393A34;"> </span><span style="color:#999999;">})</span><span style="color:#393A34;"> </span><span style="color:#999999;">=&gt;</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#999999;">  </span><span style="color:#A0ADA0;">// 每个 store 都有单独的 \`hello\` 属性</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#B07D48;">store</span><span style="color:#999999;">.</span><span style="color:#B07D48;">hello</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">=</span><span style="color:#393A34;"> </span><span style="color:#59873A;">ref</span><span style="color:#999999;">(</span><span style="color:#B56959AA;">&#39;</span><span style="color:#B56959;">secret</span><span style="color:#B56959AA;">&#39;</span><span style="color:#999999;">)</span></span>
<span class="line"><span style="color:#999999;">  </span><span style="color:#A0ADA0;">// 它会被自动解包</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#B07D48;">store</span><span style="color:#999999;">.</span><span style="color:#B07D48;">hello</span><span style="color:#393A34;"> </span><span style="color:#A0ADA0;">// &#39;secret&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#999999;">  </span><span style="color:#A0ADA0;">// 所有的 store 都在共享 \`shared\` 属性的值</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#B07D48;">store</span><span style="color:#999999;">.</span><span style="color:#B07D48;">shared</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">=</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">sharedRef</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#B07D48;">store</span><span style="color:#999999;">.</span><span style="color:#B07D48;">shared</span><span style="color:#393A34;"> </span><span style="color:#A0ADA0;">// &#39;shared&#39;</span></span>
<span class="line"><span style="color:#999999;">})</span></span>
<span class="line"></span></code></pre></div><p>这就是在没有 <code>.value</code> 的情况下你依旧可以访问所有计算属性的原因，也是它们为什么是响应式的原因。</p><h3 id="adding-new-state" tabindex="-1">添加新的 state <a class="header-anchor" href="#adding-new-state" aria-hidden="true">#</a></h3><p>如果你想给 store 添加新的 state 属性或者在服务端渲染的激活过程中使用的属性，<strong>你必须同时在两个地方添加它</strong>。。</p><ul><li>在 <code>store</code> 上，然后你才可以用 <code>store.myState</code> 访问它。</li><li>在 <code>store.$state</code> 上，然后你才可以在 devtools 中使用它，并且，<strong>在 SSR 时被正确序列化(serialized)</strong>。</li></ul><p>除此之外，你肯定也会使用 <code>ref()</code>(或其他响应式 API)，以便在不同的读取中共享相同的值：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">import</span><span style="color:#F6F6F4;"> { toRef, ref } </span><span style="color:#F286C4;">from</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">vue</span><span style="color:#DEE492;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">pinia.</span><span style="color:#62E884;">use</span><span style="color:#F6F6F4;">(({ </span><span style="color:#FFB86C;font-style:italic;">store</span><span style="color:#F6F6F4;"> }) </span><span style="color:#F286C4;">=&gt;</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#7B7F8B;">// 为了正确地处理 SSR，我们需要确保我们没有重写任何一个 </span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#7B7F8B;">// 现有的值</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (</span><span style="color:#F286C4;">!</span><span style="color:#97E1F1;font-style:italic;">Object</span><span style="color:#F6F6F4;">.prototype.</span><span style="color:#62E884;">hasOwnProperty</span><span style="color:#F6F6F4;">(store.$state, </span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">hasError</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">)) {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">// 在插件中定义 hasError，因此每个 store 都有各自的</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">// hasError 状态</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">const</span><span style="color:#F6F6F4;"> hasError </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">ref</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">false</span><span style="color:#F6F6F4;">)</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">// 在 \`$state\` 上设置变量，允许它在 SSR 期间被序列化。</span></span>
<span class="line"><span style="color:#F6F6F4;">    store.$state.hasError </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> hasError</span></span>
<span class="line"><span style="color:#F6F6F4;">  }</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#7B7F8B;">// 我们需要将 ref 从 state 转移到 store</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#7B7F8B;">// 这样的话,两种方式：store.hasError 和 store.$state.hasError 都可以访问</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#7B7F8B;">// 并且共享的是同一个变量</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#7B7F8B;">// 查看 https://cn.vuejs.org/api/reactivity-utilities.html#toref</span></span>
<span class="line"><span style="color:#F6F6F4;">  store.hasError </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">toRef</span><span style="color:#F6F6F4;">(store.$state, </span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">hasError</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#7B7F8B;">// 在这种情况下，最好不要返回 \`hasError\`</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#7B7F8B;">// 因为它将被显示在 devtools 的 \`state\` 部分</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#7B7F8B;">// 如果我们返回它，devtools 将显示两次。</span></span>
<span class="line"><span style="color:#F6F6F4;">})</span></span>
<span class="line"></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#1E754F;">import</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">toRef</span><span style="color:#999999;">,</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">ref</span><span style="color:#393A34;"> </span><span style="color:#999999;">}</span><span style="color:#393A34;"> </span><span style="color:#1E754F;">from</span><span style="color:#393A34;"> </span><span style="color:#B56959AA;">&#39;</span><span style="color:#B56959;">vue</span><span style="color:#B56959AA;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B07D48;">pinia</span><span style="color:#999999;">.</span><span style="color:#59873A;">use</span><span style="color:#999999;">(({</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">store</span><span style="color:#393A34;"> </span><span style="color:#999999;">})</span><span style="color:#393A34;"> </span><span style="color:#999999;">=&gt;</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#999999;">  </span><span style="color:#A0ADA0;">// 为了正确地处理 SSR，我们需要确保我们没有重写任何一个 </span></span>
<span class="line"><span style="color:#999999;">  </span><span style="color:#A0ADA0;">// 现有的值</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#1E754F;">if</span><span style="color:#393A34;"> </span><span style="color:#999999;">(</span><span style="color:#AB5959;">!</span><span style="color:#998418;">Object</span><span style="color:#999999;">.</span><span style="color:#998418;">prototype</span><span style="color:#999999;">.</span><span style="color:#59873A;">hasOwnProperty</span><span style="color:#999999;">(</span><span style="color:#B07D48;">store</span><span style="color:#999999;">.</span><span style="color:#B07D48;">$state</span><span style="color:#999999;">,</span><span style="color:#393A34;"> </span><span style="color:#B56959AA;">&#39;</span><span style="color:#B56959;">hasError</span><span style="color:#B56959AA;">&#39;</span><span style="color:#999999;">))</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#999999;">    </span><span style="color:#A0ADA0;">// 在插件中定义 hasError，因此每个 store 都有各自的</span></span>
<span class="line"><span style="color:#999999;">    </span><span style="color:#A0ADA0;">// hasError 状态</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#AB5959;">const</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">hasError</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">=</span><span style="color:#393A34;"> </span><span style="color:#59873A;">ref</span><span style="color:#999999;">(</span><span style="color:#1E754F;">false</span><span style="color:#999999;">)</span></span>
<span class="line"><span style="color:#999999;">    </span><span style="color:#A0ADA0;">// 在 \`$state\` 上设置变量，允许它在 SSR 期间被序列化。</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#B07D48;">store</span><span style="color:#999999;">.</span><span style="color:#B07D48;">$state</span><span style="color:#999999;">.</span><span style="color:#B07D48;">hasError</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">=</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">hasError</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#999999;">}</span></span>
<span class="line"><span style="color:#999999;">  </span><span style="color:#A0ADA0;">// 我们需要将 ref 从 state 转移到 store</span></span>
<span class="line"><span style="color:#999999;">  </span><span style="color:#A0ADA0;">// 这样的话,两种方式：store.hasError 和 store.$state.hasError 都可以访问</span></span>
<span class="line"><span style="color:#999999;">  </span><span style="color:#A0ADA0;">// 并且共享的是同一个变量</span></span>
<span class="line"><span style="color:#999999;">  </span><span style="color:#A0ADA0;">// 查看 https://cn.vuejs.org/api/reactivity-utilities.html#toref</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#B07D48;">store</span><span style="color:#999999;">.</span><span style="color:#B07D48;">hasError</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">=</span><span style="color:#393A34;"> </span><span style="color:#59873A;">toRef</span><span style="color:#999999;">(</span><span style="color:#B07D48;">store</span><span style="color:#999999;">.</span><span style="color:#B07D48;">$state</span><span style="color:#999999;">,</span><span style="color:#393A34;"> </span><span style="color:#B56959AA;">&#39;</span><span style="color:#B56959;">hasError</span><span style="color:#B56959AA;">&#39;</span><span style="color:#999999;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#999999;">  </span><span style="color:#A0ADA0;">// 在这种情况下，最好不要返回 \`hasError\`</span></span>
<span class="line"><span style="color:#999999;">  </span><span style="color:#A0ADA0;">// 因为它将被显示在 devtools 的 \`state\` 部分</span></span>
<span class="line"><span style="color:#999999;">  </span><span style="color:#A0ADA0;">// 如果我们返回它，devtools 将显示两次。</span></span>
<span class="line"><span style="color:#999999;">})</span></span>
<span class="line"></span></code></pre></div><p>需要注意的是，在一个插件中， state 变更或添加(包括调用 <code>store.$patch()</code>)都是发生在 store 被激活之前，<strong>因此不会触发任何订阅函数</strong>。</p><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>如果你使用的是 <strong>Vue 2</strong>，Pinia 与 Vue 一样，受限于<a href="https://v2.cn.vuejs.org/v2/guide/reactivity.html#%E6%A3%80%E6%B5%8B%E5%8F%98%E5%8C%96%E7%9A%84%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9" target="_blank" rel="noreferrer">相同的响应式限制</a>。在创建新的 state 属性时,如 <code>secret</code> 和 <code>hasError</code>，你需要使用 <code>Vue.set()</code> (Vue 2.7) 或者 <code>@vue/composition-api</code> 的 <code>set()</code> (Vue &lt; 2.7)。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">import</span><span style="color:#F6F6F4;"> { set, toRef } </span><span style="color:#F286C4;">from</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">@vue/composition-api</span><span style="color:#DEE492;">&#39;</span></span>
<span class="line"><span style="color:#F6F6F4;">pinia.</span><span style="color:#62E884;">use</span><span style="color:#F6F6F4;">(({ </span><span style="color:#FFB86C;font-style:italic;">store</span><span style="color:#F6F6F4;"> }) </span><span style="color:#F286C4;">=&gt;</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (</span><span style="color:#F286C4;">!</span><span style="color:#97E1F1;font-style:italic;">Object</span><span style="color:#F6F6F4;">.prototype.</span><span style="color:#62E884;">hasOwnProperty</span><span style="color:#F6F6F4;">(store.$state, </span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">hello</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">)) {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">const</span><span style="color:#F6F6F4;"> secretRef </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">ref</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">secret</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">)</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">// 如果这些数据是要在 SSR 过程中使用的</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">// 你应该将其设置在 \`$state&#39; 属性上</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">// 这样它就会被序列化并在激活过程中被接收</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#62E884;">set</span><span style="color:#F6F6F4;">(store.$state, </span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">secret</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">, secretRef)</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">// 直接在 store 里设置，这样你就可以访问它了。</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">// 两种方式都可以：\`store.$state.secret\` / \`store.secret\`。</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#62E884;">set</span><span style="color:#F6F6F4;">(store, </span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">secret</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">, secretRef)</span></span>
<span class="line"><span style="color:#F6F6F4;">    store.secret </span><span style="color:#7B7F8B;">// &#39;secret&#39;</span></span>
<span class="line"><span style="color:#F6F6F4;">  }</span></span>
<span class="line"><span style="color:#F6F6F4;">})</span></span>
<span class="line"></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#1E754F;">import</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">set</span><span style="color:#999999;">,</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">toRef</span><span style="color:#393A34;"> </span><span style="color:#999999;">}</span><span style="color:#393A34;"> </span><span style="color:#1E754F;">from</span><span style="color:#393A34;"> </span><span style="color:#B56959AA;">&#39;</span><span style="color:#B56959;">@vue/composition-api</span><span style="color:#B56959AA;">&#39;</span></span>
<span class="line"><span style="color:#B07D48;">pinia</span><span style="color:#999999;">.</span><span style="color:#59873A;">use</span><span style="color:#999999;">(({</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">store</span><span style="color:#393A34;"> </span><span style="color:#999999;">})</span><span style="color:#393A34;"> </span><span style="color:#999999;">=&gt;</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#1E754F;">if</span><span style="color:#393A34;"> </span><span style="color:#999999;">(</span><span style="color:#AB5959;">!</span><span style="color:#998418;">Object</span><span style="color:#999999;">.</span><span style="color:#998418;">prototype</span><span style="color:#999999;">.</span><span style="color:#59873A;">hasOwnProperty</span><span style="color:#999999;">(</span><span style="color:#B07D48;">store</span><span style="color:#999999;">.</span><span style="color:#B07D48;">$state</span><span style="color:#999999;">,</span><span style="color:#393A34;"> </span><span style="color:#B56959AA;">&#39;</span><span style="color:#B56959;">hello</span><span style="color:#B56959AA;">&#39;</span><span style="color:#999999;">))</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#AB5959;">const</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">secretRef</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">=</span><span style="color:#393A34;"> </span><span style="color:#59873A;">ref</span><span style="color:#999999;">(</span><span style="color:#B56959AA;">&#39;</span><span style="color:#B56959;">secret</span><span style="color:#B56959AA;">&#39;</span><span style="color:#999999;">)</span></span>
<span class="line"><span style="color:#999999;">    </span><span style="color:#A0ADA0;">// 如果这些数据是要在 SSR 过程中使用的</span></span>
<span class="line"><span style="color:#999999;">    </span><span style="color:#A0ADA0;">// 你应该将其设置在 \`$state&#39; 属性上</span></span>
<span class="line"><span style="color:#999999;">    </span><span style="color:#A0ADA0;">// 这样它就会被序列化并在激活过程中被接收</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#59873A;">set</span><span style="color:#999999;">(</span><span style="color:#B07D48;">store</span><span style="color:#999999;">.</span><span style="color:#B07D48;">$state</span><span style="color:#999999;">,</span><span style="color:#393A34;"> </span><span style="color:#B56959AA;">&#39;</span><span style="color:#B56959;">secret</span><span style="color:#B56959AA;">&#39;</span><span style="color:#999999;">,</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">secretRef</span><span style="color:#999999;">)</span></span>
<span class="line"><span style="color:#999999;">    </span><span style="color:#A0ADA0;">// 直接在 store 里设置，这样你就可以访问它了。</span></span>
<span class="line"><span style="color:#999999;">    </span><span style="color:#A0ADA0;">// 两种方式都可以：\`store.$state.secret\` / \`store.secret\`。</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#59873A;">set</span><span style="color:#999999;">(</span><span style="color:#B07D48;">store</span><span style="color:#999999;">,</span><span style="color:#393A34;"> </span><span style="color:#B56959AA;">&#39;</span><span style="color:#B56959;">secret</span><span style="color:#B56959AA;">&#39;</span><span style="color:#999999;">,</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">secretRef</span><span style="color:#999999;">)</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#B07D48;">store</span><span style="color:#999999;">.</span><span style="color:#B07D48;">secret</span><span style="color:#393A34;"> </span><span style="color:#A0ADA0;">// &#39;secret&#39;</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#999999;">}</span></span>
<span class="line"><span style="color:#999999;">})</span></span>
<span class="line"></span></code></pre></div></div><h2 id="adding-new-external-properties" tabindex="-1">添加新的外部属性 <a class="header-anchor" href="#adding-new-external-properties" aria-hidden="true">#</a></h2><p>当添加外部属性、第三方库的类实例或非响应式的简单值时，你应该先用 <code>markRaw()</code> 来包装一下它，再将它传给 pinia。下面是一个在每个 store 中添加路由器的例子：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">import</span><span style="color:#F6F6F4;"> { markRaw } </span><span style="color:#F286C4;">from</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">vue</span><span style="color:#DEE492;">&#39;</span></span>
<span class="line"><span style="color:#7B7F8B;">// 根据你的路由器的位置来调整</span></span>
<span class="line"><span style="color:#F286C4;">import</span><span style="color:#F6F6F4;"> { router } </span><span style="color:#F286C4;">from</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">./router</span><span style="color:#DEE492;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">pinia.</span><span style="color:#62E884;">use</span><span style="color:#F6F6F4;">(({ </span><span style="color:#FFB86C;font-style:italic;">store</span><span style="color:#F6F6F4;"> }) </span><span style="color:#F286C4;">=&gt;</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">  store.router </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">markRaw</span><span style="color:#F6F6F4;">(router)</span></span>
<span class="line"><span style="color:#F6F6F4;">})</span></span>
<span class="line"></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#1E754F;">import</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">markRaw</span><span style="color:#393A34;"> </span><span style="color:#999999;">}</span><span style="color:#393A34;"> </span><span style="color:#1E754F;">from</span><span style="color:#393A34;"> </span><span style="color:#B56959AA;">&#39;</span><span style="color:#B56959;">vue</span><span style="color:#B56959AA;">&#39;</span></span>
<span class="line"><span style="color:#A0ADA0;">// 根据你的路由器的位置来调整</span></span>
<span class="line"><span style="color:#1E754F;">import</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">router</span><span style="color:#393A34;"> </span><span style="color:#999999;">}</span><span style="color:#393A34;"> </span><span style="color:#1E754F;">from</span><span style="color:#393A34;"> </span><span style="color:#B56959AA;">&#39;</span><span style="color:#B56959;">./router</span><span style="color:#B56959AA;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B07D48;">pinia</span><span style="color:#999999;">.</span><span style="color:#59873A;">use</span><span style="color:#999999;">(({</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">store</span><span style="color:#393A34;"> </span><span style="color:#999999;">})</span><span style="color:#393A34;"> </span><span style="color:#999999;">=&gt;</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#B07D48;">store</span><span style="color:#999999;">.</span><span style="color:#B07D48;">router</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">=</span><span style="color:#393A34;"> </span><span style="color:#59873A;">markRaw</span><span style="color:#999999;">(</span><span style="color:#B07D48;">router</span><span style="color:#999999;">)</span></span>
<span class="line"><span style="color:#999999;">})</span></span>
<span class="line"></span></code></pre></div><h2 id="calling-subscribe-inside-plugins" tabindex="-1">在插件中调用 <code>$subscribe</code> <a class="header-anchor" href="#calling-subscribe-inside-plugins" aria-hidden="true">#</a></h2><p>你也可以在插件中使用 <a href="./state.html#subscribing-to-the-state">store.$subscribe</a> 和 <a href="./actions.html#subscribing-to-actions">store.$onAction</a> 。</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F6F6F4;">pinia.</span><span style="color:#62E884;">use</span><span style="color:#F6F6F4;">(({ </span><span style="color:#FFB86C;font-style:italic;">store</span><span style="color:#F6F6F4;"> }) </span><span style="color:#F286C4;">=&gt;</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">  store.</span><span style="color:#62E884;">$subscribe</span><span style="color:#F6F6F4;">(() </span><span style="color:#F286C4;">=&gt;</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">// 响应 store 变化</span></span>
<span class="line"><span style="color:#F6F6F4;">  })</span></span>
<span class="line"><span style="color:#F6F6F4;">  store.</span><span style="color:#62E884;">$onAction</span><span style="color:#F6F6F4;">(() </span><span style="color:#F286C4;">=&gt;</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">// 响应 store actions</span></span>
<span class="line"><span style="color:#F6F6F4;">  })</span></span>
<span class="line"><span style="color:#F6F6F4;">})</span></span>
<span class="line"></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#B07D48;">pinia</span><span style="color:#999999;">.</span><span style="color:#59873A;">use</span><span style="color:#999999;">(({</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">store</span><span style="color:#393A34;"> </span><span style="color:#999999;">})</span><span style="color:#393A34;"> </span><span style="color:#999999;">=&gt;</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#B07D48;">store</span><span style="color:#999999;">.</span><span style="color:#59873A;">$subscribe</span><span style="color:#999999;">(()</span><span style="color:#393A34;"> </span><span style="color:#999999;">=&gt;</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#999999;">    </span><span style="color:#A0ADA0;">// 响应 store 变化</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#999999;">})</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#B07D48;">store</span><span style="color:#999999;">.</span><span style="color:#59873A;">$onAction</span><span style="color:#999999;">(()</span><span style="color:#393A34;"> </span><span style="color:#999999;">=&gt;</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#999999;">    </span><span style="color:#A0ADA0;">// 响应 store actions</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#999999;">})</span></span>
<span class="line"><span style="color:#999999;">})</span></span>
<span class="line"></span></code></pre></div><h2 id="adding-new-options" tabindex="-1">添加新的选项 <a class="header-anchor" href="#adding-new-options" aria-hidden="true">#</a></h2><p>在定义 store 时，可以创建新的选项，以便在插件中使用它们。例如，你可以创建一个 <code>debounce</code> 选项，允许你让任何 action 实现防抖。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#62E884;">defineStore</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">search</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">, {</span></span>
<span class="line"><span style="color:#F6F6F4;">  actions</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#62E884;">searchContacts</span><span style="color:#F6F6F4;">() {</span></span>
<span class="line"><span style="color:#F6F6F4;">      </span><span style="color:#7B7F8B;">// ...</span></span>
<span class="line"><span style="color:#F6F6F4;">    },</span></span>
<span class="line"><span style="color:#F6F6F4;">  },</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#7B7F8B;">// 这将在后面被一个插件读取</span></span>
<span class="line"><span style="color:#F6F6F4;">  debounce</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">// 让 action searchContacts 防抖 300ms</span></span>
<span class="line"><span style="color:#F6F6F4;">    searchContacts</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">300</span><span style="color:#F6F6F4;">,</span></span>
<span class="line"><span style="color:#F6F6F4;">  },</span></span>
<span class="line"><span style="color:#F6F6F4;">})</span></span>
<span class="line"></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#59873A;">defineStore</span><span style="color:#999999;">(</span><span style="color:#B56959AA;">&#39;</span><span style="color:#B56959;">search</span><span style="color:#B56959AA;">&#39;</span><span style="color:#999999;">,</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#998418;">actions</span><span style="color:#999999;">:</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#59873A;">searchContacts</span><span style="color:#999999;">()</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#999999;">      </span><span style="color:#A0ADA0;">// ...</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#999999;">},</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#999999;">},</span></span>
<span class="line"></span>
<span class="line"><span style="color:#999999;">  </span><span style="color:#A0ADA0;">// 这将在后面被一个插件读取</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#998418;">debounce</span><span style="color:#999999;">:</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#999999;">    </span><span style="color:#A0ADA0;">// 让 action searchContacts 防抖 300ms</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#998418;">searchContacts</span><span style="color:#999999;">:</span><span style="color:#393A34;"> </span><span style="color:#2F798A;">300</span><span style="color:#999999;">,</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#999999;">},</span></span>
<span class="line"><span style="color:#999999;">})</span></span>
<span class="line"></span></code></pre></div><p>然后，该插件可以读取该选项来包装 action，并替换原始 action：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;">// 使用任意防抖库</span></span>
<span class="line"><span style="color:#F286C4;">import</span><span style="color:#F6F6F4;"> debounce </span><span style="color:#F286C4;">from</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">lodash/debounce</span><span style="color:#DEE492;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">pinia.</span><span style="color:#62E884;">use</span><span style="color:#F6F6F4;">(({ </span><span style="color:#FFB86C;font-style:italic;">options</span><span style="color:#F6F6F4;">, </span><span style="color:#FFB86C;font-style:italic;">store</span><span style="color:#F6F6F4;"> }) </span><span style="color:#F286C4;">=&gt;</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (options.debounce) {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">// 我们正在用新的 action 来覆盖这些 action</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> Object.</span><span style="color:#62E884;">keys</span><span style="color:#F6F6F4;">(options.debounce).</span><span style="color:#62E884;">reduce</span><span style="color:#F6F6F4;">((</span><span style="color:#FFB86C;font-style:italic;">debouncedActions</span><span style="color:#F6F6F4;">, </span><span style="color:#FFB86C;font-style:italic;">action</span><span style="color:#F6F6F4;">) </span><span style="color:#F286C4;">=&gt;</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">      debouncedActions[action] </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">debounce</span><span style="color:#F6F6F4;">(</span></span>
<span class="line"><span style="color:#F6F6F4;">        store[action],</span></span>
<span class="line"><span style="color:#F6F6F4;">        options.debounce[action]</span></span>
<span class="line"><span style="color:#F6F6F4;">      )</span></span>
<span class="line"><span style="color:#F6F6F4;">      </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> debouncedActions</span></span>
<span class="line"><span style="color:#F6F6F4;">    }, {})</span></span>
<span class="line"><span style="color:#F6F6F4;">  }</span></span>
<span class="line"><span style="color:#F6F6F4;">})</span></span>
<span class="line"></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#A0ADA0;">// 使用任意防抖库</span></span>
<span class="line"><span style="color:#1E754F;">import</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">debounce</span><span style="color:#393A34;"> </span><span style="color:#1E754F;">from</span><span style="color:#393A34;"> </span><span style="color:#B56959AA;">&#39;</span><span style="color:#B56959;">lodash/debounce</span><span style="color:#B56959AA;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B07D48;">pinia</span><span style="color:#999999;">.</span><span style="color:#59873A;">use</span><span style="color:#999999;">(({</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">options</span><span style="color:#999999;">,</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">store</span><span style="color:#393A34;"> </span><span style="color:#999999;">})</span><span style="color:#393A34;"> </span><span style="color:#999999;">=&gt;</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#1E754F;">if</span><span style="color:#393A34;"> </span><span style="color:#999999;">(</span><span style="color:#B07D48;">options</span><span style="color:#999999;">.</span><span style="color:#B07D48;">debounce</span><span style="color:#999999;">)</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#999999;">    </span><span style="color:#A0ADA0;">// 我们正在用新的 action 来覆盖这些 action</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#1E754F;">return</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">Object</span><span style="color:#999999;">.</span><span style="color:#59873A;">keys</span><span style="color:#999999;">(</span><span style="color:#B07D48;">options</span><span style="color:#999999;">.</span><span style="color:#B07D48;">debounce</span><span style="color:#999999;">).</span><span style="color:#59873A;">reduce</span><span style="color:#999999;">((</span><span style="color:#B07D48;">debouncedActions</span><span style="color:#999999;">,</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">action</span><span style="color:#999999;">)</span><span style="color:#393A34;"> </span><span style="color:#999999;">=&gt;</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">      </span><span style="color:#B07D48;">debouncedActions</span><span style="color:#999999;">[</span><span style="color:#B07D48;">action</span><span style="color:#999999;">]</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">=</span><span style="color:#393A34;"> </span><span style="color:#59873A;">debounce</span><span style="color:#999999;">(</span></span>
<span class="line"><span style="color:#393A34;">        </span><span style="color:#B07D48;">store</span><span style="color:#999999;">[</span><span style="color:#B07D48;">action</span><span style="color:#999999;">],</span></span>
<span class="line"><span style="color:#393A34;">        </span><span style="color:#B07D48;">options</span><span style="color:#999999;">.</span><span style="color:#B07D48;">debounce</span><span style="color:#999999;">[</span><span style="color:#B07D48;">action</span><span style="color:#999999;">]</span></span>
<span class="line"><span style="color:#393A34;">      </span><span style="color:#999999;">)</span></span>
<span class="line"><span style="color:#393A34;">      </span><span style="color:#1E754F;">return</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">debouncedActions</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#999999;">},</span><span style="color:#393A34;"> </span><span style="color:#999999;">{})</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#999999;">}</span></span>
<span class="line"><span style="color:#999999;">})</span></span>
<span class="line"></span></code></pre></div><p>注意，在使用 setup 语法时，自定义选项作为第 3 个参数传递：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#62E884;">defineStore</span><span style="color:#F6F6F4;">(</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">search</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">,</span></span>
<span class="line"><span style="color:#F6F6F4;">  () </span><span style="color:#F286C4;">=&gt;</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">// ...</span></span>
<span class="line"><span style="color:#F6F6F4;">  },</span></span>
<span class="line"><span style="color:#F6F6F4;">  {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">// 这将在后面被一个插件读取</span></span>
<span class="line"><span style="color:#F6F6F4;">    debounce</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">      </span><span style="color:#7B7F8B;">// 让 action searchContacts 防抖 300ms</span></span>
<span class="line"><span style="color:#F6F6F4;">      searchContacts</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">300</span><span style="color:#F6F6F4;">,</span></span>
<span class="line"><span style="color:#F6F6F4;">    },</span></span>
<span class="line"><span style="color:#F6F6F4;">  }</span></span>
<span class="line"><span style="color:#F6F6F4;">)</span></span>
<span class="line"></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#59873A;">defineStore</span><span style="color:#999999;">(</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#B56959AA;">&#39;</span><span style="color:#B56959;">search</span><span style="color:#B56959AA;">&#39;</span><span style="color:#999999;">,</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#999999;">()</span><span style="color:#393A34;"> </span><span style="color:#999999;">=&gt;</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#999999;">    </span><span style="color:#A0ADA0;">// ...</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#999999;">},</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#999999;">    </span><span style="color:#A0ADA0;">// 这将在后面被一个插件读取</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#998418;">debounce</span><span style="color:#999999;">:</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#999999;">      </span><span style="color:#A0ADA0;">// 让 action searchContacts 防抖 300ms</span></span>
<span class="line"><span style="color:#393A34;">      </span><span style="color:#998418;">searchContacts</span><span style="color:#999999;">:</span><span style="color:#393A34;"> </span><span style="color:#2F798A;">300</span><span style="color:#999999;">,</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#999999;">},</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#999999;">}</span></span>
<span class="line"><span style="color:#999999;">)</span></span>
<span class="line"></span></code></pre></div><h2 id="typescript" tabindex="-1">TypeScript <a class="header-anchor" href="#typescript" aria-hidden="true">#</a></h2><p>上述一切功能都有类型支持，所以你永远不需要使用 <code>any</code> 或 <code>@ts-ignore</code>。</p><h3 id="typing-plugins" tabindex="-1">标注插件类型 <a class="header-anchor" href="#typing-plugins" aria-hidden="true">#</a></h3><p>一个 Pinia 插件可按如下方式实现类型标注：</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">import</span><span style="color:#F6F6F4;"> { PiniaPluginContext } </span><span style="color:#F286C4;">from</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">pinia</span><span style="color:#DEE492;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F286C4;">export</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">function</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">myPiniaPlugin</span><span style="color:#F6F6F4;">(</span><span style="color:#FFB86C;font-style:italic;">context</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">PiniaPluginContext</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#7B7F8B;">// ...</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span>
<span class="line"></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#1E754F;">import</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">PiniaPluginContext</span><span style="color:#393A34;"> </span><span style="color:#999999;">}</span><span style="color:#393A34;"> </span><span style="color:#1E754F;">from</span><span style="color:#393A34;"> </span><span style="color:#B56959AA;">&#39;</span><span style="color:#B56959;">pinia</span><span style="color:#B56959AA;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#1E754F;">export</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">function</span><span style="color:#393A34;"> </span><span style="color:#59873A;">myPiniaPlugin</span><span style="color:#999999;">(</span><span style="color:#B07D48;">context</span><span style="color:#999999;">: </span><span style="color:#2E808F;">PiniaPluginContext</span><span style="color:#999999;">)</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#999999;">  </span><span style="color:#A0ADA0;">// ...</span></span>
<span class="line"><span style="color:#999999;">}</span></span>
<span class="line"></span></code></pre></div><h3 id="typing-new-store-properties" tabindex="-1">为新的 store 属性添加类型 <a class="header-anchor" href="#typing-new-store-properties" aria-hidden="true">#</a></h3><p>当在 store 中添加新的属性时，你也应该扩展 <code>PiniaCustomProperties</code> 接口。</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">import</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">pinia</span><span style="color:#DEE492;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F286C4;">declare</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">module</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">pinia</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#F286C4;">export</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">interface</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">PiniaCustomProperties</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">// 通过使用一个 setter，我们可以允许字符串和引用。</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">set</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">hello</span><span style="color:#F6F6F4;">(</span><span style="color:#FFB86C;font-style:italic;">value</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">string</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">|</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">Ref</span><span style="color:#F6F6F4;">&lt;</span><span style="color:#97E1F1;font-style:italic;">string</span><span style="color:#F6F6F4;">&gt;)</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">get</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">hello</span><span style="color:#F6F6F4;">()</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">string</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">// 你也可以定义更简单的值</span></span>
<span class="line"><span style="color:#F6F6F4;">    simpleNumber</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">number</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">// 添加路由(#adding-new-external-properties)</span></span>
<span class="line"><span style="color:#F6F6F4;">    router</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">Router</span></span>
<span class="line"><span style="color:#F6F6F4;">  }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span>
<span class="line"></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#1E754F;">import</span><span style="color:#393A34;"> </span><span style="color:#B56959AA;">&#39;</span><span style="color:#B56959;">pinia</span><span style="color:#B56959AA;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#AB5959;">declare</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">module</span><span style="color:#393A34;"> </span><span style="color:#B56959AA;">&#39;</span><span style="color:#B56959;">pinia</span><span style="color:#B56959AA;">&#39;</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#1E754F;">export</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">interface</span><span style="color:#393A34;"> </span><span style="color:#2E808F;">PiniaCustomProperties</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#999999;">    </span><span style="color:#A0ADA0;">// 通过使用一个 setter，我们可以允许字符串和引用。</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#AB5959;">set</span><span style="color:#393A34;"> </span><span style="color:#59873A;">hello</span><span style="color:#999999;">(</span><span style="color:#B07D48;">value</span><span style="color:#999999;">: </span><span style="color:#2E808F;">string</span><span style="color:#999999;"> | </span><span style="color:#2E808F;">Ref</span><span style="color:#999999;">&lt;</span><span style="color:#2E808F;">string</span><span style="color:#999999;">&gt;)</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#AB5959;">get</span><span style="color:#393A34;"> </span><span style="color:#59873A;">hello</span><span style="color:#999999;">():</span><span style="color:#393A34;"> </span><span style="color:#2E808F;">string</span></span>
<span class="line"></span>
<span class="line"><span style="color:#999999;">    </span><span style="color:#A0ADA0;">// 你也可以定义更简单的值</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#B07D48;">simpleNumber</span><span style="color:#999999;">: </span><span style="color:#2E808F;">number</span></span>
<span class="line"></span>
<span class="line"><span style="color:#999999;">    </span><span style="color:#A0ADA0;">// 添加路由(#adding-new-external-properties)</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#B07D48;">router</span><span style="color:#999999;">: </span><span style="color:#2E808F;">Router</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#999999;">}</span></span>
<span class="line"><span style="color:#999999;">}</span></span>
<span class="line"></span></code></pre></div><p>然后，就可以安全地写入和读取它了：</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F6F6F4;">pinia.</span><span style="color:#62E884;">use</span><span style="color:#F6F6F4;">(({ </span><span style="color:#FFB86C;font-style:italic;">store</span><span style="color:#F6F6F4;"> }) </span><span style="color:#F286C4;">=&gt;</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">  store.hello </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">Hola</span><span style="color:#DEE492;">&#39;</span></span>
<span class="line"><span style="color:#F6F6F4;">  store.hello </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">ref</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">Hola</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">  store.simpleNumber </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> Math.</span><span style="color:#62E884;">random</span><span style="color:#F6F6F4;">()</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#7B7F8B;">// @ts-expect-error: we haven&#39;t typed this correctly</span></span>
<span class="line"><span style="color:#F6F6F4;">  store.simpleNumber </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">ref</span><span style="color:#F6F6F4;">(Math.</span><span style="color:#62E884;">random</span><span style="color:#F6F6F4;">())</span></span>
<span class="line"><span style="color:#F6F6F4;">})</span></span>
<span class="line"></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#B07D48;">pinia</span><span style="color:#999999;">.</span><span style="color:#59873A;">use</span><span style="color:#999999;">(({</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">store</span><span style="color:#393A34;"> </span><span style="color:#999999;">})</span><span style="color:#393A34;"> </span><span style="color:#999999;">=&gt;</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#B07D48;">store</span><span style="color:#999999;">.</span><span style="color:#B07D48;">hello</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">=</span><span style="color:#393A34;"> </span><span style="color:#B56959AA;">&#39;</span><span style="color:#B56959;">Hola</span><span style="color:#B56959AA;">&#39;</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#B07D48;">store</span><span style="color:#999999;">.</span><span style="color:#B07D48;">hello</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">=</span><span style="color:#393A34;"> </span><span style="color:#59873A;">ref</span><span style="color:#999999;">(</span><span style="color:#B56959AA;">&#39;</span><span style="color:#B56959;">Hola</span><span style="color:#B56959AA;">&#39;</span><span style="color:#999999;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#B07D48;">store</span><span style="color:#999999;">.</span><span style="color:#B07D48;">simpleNumber</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">=</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">Math</span><span style="color:#999999;">.</span><span style="color:#59873A;">random</span><span style="color:#999999;">()</span></span>
<span class="line"><span style="color:#999999;">  </span><span style="color:#A0ADA0;">// @ts-expect-error: we haven&#39;t typed this correctly</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#B07D48;">store</span><span style="color:#999999;">.</span><span style="color:#B07D48;">simpleNumber</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">=</span><span style="color:#393A34;"> </span><span style="color:#59873A;">ref</span><span style="color:#999999;">(</span><span style="color:#B07D48;">Math</span><span style="color:#999999;">.</span><span style="color:#59873A;">random</span><span style="color:#999999;">())</span></span>
<span class="line"><span style="color:#999999;">})</span></span>
<span class="line"></span></code></pre></div><p><code>PiniaCustomProperties</code> 是一个通用类型，允许你引用 store 的属性。思考一下这个例子，如果把初始选项复制成 <code>$options</code>(这只对 option store 有效)，如何标注类型：</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F6F6F4;">pinia.</span><span style="color:#62E884;">use</span><span style="color:#F6F6F4;">(({ </span><span style="color:#FFB86C;font-style:italic;">options</span><span style="color:#F6F6F4;"> }) </span><span style="color:#F286C4;">=&gt;</span><span style="color:#F6F6F4;"> ({ $options</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> options }))</span></span>
<span class="line"></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#B07D48;">pinia</span><span style="color:#999999;">.</span><span style="color:#59873A;">use</span><span style="color:#999999;">(({</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">options</span><span style="color:#393A34;"> </span><span style="color:#999999;">})</span><span style="color:#393A34;"> </span><span style="color:#999999;">=&gt;</span><span style="color:#393A34;"> </span><span style="color:#999999;">({ </span><span style="color:#998418;">$options</span><span style="color:#999999;">: </span><span style="color:#B07D48;">options</span><span style="color:#999999;"> }))</span></span>
<span class="line"></span></code></pre></div><p>我们可以通过使用 <code>PiniaCustomProperties</code> 的4种通用类型来标注类型：</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">import</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">pinia</span><span style="color:#DEE492;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F286C4;">declare</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">module</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">pinia</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#F286C4;">export</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">interface</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">PiniaCustomProperties</span><span style="color:#F6F6F4;">&lt;</span><span style="color:#FFB86C;font-style:italic;">Id</span><span style="color:#F6F6F4;">, </span><span style="color:#FFB86C;font-style:italic;">S</span><span style="color:#F6F6F4;">, </span><span style="color:#FFB86C;font-style:italic;">G</span><span style="color:#F6F6F4;">, </span><span style="color:#FFB86C;font-style:italic;">A</span><span style="color:#F6F6F4;">&gt; {</span></span>
<span class="line"><span style="color:#F6F6F4;">    $options</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">      id</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">Id</span></span>
<span class="line"><span style="color:#F6F6F4;">      </span><span style="color:#62E884;">state</span><span style="color:#F286C4;">?:</span><span style="color:#F6F6F4;"> () </span><span style="color:#F286C4;">=&gt;</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">S</span></span>
<span class="line"><span style="color:#F6F6F4;">      getters</span><span style="color:#F286C4;">?:</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">G</span></span>
<span class="line"><span style="color:#F6F6F4;">      actions</span><span style="color:#F286C4;">?:</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">A</span></span>
<span class="line"><span style="color:#F6F6F4;">    }</span></span>
<span class="line"><span style="color:#F6F6F4;">  }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span>
<span class="line"></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#1E754F;">import</span><span style="color:#393A34;"> </span><span style="color:#B56959AA;">&#39;</span><span style="color:#B56959;">pinia</span><span style="color:#B56959AA;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#AB5959;">declare</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">module</span><span style="color:#393A34;"> </span><span style="color:#B56959AA;">&#39;</span><span style="color:#B56959;">pinia</span><span style="color:#B56959AA;">&#39;</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#1E754F;">export</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">interface</span><span style="color:#393A34;"> </span><span style="color:#2E808F;">PiniaCustomProperties</span><span style="color:#999999;">&lt;</span><span style="color:#2E808F;">Id</span><span style="color:#999999;">,</span><span style="color:#393A34;"> </span><span style="color:#2E808F;">S</span><span style="color:#999999;">,</span><span style="color:#393A34;"> </span><span style="color:#2E808F;">G</span><span style="color:#999999;">,</span><span style="color:#393A34;"> </span><span style="color:#2E808F;">A</span><span style="color:#999999;">&gt;</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#B07D48;">$options</span><span style="color:#999999;">: {</span></span>
<span class="line"><span style="color:#999999;">      </span><span style="color:#B07D48;">id</span><span style="color:#999999;">: </span><span style="color:#2E808F;">Id</span></span>
<span class="line"><span style="color:#999999;">      </span><span style="color:#59873A;">state</span><span style="color:#AB5959;">?</span><span style="color:#999999;">: () =&gt; </span><span style="color:#2E808F;">S</span></span>
<span class="line"><span style="color:#999999;">      </span><span style="color:#B07D48;">getters</span><span style="color:#AB5959;">?</span><span style="color:#999999;">: </span><span style="color:#2E808F;">G</span></span>
<span class="line"><span style="color:#999999;">      </span><span style="color:#B07D48;">actions</span><span style="color:#AB5959;">?</span><span style="color:#999999;">: </span><span style="color:#2E808F;">A</span></span>
<span class="line"><span style="color:#999999;">    }</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#999999;">}</span></span>
<span class="line"><span style="color:#999999;">}</span></span>
<span class="line"></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>当在泛型中扩展类型时，它们的名字必须<strong>与源代码中完全一样</strong>。<code>Id</code> 不能被命名为 <code>id</code> 或 <code>I</code> ，<code>S</code> 不能被命名为 <code>State</code>。下面是每个字母代表的含义：</p><ul><li>S: State</li><li>G: Getters</li><li>A: Actions</li><li>SS: Setup Store / Store</li></ul></div><h3 id="typing-new-state" tabindex="-1">为新的 state 添加类型 <a class="header-anchor" href="#typing-new-state" aria-hidden="true">#</a></h3><p>当添加新的 state 属性(包括 <code>store</code> 和 <code>store.$state</code> )时，你需要将类型添加到 <code>PiniaCustomStateProperties</code> 中。与 <code>PiniaCustomProperties</code> 不同的是，它只接收 <code>State</code> 泛型：</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">import</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">pinia</span><span style="color:#DEE492;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F286C4;">declare</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">module</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">pinia</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#F286C4;">export</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">interface</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">PiniaCustomStateProperties</span><span style="color:#F6F6F4;">&lt;</span><span style="color:#FFB86C;font-style:italic;">S</span><span style="color:#F6F6F4;">&gt; {</span></span>
<span class="line"><span style="color:#F6F6F4;">    hello</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">string</span></span>
<span class="line"><span style="color:#F6F6F4;">  }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span>
<span class="line"></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#1E754F;">import</span><span style="color:#393A34;"> </span><span style="color:#B56959AA;">&#39;</span><span style="color:#B56959;">pinia</span><span style="color:#B56959AA;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#AB5959;">declare</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">module</span><span style="color:#393A34;"> </span><span style="color:#B56959AA;">&#39;</span><span style="color:#B56959;">pinia</span><span style="color:#B56959AA;">&#39;</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#1E754F;">export</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">interface</span><span style="color:#393A34;"> </span><span style="color:#2E808F;">PiniaCustomStateProperties</span><span style="color:#999999;">&lt;</span><span style="color:#2E808F;">S</span><span style="color:#999999;">&gt;</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#B07D48;">hello</span><span style="color:#999999;">: </span><span style="color:#2E808F;">string</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#999999;">}</span></span>
<span class="line"><span style="color:#999999;">}</span></span>
<span class="line"></span></code></pre></div><h3 id="typing-new-creation-options" tabindex="-1">为新的定义选项添加类型 <a class="header-anchor" href="#typing-new-creation-options" aria-hidden="true">#</a></h3><p>当为 <code>defineStore()</code> 创建新选项时，你应该扩展 <code>DefineStoreOptionsBase</code>。与 <code>PiniaCustomProperties</code> 不同的是，它只暴露了两个泛型：State 和 Store 类型，允许你限制定义选项的可用类型。例如，你可以使用 action 的名称：</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">import</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">pinia</span><span style="color:#DEE492;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F286C4;">declare</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">module</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">pinia</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#F286C4;">export</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">interface</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">DefineStoreOptionsBase</span><span style="color:#F6F6F4;">&lt;</span><span style="color:#FFB86C;font-style:italic;">S</span><span style="color:#F6F6F4;">, </span><span style="color:#FFB86C;font-style:italic;">Store</span><span style="color:#F6F6F4;">&gt; {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">// 任意 action 都允许定义一个防抖的毫秒数</span></span>
<span class="line"><span style="color:#F6F6F4;">    debounce</span><span style="color:#F286C4;">?:</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">Partial</span><span style="color:#F6F6F4;">&lt;</span><span style="color:#FFB86C;font-style:italic;">Record</span><span style="color:#F6F6F4;">&lt;</span><span style="color:#F286C4;">keyof</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">StoreActions</span><span style="color:#F6F6F4;">&lt;</span><span style="color:#FFB86C;font-style:italic;">Store</span><span style="color:#F6F6F4;">&gt;, </span><span style="color:#97E1F1;font-style:italic;">number</span><span style="color:#F6F6F4;">&gt;&gt;</span></span>
<span class="line"><span style="color:#F6F6F4;">  }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span>
<span class="line"></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#1E754F;">import</span><span style="color:#393A34;"> </span><span style="color:#B56959AA;">&#39;</span><span style="color:#B56959;">pinia</span><span style="color:#B56959AA;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#AB5959;">declare</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">module</span><span style="color:#393A34;"> </span><span style="color:#B56959AA;">&#39;</span><span style="color:#B56959;">pinia</span><span style="color:#B56959AA;">&#39;</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#1E754F;">export</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">interface</span><span style="color:#393A34;"> </span><span style="color:#2E808F;">DefineStoreOptionsBase</span><span style="color:#999999;">&lt;</span><span style="color:#2E808F;">S</span><span style="color:#999999;">,</span><span style="color:#393A34;"> </span><span style="color:#2E808F;">Store</span><span style="color:#999999;">&gt;</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#999999;">    </span><span style="color:#A0ADA0;">// 任意 action 都允许定义一个防抖的毫秒数</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#B07D48;">debounce</span><span style="color:#AB5959;">?</span><span style="color:#999999;">: </span><span style="color:#2E808F;">Partial</span><span style="color:#999999;">&lt;</span><span style="color:#2E808F;">Record</span><span style="color:#999999;">&lt;</span><span style="color:#AB5959;">keyof</span><span style="color:#999999;"> </span><span style="color:#2E808F;">StoreActions</span><span style="color:#999999;">&lt;</span><span style="color:#2E808F;">Store</span><span style="color:#999999;">&gt;, </span><span style="color:#2E808F;">number</span><span style="color:#999999;">&gt;&gt;</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#999999;">}</span></span>
<span class="line"><span style="color:#999999;">}</span></span>
<span class="line"></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>还有一个可以从一个 store 类型中提取 <em>getter</em> 的 <code>StoreGetters</code> 类型。你也可以且<strong>只可以</strong>通过扩展 <code>DefineStoreOptions</code> 或 <code>DefineSetupStoreOptions</code> 类型来扩展 <em>setup store</em> 或 <em>option store</em> 的选项。</p></div><h2 id="nuxt-js" tabindex="-1">Nuxt.js <a class="header-anchor" href="#nuxt-js" aria-hidden="true">#</a></h2><p>当<a href="./../ssr/nuxt.html">在 Nuxt 中使用 pinia</a> 时，你必须先创建一个 <a href="https://nuxt.com/docs/guide/directory-structure/plugins" target="_blank" rel="noreferrer">Nuxt 插件</a>。这样你才能访问到 <code>pinia</code> 实例：</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;">// plugins/myPiniaPlugin.js</span></span>
<span class="line"><span style="color:#F286C4;">import</span><span style="color:#F6F6F4;"> { PiniaPluginContext } </span><span style="color:#F286C4;">from</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">pinia</span><span style="color:#DEE492;">&#39;</span></span>
<span class="line"><span style="color:#F286C4;">import</span><span style="color:#F6F6F4;"> { Plugin } </span><span style="color:#F286C4;">from</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">@nuxt/types</span><span style="color:#DEE492;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F286C4;">function</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">MyPiniaPlugin</span><span style="color:#F6F6F4;">({ </span><span style="color:#FFB86C;font-style:italic;">store</span><span style="color:#F6F6F4;"> }</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">PiniaPluginContext</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">  store.</span><span style="color:#62E884;">$subscribe</span><span style="color:#F6F6F4;">((</span><span style="color:#FFB86C;font-style:italic;">mutation</span><span style="color:#F6F6F4;">) </span><span style="color:#F286C4;">=&gt;</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">// 响应 store 变更</span></span>
<span class="line"><span style="color:#F6F6F4;">    console.</span><span style="color:#62E884;">log</span><span style="color:#F6F6F4;">(</span><span style="color:#E7EE98;">\`[🍍 </span><span style="color:#F286C4;">\${</span><span style="color:#F6F6F4;">mutation.storeId</span><span style="color:#F286C4;">}</span><span style="color:#E7EE98;">]: </span><span style="color:#F286C4;">\${</span><span style="color:#F6F6F4;">mutation.type</span><span style="color:#F286C4;">}</span><span style="color:#E7EE98;">.\`</span><span style="color:#F6F6F4;">)</span></span>
<span class="line"><span style="color:#F6F6F4;">  })</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#7B7F8B;">// 请注意，如果你使用的是 TS，则必须添加类型。</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> { creationTime</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">Date</span><span style="color:#F6F6F4;">() }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F286C4;">const</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">myPlugin</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#97E1F1;font-style:italic;">Plugin</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> ({ </span><span style="color:#FFB86C;font-style:italic;">$pinia</span><span style="color:#F6F6F4;"> }) </span><span style="color:#F286C4;">=&gt;</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">  $pinia.</span><span style="color:#62E884;">use</span><span style="color:#F6F6F4;">(MyPiniaPlugin)</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F286C4;">export</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">default</span><span style="color:#F6F6F4;"> myPlugin</span></span>
<span class="line"></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#A0ADA0;">// plugins/myPiniaPlugin.js</span></span>
<span class="line"><span style="color:#1E754F;">import</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">PiniaPluginContext</span><span style="color:#393A34;"> </span><span style="color:#999999;">}</span><span style="color:#393A34;"> </span><span style="color:#1E754F;">from</span><span style="color:#393A34;"> </span><span style="color:#B56959AA;">&#39;</span><span style="color:#B56959;">pinia</span><span style="color:#B56959AA;">&#39;</span></span>
<span class="line"><span style="color:#1E754F;">import</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">Plugin</span><span style="color:#393A34;"> </span><span style="color:#999999;">}</span><span style="color:#393A34;"> </span><span style="color:#1E754F;">from</span><span style="color:#393A34;"> </span><span style="color:#B56959AA;">&#39;</span><span style="color:#B56959;">@nuxt/types</span><span style="color:#B56959AA;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#AB5959;">function</span><span style="color:#393A34;"> </span><span style="color:#59873A;">MyPiniaPlugin</span><span style="color:#999999;">({</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">store</span><span style="color:#393A34;"> </span><span style="color:#999999;">}: </span><span style="color:#2E808F;">PiniaPluginContext</span><span style="color:#999999;">)</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#B07D48;">store</span><span style="color:#999999;">.</span><span style="color:#59873A;">$subscribe</span><span style="color:#999999;">((</span><span style="color:#B07D48;">mutation</span><span style="color:#999999;">)</span><span style="color:#393A34;"> </span><span style="color:#999999;">=&gt;</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#999999;">    </span><span style="color:#A0ADA0;">// 响应 store 变更</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#B07D48;">console</span><span style="color:#999999;">.</span><span style="color:#59873A;">log</span><span style="color:#999999;">(</span><span style="color:#B56959AA;">\`</span><span style="color:#B56959;">[🍍 </span><span style="color:#999999;">\${</span><span style="color:#B56959;">mutation</span><span style="color:#999999;">.</span><span style="color:#B56959;">storeId</span><span style="color:#999999;">}</span><span style="color:#B56959;">]: </span><span style="color:#999999;">\${</span><span style="color:#B56959;">mutation</span><span style="color:#999999;">.</span><span style="color:#B56959;">type</span><span style="color:#999999;">}</span><span style="color:#B56959;">.</span><span style="color:#B56959AA;">\`</span><span style="color:#999999;">)</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#999999;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#999999;">  </span><span style="color:#A0ADA0;">// 请注意，如果你使用的是 TS，则必须添加类型。</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#1E754F;">return</span><span style="color:#393A34;"> </span><span style="color:#999999;">{ </span><span style="color:#998418;">creationTime</span><span style="color:#999999;">: </span><span style="color:#AB5959;">new</span><span style="color:#999999;"> </span><span style="color:#59873A;">Date</span><span style="color:#999999;">() }</span></span>
<span class="line"><span style="color:#999999;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#AB5959;">const </span><span style="color:#59873A;">myPlugin</span><span style="color:#999999;">: </span><span style="color:#2E808F;">Plugin</span><span style="color:#999999;"> </span><span style="color:#AB5959;">= </span><span style="color:#999999;">({</span><span style="color:#AB5959;"> </span><span style="color:#B07D48;">$pinia</span><span style="color:#AB5959;"> </span><span style="color:#999999;">})</span><span style="color:#AB5959;"> </span><span style="color:#999999;">=&gt;</span><span style="color:#AB5959;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#AB5959;">  </span><span style="color:#B07D48;">$pinia</span><span style="color:#999999;">.</span><span style="color:#59873A;">use</span><span style="color:#999999;">(</span><span style="color:#B07D48;">MyPiniaPlugin</span><span style="color:#999999;">)</span></span>
<span class="line"><span style="color:#999999;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#1E754F;">export</span><span style="color:#393A34;"> </span><span style="color:#1E754F;">default</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">myPlugin</span></span>
<span class="line"></span></code></pre></div><p>注意上面的例子使用的是 TypeScript。如果你使用的是 <code>.js</code> 文件，你必须删除类型标注 <code>PiniaPluginContext</code> 和 <code>Plugin</code> 以及它们的导入语句。</p>`,68),e=[o];function t(c,r,y,F,i,A){return n(),a("div",null,e)}const E=s(p,[["render",t]]);export{B as __pageData,E as default};
