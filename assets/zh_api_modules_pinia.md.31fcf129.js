import{_ as e,o as t,c as a,a as s}from"./app.09b4d0c2.js";const g=JSON.parse('{"title":"模块：pinia","description":"","frontmatter":{"sidebar":"auto","editLinks":false,"sidebarDepth":3},"headers":[{"level":2,"title":"枚举","slug":"enumerations","link":"#enumerations","children":[]},{"level":2,"title":"接口","slug":"interfaces","link":"#interfaces","children":[]},{"level":2,"title":"类型别名","slug":"type-aliases","link":"#type-aliases","children":[{"level":3,"title":"PiniaStorePlugin","slug":"piniastoreplugin","link":"#piniastoreplugin","children":[]},{"level":3,"title":"StateTree","slug":"statetree","link":"#statetree","children":[]},{"level":3,"title":"Store","slug":"store","link":"#store","children":[]},{"level":3,"title":"StoreActions","slug":"storeactions","link":"#storeactions","children":[]},{"level":3,"title":"StoreGeneric","slug":"storegeneric","link":"#storegeneric","children":[]},{"level":3,"title":"StoreGetters","slug":"storegetters","link":"#storegetters","children":[]},{"level":3,"title":"StoreOnActionListener","slug":"storeonactionlistener","link":"#storeonactionlistener","children":[]},{"level":3,"title":"StoreOnActionListenerContext","slug":"storeonactionlistenercontext","link":"#storeonactionlistenercontext","children":[]},{"level":3,"title":"StoreState","slug":"storestate","link":"#storestate","children":[]},{"level":3,"title":"SubscriptionCallback","slug":"subscriptioncallback","link":"#subscriptioncallback","children":[]},{"level":3,"title":"SubscriptionCallbackMutation","slug":"subscriptioncallbackmutation","link":"#subscriptioncallbackmutation","children":[]},{"level":3,"title":"_ActionsTree","slug":"actionstree","link":"#actionstree","children":[]},{"level":3,"title":"_Awaited","slug":"awaited","link":"#awaited","children":[]},{"level":3,"title":"_DeepPartial","slug":"deeppartial","link":"#deeppartial","children":[]},{"level":3,"title":"_ExtractActionsFromSetupStore","slug":"extractactionsfromsetupstore","link":"#extractactionsfromsetupstore","children":[]},{"level":3,"title":"_ExtractActionsFromSetupStore_Keys","slug":"extractactionsfromsetupstore-keys","link":"#extractactionsfromsetupstore-keys","children":[]},{"level":3,"title":"_ExtractGettersFromSetupStore","slug":"extractgettersfromsetupstore","link":"#extractgettersfromsetupstore","children":[]},{"level":3,"title":"_ExtractGettersFromSetupStore_Keys","slug":"extractgettersfromsetupstore-keys","link":"#extractgettersfromsetupstore-keys","children":[]},{"level":3,"title":"_ExtractStateFromSetupStore","slug":"extractstatefromsetupstore","link":"#extractstatefromsetupstore","children":[]},{"level":3,"title":"_ExtractStateFromSetupStore_Keys","slug":"extractstatefromsetupstore-keys","link":"#extractstatefromsetupstore-keys","children":[]},{"level":3,"title":"_GettersTree","slug":"getterstree","link":"#getterstree","children":[]},{"level":3,"title":"_MapActionsObjectReturn","slug":"mapactionsobjectreturn","link":"#mapactionsobjectreturn","children":[]},{"level":3,"title":"_MapActionsReturn","slug":"mapactionsreturn","link":"#mapactionsreturn","children":[]},{"level":3,"title":"_MapStateObjectReturn","slug":"mapstateobjectreturn","link":"#mapstateobjectreturn","children":[]},{"level":3,"title":"_MapStateReturn","slug":"mapstatereturn","link":"#mapstatereturn","children":[]},{"level":3,"title":"_MapWritableStateObjectReturn","slug":"mapwritablestateobjectreturn","link":"#mapwritablestateobjectreturn","children":[]},{"level":3,"title":"_MapWritableStateReturn","slug":"mapwritablestatereturn","link":"#mapwritablestatereturn","children":[]},{"level":3,"title":"_Method","slug":"method","link":"#method","children":[]},{"level":3,"title":"_Spread","slug":"spread","link":"#spread","children":[]},{"level":3,"title":"_StoreObject","slug":"storeobject","link":"#storeobject","children":[]},{"level":3,"title":"_StoreWithActions","slug":"storewithactions","link":"#storewithactions","children":[]},{"level":3,"title":"_StoreWithGetters","slug":"storewithgetters","link":"#storewithgetters","children":[]},{"level":3,"title":"_UnwrapAll","slug":"unwrapall","link":"#unwrapall","children":[]}]},{"level":2,"title":"变量","slug":"variables","link":"#variables","children":[{"level":3,"title":"PiniaVuePlugin","slug":"piniavueplugin","link":"#piniavueplugin","children":[]}]},{"level":2,"title":"函数","slug":"functions","link":"#functions","children":[{"level":3,"title":"acceptHMRUpdate","slug":"accepthmrupdate","link":"#accepthmrupdate","children":[]},{"level":3,"title":"createPinia","slug":"createpinia","link":"#createpinia","children":[]},{"level":3,"title":"defineStore","slug":"definestore","link":"#definestore","children":[]},{"level":3,"title":"getActivePinia","slug":"getactivepinia","link":"#getactivepinia","children":[]},{"level":3,"title":"mapActions","slug":"mapactions","link":"#mapactions","children":[]},{"level":3,"title":"mapGetters","slug":"mapgetters","link":"#mapgetters","children":[]},{"level":3,"title":"mapState","slug":"mapstate","link":"#mapstate","children":[]},{"level":3,"title":"mapStores","slug":"mapstores","link":"#mapstores","children":[]},{"level":3,"title":"mapWritableState","slug":"mapwritablestate","link":"#mapwritablestate","children":[]},{"level":3,"title":"setActivePinia","slug":"setactivepinia","link":"#setactivepinia","children":[]},{"level":3,"title":"setMapStoreSuffix","slug":"setmapstoresuffix","link":"#setmapstoresuffix","children":[]},{"level":3,"title":"skipHydrate","slug":"skiphydrate","link":"#skiphydrate","children":[]},{"level":3,"title":"storeToRefs","slug":"storetorefs","link":"#storetorefs","children":[]}]}],"relativePath":"zh/api/modules/pinia.md"}'),o={name:"zh/api/modules/pinia.md"},n=s(`<p><a href="./../">API 文档</a> / pinia</p><h1 id="module-pinia" tabindex="-1">模块：pinia <a class="header-anchor" href="#module-pinia" aria-hidden="true">#</a></h1><h2 id="enumerations" tabindex="-1">枚举 <a class="header-anchor" href="#enumerations" aria-hidden="true">#</a></h2><ul><li><a href="./../enums/pinia.MutationType.html">MutationType</a></li></ul><h2 id="interfaces" tabindex="-1">接口 <a class="header-anchor" href="#interfaces" aria-hidden="true">#</a></h2><ul><li><a href="./../interfaces/pinia.DefineSetupStoreOptions.html">DefineSetupStoreOptions</a></li><li><a href="./../interfaces/pinia.DefineStoreOptions.html">DefineStoreOptions</a></li><li><a href="./../interfaces/pinia.DefineStoreOptionsBase.html">DefineStoreOptionsBase</a></li><li><a href="./../interfaces/pinia.DefineStoreOptionsInPlugin.html">DefineStoreOptionsInPlugin</a></li><li><a href="./../interfaces/pinia.MapStoresCustomization.html">MapStoresCustomization</a></li><li><a href="./../interfaces/pinia.Pinia.html">Pinia</a></li><li><a href="./../interfaces/pinia.PiniaCustomProperties.html">PiniaCustomProperties</a></li><li><a href="./../interfaces/pinia.PiniaCustomStateProperties.html">PiniaCustomStateProperties</a></li><li><a href="./../interfaces/pinia.PiniaPlugin.html">PiniaPlugin</a></li><li><a href="./../interfaces/pinia.PiniaPluginContext.html">PiniaPluginContext</a></li><li><a href="./../interfaces/pinia.StoreDefinition.html">StoreDefinition</a></li><li><a href="./../interfaces/pinia.StoreProperties.html">StoreProperties</a></li><li><a href="./../interfaces/pinia.SubscriptionCallbackMutationDirect.html">SubscriptionCallbackMutationDirect</a></li><li><a href="./../interfaces/pinia.SubscriptionCallbackMutationPatchFunction.html">SubscriptionCallbackMutationPatchFunction</a></li><li><a href="./../interfaces/pinia.SubscriptionCallbackMutationPatchObject.html">SubscriptionCallbackMutationPatchObject</a></li><li><a href="./../interfaces/pinia._StoreOnActionListenerContext.html">_StoreOnActionListenerContext</a></li><li><a href="./../interfaces/pinia._StoreWithState.html">_StoreWithState</a></li><li><a href="./../interfaces/pinia._SubscriptionCallbackMutationBase.html">_SubscriptionCallbackMutationBase</a></li></ul><h2 id="type-aliases" tabindex="-1">类型别名 <a class="header-anchor" href="#type-aliases" aria-hidden="true">#</a></h2><h3 id="piniastoreplugin" tabindex="-1">PiniaStorePlugin <a class="header-anchor" href="#piniastoreplugin" aria-hidden="true">#</a></h3><p>Ƭ <strong>PiniaStorePlugin</strong>: <a href="./../interfaces/pinia.PiniaPlugin.html"><code>PiniaPlugin</code></a></p><p>扩展每个 store 的插件。</p><p><strong><code>deprecated</code></strong></p><p>使用 PiniaPlugin 代替</p><hr><h3 id="statetree" tabindex="-1">StateTree <a class="header-anchor" href="#statetree" aria-hidden="true">#</a></h3><p>Ƭ <strong>StateTree</strong>: <code>Record</code>&lt;<code>string</code> | <code>number</code> | <code>symbol</code>, <code>any</code>&gt;</p><p>Store 的通用 state</p><hr><h3 id="store" tabindex="-1">Store <a class="header-anchor" href="#store" aria-hidden="true">#</a></h3><p>Ƭ <strong>Store</strong>&lt;<code>Id</code>, <code>S</code>, <code>G</code>, <code>A</code>&gt;: <a href="./../interfaces/pinia._StoreWithState.html"><code>_StoreWithState</code></a>&lt;<code>Id</code>, <code>S</code>, <code>G</code>, <code>A</code>&gt; &amp; <code>UnwrapRef</code>&lt;<code>S</code>&gt; &amp; <a href="./pinia.html#_storewithgetters"><code>_StoreWithGetters</code></a>&lt;<code>G</code>&gt; &amp; <a href="./pinia.html#_actionstree"><code>_ActionsTree</code></a> extends <code>A</code> ? {} : <code>A</code> &amp; <a href="./../interfaces/pinia.PiniaCustomProperties.html"><code>PiniaCustomProperties</code></a>&lt;<code>Id</code>, <code>S</code>, <code>G</code>, <code>A</code>&gt; &amp; <a href="./../interfaces/pinia.PiniaCustomStateProperties.html"><code>PiniaCustomStateProperties</code></a>&lt;<code>S</code>&gt;</p><p>创建 store 的 Store 类型。</p><h4 id="类型参数" tabindex="-1">类型参数 <a class="header-anchor" href="#类型参数" aria-hidden="true">#</a></h4><table><thead><tr><th style="text-align:left;">名称</th><th style="text-align:left;">类型</th></tr></thead><tbody><tr><td style="text-align:left;"><code>Id</code></td><td style="text-align:left;">扩展自 <code>string</code> = <code>string</code></td></tr><tr><td style="text-align:left;"><code>S</code></td><td style="text-align:left;">扩展自 <a href="./pinia.html#statetree"><code>StateTree</code></a> = {}</td></tr><tr><td style="text-align:left;"><code>G</code></td><td style="text-align:left;">{}</td></tr><tr><td style="text-align:left;"><code>A</code></td><td style="text-align:left;">{}</td></tr></tbody></table><hr><h3 id="storeactions" tabindex="-1">StoreActions <a class="header-anchor" href="#storeactions" aria-hidden="true">#</a></h3><p>Ƭ <strong>StoreActions</strong>&lt;<code>SS</code>&gt;: <code>SS</code> extends <a href="./pinia.html#store"><code>Store</code></a>&lt;<code>string</code>, <a href="./pinia.html#statetree"><code>StateTree</code></a>, <a href="./pinia.html#_getterstree"><code>_GettersTree</code></a>&lt;<a href="./pinia.html#statetree"><code>StateTree</code></a>&gt;, infer A&gt; ? <code>A</code> : <a href="./pinia.html#_extractactionsfromsetupstore"><code>_ExtractActionsFromSetupStore</code></a>&lt;<code>SS</code>&gt;</p><p>提取一个 store 类型的 action。 对 Setup Store 或 Option Store 都有效。</p><h4 id="类型参数-1" tabindex="-1">类型参数 <a class="header-anchor" href="#类型参数-1" aria-hidden="true">#</a></h4><table><thead><tr><th style="text-align:left;">名称</th></tr></thead><tbody><tr><td style="text-align:left;"><code>SS</code></td></tr></tbody></table><hr><h3 id="storegeneric" tabindex="-1">StoreGeneric <a class="header-anchor" href="#storegeneric" aria-hidden="true">#</a></h3><p>Ƭ <strong>StoreGeneric</strong>: <a href="./pinia.html#store"><code>Store</code></a>&lt;<code>string</code>, <a href="./pinia.html#statetree"><code>StateTree</code></a>, <a href="./pinia.html#_getterstree"><code>_GettersTree</code></a>&lt;<a href="./pinia.html#statetree"><code>StateTree</code></a>&gt;, <a href="./pinia.html#_actionstree"><code>_ActionsTree</code></a>&gt;</p><p>泛型与 Store 的类型不安全版本。 在访问字符串时不会失败， 这使得编写不在意传递的 store 类型的通用函数更加容易。</p><hr><h3 id="storegetters" tabindex="-1">StoreGetters <a class="header-anchor" href="#storegetters" aria-hidden="true">#</a></h3><p>Ƭ <strong>StoreGetters</strong>&lt;<code>SS</code>&gt;: <code>SS</code> extends <a href="./pinia.html#store"><code>Store</code></a>&lt;<code>string</code>, <a href="./pinia.html#statetree"><code>StateTree</code></a>, infer G, <a href="./pinia.html#_actionstree"><code>_ActionsTree</code></a>&gt; ? <a href="./pinia.html#_storewithgetters"><code>_StoreWithGetters</code></a>&lt;<code>G</code>&gt; : <a href="./pinia.html#_extractgettersfromsetupstore"><code>_ExtractGettersFromSetupStore</code></a>&lt;<code>SS</code>&gt;</p><p>提取一个 store 类型的 getter。 对 Setup Store 或 Option Store都有效。</p><h4 id="类型参数-2" tabindex="-1">类型参数 <a class="header-anchor" href="#类型参数-2" aria-hidden="true">#</a></h4><table><thead><tr><th style="text-align:left;">名称</th></tr></thead><tbody><tr><td style="text-align:left;"><code>SS</code></td></tr></tbody></table><hr><h3 id="storeonactionlistener" tabindex="-1">StoreOnActionListener <a class="header-anchor" href="#storeonactionlistener" aria-hidden="true">#</a></h3><p>Ƭ <strong>StoreOnActionListener</strong>&lt;<code>Id</code>, <code>S</code>, <code>G</code>, <code>A</code>&gt;: (<code>context</code>: <a href="./pinia.html#storeonactionlistenercontext"><code>StoreOnActionListenerContext</code></a>&lt;<code>Id</code>, <code>S</code>, <code>G</code>, {} extends <code>A</code> ? <a href="./pinia.html#_actionstree"><code>_ActionsTree</code></a> : <code>A</code>&gt;) =&gt; <code>void</code></p><h4 id="类型参数-3" tabindex="-1">类型参数 <a class="header-anchor" href="#类型参数-3" aria-hidden="true">#</a></h4><table><thead><tr><th style="text-align:left;">名称</th><th style="text-align:left;">类型</th></tr></thead><tbody><tr><td style="text-align:left;"><code>Id</code></td><td style="text-align:left;">扩展自 <code>string</code></td></tr><tr><td style="text-align:left;"><code>S</code></td><td style="text-align:left;">扩展自 <a href="./pinia.html#statetree"><code>StateTree</code></a></td></tr><tr><td style="text-align:left;"><code>G</code></td><td style="text-align:left;"><code>G</code></td></tr><tr><td style="text-align:left;"><code>A</code></td><td style="text-align:left;"><code>A</code></td></tr></tbody></table><h4 id="type-declaration" tabindex="-1">类型声明 <a class="header-anchor" href="#type-declaration" aria-hidden="true">#</a></h4><p>▸ (<code>context</code>): <code>void</code></p><p><code>store.$onAction()</code> 的参数</p><h5 id="参数" tabindex="-1">参数 <a class="header-anchor" href="#参数" aria-hidden="true">#</a></h5><table><thead><tr><th style="text-align:left;">名称</th><th style="text-align:left;">类型</th></tr></thead><tbody><tr><td style="text-align:left;"><code>context</code></td><td style="text-align:left;"><a href="./pinia.html#storeonactionlistenercontext"><code>StoreOnActionListenerContext</code></a>&lt;<code>Id</code>, <code>S</code>, <code>G</code>, {} extends <code>A</code> ? <a href="./pinia.html#_actionstree"><code>_ActionsTree</code></a> : <code>A</code>&gt;</td></tr></tbody></table><h5 id="返回值" tabindex="-1">返回值 <a class="header-anchor" href="#返回值" aria-hidden="true">#</a></h5><p><code>void</code></p><hr><h3 id="storeonactionlistenercontext" tabindex="-1">StoreOnActionListenerContext <a class="header-anchor" href="#storeonactionlistenercontext" aria-hidden="true">#</a></h3><p>Ƭ <strong>StoreOnActionListenerContext</strong>&lt;<code>Id</code>, <code>S</code>, <code>G</code>, <code>A</code>&gt;: <a href="./pinia.html#_actionstree"><code>_ActionsTree</code></a> extends <code>A</code> ? <a href="./../interfaces/pinia._StoreOnActionListenerContext.html"><code>_StoreOnActionListenerContext</code></a>&lt;<a href="./pinia.html#storegeneric"><code>StoreGeneric</code></a>, <code>string</code>, <a href="./pinia.html#_actionstree"><code>_ActionsTree</code></a>&gt; : { [Name in keyof A]: Name extends string ? _StoreOnActionListenerContext&lt;Store&lt;Id, S, G, A&gt;, Name, A&gt; : never }[keyof <code>A</code>]</p><p>传递给 <code>store.$onAction(context =&gt; {})</code> 的回调的上下文对象。 TODO：应该只有Id，Store 和 Action 来生成适当的对象。</p><h4 id="类型参数-4" tabindex="-1">类型参数 <a class="header-anchor" href="#类型参数-4" aria-hidden="true">#</a></h4><table><thead><tr><th style="text-align:left;">名称</th><th style="text-align:left;">类型</th></tr></thead><tbody><tr><td style="text-align:left;"><code>Id</code></td><td style="text-align:left;">扩展自 <code>string</code></td></tr><tr><td style="text-align:left;"><code>S</code></td><td style="text-align:left;">扩展自 <a href="./pinia.html#statetree"><code>StateTree</code></a></td></tr><tr><td style="text-align:left;"><code>G</code></td><td style="text-align:left;"><code>G</code></td></tr><tr><td style="text-align:left;"><code>A</code></td><td style="text-align:left;"><code>A</code></td></tr></tbody></table><hr><h3 id="storestate" tabindex="-1">StoreState <a class="header-anchor" href="#storestate" aria-hidden="true">#</a></h3><p>Ƭ <strong>StoreState</strong>&lt;<code>SS</code>&gt;: <code>SS</code> extends <a href="./pinia.html#store"><code>Store</code></a>&lt;<code>string</code>, infer S, <a href="./pinia.html#_getterstree"><code>_GettersTree</code></a>&lt;<a href="./pinia.html#statetree"><code>StateTree</code></a>&gt;, <a href="./pinia.html#_actionstree"><code>_ActionsTree</code></a>&gt; ? <code>UnwrapRef</code>&lt;<code>S</code>&gt; : <a href="./pinia.html#_extractstatefromsetupstore"><code>_ExtractStateFromSetupStore</code></a>&lt;<code>SS</code>&gt;</p><p>提取一个 store 类型的 state。 对 Setup Store 或 Option Store 都有效。请注意，它自动解包 refs。</p><h4 id="类型参数-5" tabindex="-1">类型参数 <a class="header-anchor" href="#类型参数-5" aria-hidden="true">#</a></h4><table><thead><tr><th style="text-align:left;">名称</th></tr></thead><tbody><tr><td style="text-align:left;"><code>SS</code></td></tr></tbody></table><hr><h3 id="subscriptioncallback" tabindex="-1">SubscriptionCallback <a class="header-anchor" href="#subscriptioncallback" aria-hidden="true">#</a></h3><p>Ƭ <strong>SubscriptionCallback</strong>&lt;<code>S</code>&gt;: (<code>mutation</code>: <a href="./pinia.html#subscriptioncallbackmutation"><code>SubscriptionCallbackMutation</code></a>&lt;<code>S</code>&gt;, <code>state</code>: <code>UnwrapRef</code>&lt;<code>S</code>&gt;) =&gt; <code>void</code></p><h4 id="类型参数-6" tabindex="-1">类型参数 <a class="header-anchor" href="#类型参数-6" aria-hidden="true">#</a></h4><table><thead><tr><th style="text-align:left;">名称</th></tr></thead><tbody><tr><td style="text-align:left;"><code>S</code></td></tr></tbody></table><h4 id="type-declaration_1" tabindex="-1">类型声明 <a class="header-anchor" href="#type-declaration_1" aria-hidden="true">#</a></h4><p>▸ (<code>mutation</code>, <code>state</code>): <code>void</code></p><p>订阅的回调</p><h5 id="参数-1" tabindex="-1">参数 <a class="header-anchor" href="#参数-1" aria-hidden="true">#</a></h5><table><thead><tr><th style="text-align:left;">名称</th><th style="text-align:left;">类型</th></tr></thead><tbody><tr><td style="text-align:left;"><code>mutation</code></td><td style="text-align:left;"><a href="./pinia.html#subscriptioncallbackmutation"><code>SubscriptionCallbackMutation</code></a>&lt;<code>S</code>&gt;</td></tr><tr><td style="text-align:left;"><code>state</code></td><td style="text-align:left;"><code>UnwrapRef</code>&lt;<code>S</code>&gt;</td></tr></tbody></table><h5 id="返回值-1" tabindex="-1">返回值 <a class="header-anchor" href="#返回值-1" aria-hidden="true">#</a></h5><p><code>void</code></p><hr><h3 id="subscriptioncallbackmutation" tabindex="-1">SubscriptionCallbackMutation <a class="header-anchor" href="#subscriptioncallbackmutation" aria-hidden="true">#</a></h3><p>Ƭ <strong>SubscriptionCallbackMutation</strong>&lt;<code>S</code>&gt;: <a href="./../interfaces/pinia.SubscriptionCallbackMutationDirect.html"><code>SubscriptionCallbackMutationDirect</code></a> | <a href="./../interfaces/pinia.SubscriptionCallbackMutationPatchObject.html"><code>SubscriptionCallbackMutationPatchObject</code></a>&lt;<code>S</code>&gt; | <a href="./../interfaces/pinia.SubscriptionCallbackMutationPatchFunction.html"><code>SubscriptionCallbackMutationPatchFunction</code></a></p><p>传递给订阅回调的上下文对象。</p><h4 id="类型参数-7" tabindex="-1">类型参数 <a class="header-anchor" href="#类型参数-7" aria-hidden="true">#</a></h4><table><thead><tr><th style="text-align:left;">名称</th></tr></thead><tbody><tr><td style="text-align:left;"><code>S</code></td></tr></tbody></table><hr><h3 id="actionstree" tabindex="-1">_ActionsTree <a class="header-anchor" href="#actionstree" aria-hidden="true">#</a></h3><p>Ƭ <strong>_ActionsTree</strong>: <code>Record</code>&lt;<code>string</code>, <a href="./pinia.html#_method"><code>_Method</code></a>&gt;</p><p>行动的对象的类型。仅供内部使用。 <strong>仅</strong>供内部使用</p><hr><h3 id="awaited" tabindex="-1">_Awaited <a class="header-anchor" href="#awaited" aria-hidden="true">#</a></h3><p>Ƭ <strong>_Awaited</strong>&lt;<code>T</code>&gt;: <code>T</code> extends <code>null</code> | <code>undefined</code> ? <code>T</code> : <code>T</code> extends <code>object</code> &amp; { <code>then</code>: (<code>onfulfilled</code>: <code>F</code>) =&gt; <code>any</code> } ? <code>F</code> extends (<code>value</code>: infer V, ...<code>args</code>: <code>any</code>) =&gt; <code>any</code> ? <a href="./pinia.html#_awaited"><code>_Awaited</code></a>&lt;<code>V</code>&gt; : <code>never</code> : <code>T</code></p><h4 id="类型参数-8" tabindex="-1">类型参数 <a class="header-anchor" href="#类型参数-8" aria-hidden="true">#</a></h4><table><thead><tr><th style="text-align:left;">名称</th></tr></thead><tbody><tr><td style="text-align:left;"><code>T</code></td></tr></tbody></table><hr><h3 id="deeppartial" tabindex="-1">_DeepPartial <a class="header-anchor" href="#deeppartial" aria-hidden="true">#</a></h3><p>Ƭ <strong>_DeepPartial</strong>&lt;<code>T</code>&gt;: { [K in keyof T]?: _DeepPartial&lt;T[K]&gt; }</p><p>递归的 <code>Partial&lt;T&gt;</code>。 <a href="./pinia.html#store">[&#39;$patch&#39;]</a>会用到。</p><p><strong>仅</strong>供内部使用</p><h4 id="类型参数-9" tabindex="-1">类型参数 <a class="header-anchor" href="#类型参数-9" aria-hidden="true">#</a></h4><table><thead><tr><th style="text-align:left;">名称</th></tr></thead><tbody><tr><td style="text-align:left;"><code>T</code></td></tr></tbody></table><hr><h3 id="extractactionsfromsetupstore" tabindex="-1">_ExtractActionsFromSetupStore <a class="header-anchor" href="#extractactionsfromsetupstore" aria-hidden="true">#</a></h3><p>Ƭ <strong>_ExtractActionsFromSetupStore</strong>&lt;<code>SS</code>&gt;: <code>SS</code> extends <code>undefined</code> | <code>void</code> ? {} : <a href="./pinia.html#_extractactionsfromsetupstore_keys"><code>_ExtractActionsFromSetupStore_Keys</code></a>&lt;<code>SS</code>&gt; extends keyof <code>SS</code> ? <code>Pick</code>&lt;<code>SS</code>, <a href="./pinia.html#_extractactionsfromsetupstore_keys"><code>_ExtractActionsFromSetupStore_Keys</code></a>&lt;<code>SS</code>&gt;&gt; : <code>never</code></p><p><strong>仅</strong>供内部使用</p><h4 id="类型参数-10" tabindex="-1">类型参数 <a class="header-anchor" href="#类型参数-10" aria-hidden="true">#</a></h4><table><thead><tr><th style="text-align:left;">名称</th></tr></thead><tbody><tr><td style="text-align:left;"><code>SS</code></td></tr></tbody></table><hr><h3 id="extractactionsfromsetupstore-keys" tabindex="-1">_ExtractActionsFromSetupStore_Keys <a class="header-anchor" href="#extractactionsfromsetupstore-keys" aria-hidden="true">#</a></h3><p>Ƭ <strong>_ExtractActionsFromSetupStore_Keys</strong>&lt;<code>SS</code>&gt;: keyof { [K in keyof SS as SS[K] extends _Method ? K : never]: any }</p><p>能够通过 IDE 进行重构的类型。 <strong>仅</strong>供内部使用</p><h4 id="类型参数-11" tabindex="-1">类型参数 <a class="header-anchor" href="#类型参数-11" aria-hidden="true">#</a></h4><table><thead><tr><th style="text-align:left;">名称</th></tr></thead><tbody><tr><td style="text-align:left;"><code>SS</code></td></tr></tbody></table><hr><h3 id="extractgettersfromsetupstore" tabindex="-1">_ExtractGettersFromSetupStore <a class="header-anchor" href="#extractgettersfromsetupstore" aria-hidden="true">#</a></h3><p>Ƭ <strong>_ExtractGettersFromSetupStore</strong>&lt;<code>SS</code>&gt;: <code>SS</code> extends <code>undefined</code> | <code>void</code> ? {} : <a href="./pinia.html#_extractgettersfromsetupstore_keys"><code>_ExtractGettersFromSetupStore_Keys</code></a>&lt;<code>SS</code>&gt; extends keyof <code>SS</code> ? <code>Pick</code>&lt;<code>SS</code>, <a href="./pinia.html#_extractgettersfromsetupstore_keys"><code>_ExtractGettersFromSetupStore_Keys</code></a>&lt;<code>SS</code>&gt;&gt; : <code>never</code></p><p><strong>仅</strong>供内部使用</p><h4 id="类型参数-12" tabindex="-1">类型参数 <a class="header-anchor" href="#类型参数-12" aria-hidden="true">#</a></h4><table><thead><tr><th style="text-align:left;">名称</th></tr></thead><tbody><tr><td style="text-align:left;"><code>SS</code></td></tr></tbody></table><hr><h3 id="extractgettersfromsetupstore-keys" tabindex="-1">_ExtractGettersFromSetupStore_Keys <a class="header-anchor" href="#extractgettersfromsetupstore-keys" aria-hidden="true">#</a></h3><p>Ƭ <strong>_ExtractGettersFromSetupStore_Keys</strong>&lt;<code>SS</code>&gt;: keyof { [K in keyof SS as SS[K] extends ComputedRef ? K : never]: any }</p><p>能够通过 IDE 进行重构的类型。 <strong>仅</strong>供内部使用</p><h4 id="类型参数-13" tabindex="-1">类型参数 <a class="header-anchor" href="#类型参数-13" aria-hidden="true">#</a></h4><table><thead><tr><th style="text-align:left;">名称</th></tr></thead><tbody><tr><td style="text-align:left;"><code>SS</code></td></tr></tbody></table><hr><h3 id="extractstatefromsetupstore" tabindex="-1">_ExtractStateFromSetupStore <a class="header-anchor" href="#extractstatefromsetupstore" aria-hidden="true">#</a></h3><p>Ƭ <strong>_ExtractStateFromSetupStore</strong>&lt;<code>SS</code>&gt;: <code>SS</code> extends <code>undefined</code> | <code>void</code> ? {} : <a href="./pinia.html#_extractstatefromsetupstore_keys"><code>_ExtractStateFromSetupStore_Keys</code></a>&lt;<code>SS</code>&gt; extends keyof <code>SS</code> ? <a href="./pinia.html#_unwrapall"><code>_UnwrapAll</code></a>&lt;<code>Pick</code>&lt;<code>SS</code>, <a href="./pinia.html#_extractstatefromsetupstore_keys"><code>_ExtractStateFromSetupStore_Keys</code></a>&lt;<code>SS</code>&gt;&gt;&gt; : <code>never</code></p><p><strong>仅</strong>供内部使用</p><h4 id="类型参数-14" tabindex="-1">类型参数 <a class="header-anchor" href="#类型参数-14" aria-hidden="true">#</a></h4><table><thead><tr><th style="text-align:left;">名称</th></tr></thead><tbody><tr><td style="text-align:left;"><code>SS</code></td></tr></tbody></table><hr><h3 id="extractstatefromsetupstore-keys" tabindex="-1">_ExtractStateFromSetupStore_Keys <a class="header-anchor" href="#extractstatefromsetupstore-keys" aria-hidden="true">#</a></h3><p>Ƭ <strong>_ExtractStateFromSetupStore_Keys</strong>&lt;<code>SS</code>&gt;: keyof { [K in keyof SS as SS[K] extends _Method | ComputedRef ? never : K]: any }</p><p>能够通过 IDE 进行重构的类型。 <strong>仅</strong>供内部使用</p><h4 id="类型参数-15" tabindex="-1">类型参数 <a class="header-anchor" href="#类型参数-15" aria-hidden="true">#</a></h4><table><thead><tr><th style="text-align:left;">名称</th></tr></thead><tbody><tr><td style="text-align:left;"><code>SS</code></td></tr></tbody></table><hr><h3 id="getterstree" tabindex="-1">_GettersTree <a class="header-anchor" href="#getterstree" aria-hidden="true">#</a></h3><p>Ƭ <strong>_GettersTree</strong>&lt;<code>S</code>&gt;: <code>Record</code>&lt;<code>string</code>, (<code>state</code>: <code>UnwrapRef</code>&lt;<code>S</code>&gt; &amp; <code>UnwrapRef</code>&lt;<a href="./../interfaces/pinia.PiniaCustomStateProperties.html"><code>PiniaCustomStateProperties</code></a>&lt;<code>S</code>&gt;&gt;) =&gt; <code>any</code> | () =&gt; <code>any</code>&gt;</p><p>推断参数的 Getter 对象的类型。仅供内部使用。 <strong>仅</strong>供内部使用</p><h4 id="类型参数-16" tabindex="-1">类型参数 <a class="header-anchor" href="#类型参数-16" aria-hidden="true">#</a></h4><table><thead><tr><th style="text-align:left;">名称</th><th style="text-align:left;">类型</th></tr></thead><tbody><tr><td style="text-align:left;"><code>S</code></td><td style="text-align:left;">extends <a href="./pinia.html#statetree"><code>StateTree</code></a></td></tr></tbody></table><hr><h3 id="mapactionsobjectreturn" tabindex="-1">_MapActionsObjectReturn <a class="header-anchor" href="#mapactionsobjectreturn" aria-hidden="true">#</a></h3><p>Ƭ <strong>_MapActionsObjectReturn</strong>&lt;<code>A</code>, <code>T</code>&gt;: { [key in keyof T]: A[T[key]] }</p><p><strong>仅</strong>供内部使用</p><h4 id="类型参数-17" tabindex="-1">类型参数 <a class="header-anchor" href="#类型参数-17" aria-hidden="true">#</a></h4><table><thead><tr><th style="text-align:left;">名称</th><th style="text-align:left;">类型</th></tr></thead><tbody><tr><td style="text-align:left;"><code>A</code></td><td style="text-align:left;"><code>A</code></td></tr><tr><td style="text-align:left;"><code>T</code></td><td style="text-align:left;">extends <code>Record</code>&lt;<code>string</code>, keyof <code>A</code>&gt;</td></tr></tbody></table><hr><h3 id="mapactionsreturn" tabindex="-1">_MapActionsReturn <a class="header-anchor" href="#mapactionsreturn" aria-hidden="true">#</a></h3><p>Ƭ <strong>_MapActionsReturn</strong>&lt;<code>A</code>&gt;: { [key in keyof A]: A[key] }</p><p><strong>仅</strong>供内部使用</p><h4 id="类型参数-18" tabindex="-1">类型参数 <a class="header-anchor" href="#类型参数-18" aria-hidden="true">#</a></h4><table><thead><tr><th style="text-align:left;">名称</th></tr></thead><tbody><tr><td style="text-align:left;"><code>A</code></td></tr></tbody></table><hr><h3 id="mapstateobjectreturn" tabindex="-1">_MapStateObjectReturn <a class="header-anchor" href="#mapstateobjectreturn" aria-hidden="true">#</a></h3><p>Ƭ <strong>_MapStateObjectReturn</strong>&lt;<code>Id</code>, <code>S</code>, <code>G</code>, <code>A</code>, <code>T</code>&gt;: { [key in keyof T]: Function }</p><p><strong>仅</strong>供内部使用</p><h4 id="类型参数-19" tabindex="-1">类型参数 <a class="header-anchor" href="#类型参数-19" aria-hidden="true">#</a></h4><table><thead><tr><th style="text-align:left;">名称</th><th style="text-align:left;">类型</th></tr></thead><tbody><tr><td style="text-align:left;"><code>Id</code></td><td style="text-align:left;">extends <code>string</code></td></tr><tr><td style="text-align:left;"><code>S</code></td><td style="text-align:left;">extends <a href="./pinia.html#statetree"><code>StateTree</code></a></td></tr><tr><td style="text-align:left;"><code>G</code></td><td style="text-align:left;">extends <a href="./pinia.html#_getterstree"><code>_GettersTree</code></a>&lt;<code>S</code>&gt;</td></tr><tr><td style="text-align:left;"><code>A</code></td><td style="text-align:left;"><code>A</code></td></tr><tr><td style="text-align:left;"><code>T</code></td><td style="text-align:left;">extends <code>Record</code>&lt;<code>string</code>, keyof <code>S</code> | keyof <code>G</code> | (<code>store</code>: <a href="./pinia.html#store"><code>Store</code></a>&lt;<code>Id</code>, <code>S</code>, <code>G</code>, <code>A</code>&gt;) =&gt; <code>any</code>&gt; = {}</td></tr></tbody></table><hr><h3 id="mapstatereturn" tabindex="-1">_MapStateReturn <a class="header-anchor" href="#mapstatereturn" aria-hidden="true">#</a></h3><p>Ƭ <strong>_MapStateReturn</strong>&lt;<code>S</code>, <code>G</code>, <code>Keys</code>&gt;: { [key in Keys]: Function }</p><p><strong>仅</strong>供内部使用</p><h4 id="类型参数-20" tabindex="-1">类型参数 <a class="header-anchor" href="#类型参数-20" aria-hidden="true">#</a></h4><table><thead><tr><th style="text-align:left;">名称</th><th style="text-align:left;">类型</th></tr></thead><tbody><tr><td style="text-align:left;"><code>S</code></td><td style="text-align:left;">extends <a href="./pinia.html#statetree"><code>StateTree</code></a></td></tr><tr><td style="text-align:left;"><code>G</code></td><td style="text-align:left;">extends <a href="./pinia.html#_getterstree"><code>_GettersTree</code></a>&lt;<code>S</code>&gt;</td></tr><tr><td style="text-align:left;"><code>Keys</code></td><td style="text-align:left;">extends keyof <code>S</code> | keyof <code>G</code> = keyof <code>S</code> | keyof <code>G</code></td></tr></tbody></table><hr><h3 id="mapwritablestateobjectreturn" tabindex="-1">_MapWritableStateObjectReturn <a class="header-anchor" href="#mapwritablestateobjectreturn" aria-hidden="true">#</a></h3><p>Ƭ <strong>_MapWritableStateObjectReturn</strong>&lt;<code>S</code>, <code>T</code>&gt;: { [key in keyof T]: Object }</p><p><strong>仅</strong>供内部使用</p><h4 id="类型参数-21" tabindex="-1">类型参数 <a class="header-anchor" href="#类型参数-21" aria-hidden="true">#</a></h4><table><thead><tr><th style="text-align:left;">名称</th><th style="text-align:left;">类型</th></tr></thead><tbody><tr><td style="text-align:left;"><code>S</code></td><td style="text-align:left;">extends <a href="./pinia.html#statetree"><code>StateTree</code></a></td></tr><tr><td style="text-align:left;"><code>T</code></td><td style="text-align:left;">extends <code>Record</code>&lt;<code>string</code>, keyof <code>S</code>&gt;</td></tr></tbody></table><hr><h3 id="mapwritablestatereturn" tabindex="-1">_MapWritableStateReturn <a class="header-anchor" href="#mapwritablestatereturn" aria-hidden="true">#</a></h3><p>Ƭ <strong>_MapWritableStateReturn</strong>&lt;<code>S</code>&gt;: { [key in keyof S]: Object }</p><p><strong>仅</strong>供内部使用</p><h4 id="类型参数-22" tabindex="-1">类型参数 <a class="header-anchor" href="#类型参数-22" aria-hidden="true">#</a></h4><table><thead><tr><th style="text-align:left;">名称</th><th style="text-align:left;">Type</th></tr></thead><tbody><tr><td style="text-align:left;"><code>S</code></td><td style="text-align:left;">extends <a href="./pinia.html#statetree"><code>StateTree</code></a></td></tr></tbody></table><hr><h3 id="method" tabindex="-1">_Method <a class="header-anchor" href="#method" aria-hidden="true">#</a></h3><p>Ƭ <strong>_Method</strong>: (...<code>args</code>: <code>any</code>[]) =&gt; <code>any</code></p><h4 id="type-declaration_2" tabindex="-1">类型声明 <a class="header-anchor" href="#type-declaration_2" aria-hidden="true">#</a></h4><p>▸ (...<code>args</code>): <code>any</code></p><p>可以推断参数和返回值类型的函数通用类型。</p><p><strong>仅</strong>供内部使用</p><h5 id="参数-2" tabindex="-1">参数 <a class="header-anchor" href="#参数-2" aria-hidden="true">#</a></h5><table><thead><tr><th style="text-align:left;">名称</th><th style="text-align:left;">类型</th></tr></thead><tbody><tr><td style="text-align:left;"><code>...args</code></td><td style="text-align:left;"><code>any</code>[]</td></tr></tbody></table><h5 id="返回值-2" tabindex="-1">返回值 <a class="header-anchor" href="#返回值-2" aria-hidden="true">#</a></h5><p><code>any</code></p><hr><h3 id="spread" tabindex="-1">_Spread <a class="header-anchor" href="#spread" aria-hidden="true">#</a></h3><p>Ƭ <strong>_Spread</strong>&lt;<code>A</code>&gt;: <code>A</code> extends [infer L, ...(infer R)] ? <a href="./pinia.html#_storeobject"><code>_StoreObject</code></a>&lt;<code>L</code>&gt; &amp; <a href="./pinia.html#_spread"><code>_Spread</code></a>&lt;<code>R</code>&gt; : <code>unknown</code></p><p><strong>仅</strong>供内部使用.</p><h4 id="类型参数-23" tabindex="-1">类型参数 <a class="header-anchor" href="#类型参数-23" aria-hidden="true">#</a></h4><table><thead><tr><th style="text-align:left;">名称</th><th style="text-align:left;">类型</th></tr></thead><tbody><tr><td style="text-align:left;"><code>A</code></td><td style="text-align:left;">extends readonly <code>any</code>[]</td></tr></tbody></table><hr><h3 id="storeobject" tabindex="-1">_StoreObject <a class="header-anchor" href="#storeobject" aria-hidden="true">#</a></h3><p>Ƭ <strong>_StoreObject</strong>&lt;<code>S</code>&gt;: <code>S</code> extends <a href="./../interfaces/pinia.StoreDefinition.html"><code>StoreDefinition</code></a>&lt;infer Ids, infer State, infer Getters, infer Actions&gt; ? { [Id in \`\${Ids}\${MapStoresCustomization extends Record&lt;&quot;suffix&quot;, string&gt; ? MapStoresCustomization[&quot;suffix&quot;] : &quot;Store&quot;}\`]: Function } : {}</p><p><strong>仅</strong>供内部使用.</p><h4 id="类型参数-24" tabindex="-1">类型参数 <a class="header-anchor" href="#类型参数-24" aria-hidden="true">#</a></h4><table><thead><tr><th style="text-align:left;">名称</th></tr></thead><tbody><tr><td style="text-align:left;"><code>S</code></td></tr></tbody></table><hr><h3 id="storewithactions" tabindex="-1">_StoreWithActions <a class="header-anchor" href="#storewithactions" aria-hidden="true">#</a></h3><p>Ƭ <strong>_StoreWithActions</strong>&lt;<code>A</code>&gt;: { [k in keyof A]: A[k] extends Function ? Function : never }</p><p>为 action 增强的 Store。仅供内部使用。 <strong>仅</strong>供内部使用</p><h4 id="类型参数-25" tabindex="-1">类型参数 <a class="header-anchor" href="#类型参数-25" aria-hidden="true">#</a></h4><table><thead><tr><th style="text-align:left;">名称</th></tr></thead><tbody><tr><td style="text-align:left;"><code>A</code></td></tr></tbody></table><hr><h3 id="storewithgetters" tabindex="-1">_StoreWithGetters <a class="header-anchor" href="#storewithgetters" aria-hidden="true">#</a></h3><p>Ƭ <strong>_StoreWithGetters</strong>&lt;<code>G</code>&gt;: { readonly [k in keyof G]: G[k] extends Function ? R : UnwrapRef&lt;G[k]&gt; }</p><p>Store augmented with getters. For internal usage only. <strong>仅</strong>供内部使用</p><h4 id="类型参数-26" tabindex="-1">类型参数 <a class="header-anchor" href="#类型参数-26" aria-hidden="true">#</a></h4><table><thead><tr><th style="text-align:left;">名称</th></tr></thead><tbody><tr><td style="text-align:left;"><code>G</code></td></tr></tbody></table><hr><h3 id="unwrapall" tabindex="-1">_UnwrapAll <a class="header-anchor" href="#unwrapall" aria-hidden="true">#</a></h3><p>Ƭ <strong>_UnwrapAll</strong>&lt;<code>SS</code>&gt;: { [K in keyof SS]: UnwrapRef&lt;SS[K]&gt; }</p><p>能够通过 IDE 进行重构的类型。 <strong>仅</strong>供内部使用</p><h4 id="类型参数-27" tabindex="-1">类型参数 <a class="header-anchor" href="#类型参数-27" aria-hidden="true">#</a></h4><table><thead><tr><th style="text-align:left;">名称</th></tr></thead><tbody><tr><td style="text-align:left;"><code>SS</code></td></tr></tbody></table><h2 id="variables" tabindex="-1">变量 <a class="header-anchor" href="#variables" aria-hidden="true">#</a></h2><h3 id="piniavueplugin" tabindex="-1">PiniaVuePlugin <a class="header-anchor" href="#piniavueplugin" aria-hidden="true">#</a></h3><p>• <strong>PiniaVuePlugin</strong>: <code>Plugin</code></p><p>Vue 2 插件，必须安装该插件才能使 pinia 工作。 注意，<strong>如果你使用的是 Nuxt.js，那你不需要这个插件</strong>。请使用 <code>buildModule</code> 代替： <a href="https://pinia.vuejs.org/zh/ssr/nuxt.html" target="_blank" rel="noreferrer">https://pinia.vuejs.org/zh/ssr/nuxt.html</a></p><p><strong><code>Example</code></strong></p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">import</span><span style="color:#F6F6F4;"> Vue </span><span style="color:#F286C4;">from</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">vue</span><span style="color:#DEE492;">&#39;</span></span>
<span class="line"><span style="color:#F286C4;">import</span><span style="color:#F6F6F4;"> { PiniaVuePlugin, createPinia } </span><span style="color:#F286C4;">from</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">pinia</span><span style="color:#DEE492;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">Vue.</span><span style="color:#62E884;">use</span><span style="color:#F6F6F4;">(PiniaVuePlugin)</span></span>
<span class="line"><span style="color:#F286C4;">const</span><span style="color:#F6F6F4;"> pinia </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">createPinia</span><span style="color:#F6F6F4;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F286C4;font-weight:bold;">new</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">Vue</span><span style="color:#F6F6F4;">({</span></span>
<span class="line"><span style="color:#F6F6F4;">  el</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">#app</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">,</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#7B7F8B;">// ...</span></span>
<span class="line"><span style="color:#F6F6F4;">  pinia,</span></span>
<span class="line"><span style="color:#F6F6F4;">})</span></span>
<span class="line"></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#1E754F;">import</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">Vue</span><span style="color:#393A34;"> </span><span style="color:#1E754F;">from</span><span style="color:#393A34;"> </span><span style="color:#B56959AA;">&#39;</span><span style="color:#B56959;">vue</span><span style="color:#B56959AA;">&#39;</span></span>
<span class="line"><span style="color:#1E754F;">import</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">PiniaVuePlugin</span><span style="color:#999999;">,</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">createPinia</span><span style="color:#393A34;"> </span><span style="color:#999999;">}</span><span style="color:#393A34;"> </span><span style="color:#1E754F;">from</span><span style="color:#393A34;"> </span><span style="color:#B56959AA;">&#39;</span><span style="color:#B56959;">pinia</span><span style="color:#B56959AA;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B07D48;">Vue</span><span style="color:#999999;">.</span><span style="color:#59873A;">use</span><span style="color:#999999;">(</span><span style="color:#B07D48;">PiniaVuePlugin</span><span style="color:#999999;">)</span></span>
<span class="line"><span style="color:#AB5959;">const</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">pinia</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">=</span><span style="color:#393A34;"> </span><span style="color:#59873A;">createPinia</span><span style="color:#999999;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#AB5959;">new</span><span style="color:#393A34;"> </span><span style="color:#59873A;">Vue</span><span style="color:#999999;">({</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#998418;">el</span><span style="color:#999999;">:</span><span style="color:#393A34;"> </span><span style="color:#B56959AA;">&#39;</span><span style="color:#B56959;">#app</span><span style="color:#B56959AA;">&#39;</span><span style="color:#999999;">,</span></span>
<span class="line"><span style="color:#999999;">  </span><span style="color:#A0ADA0;">// ...</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#B07D48;">pinia</span><span style="color:#999999;">,</span></span>
<span class="line"><span style="color:#999999;">})</span></span>
<span class="line"></span></code></pre></div><p><strong><code>param</code></strong></p><p>从 &#39;vue&#39; 导入的 <code>Vue</code>。</p><h2 id="functions" tabindex="-1">函数 <a class="header-anchor" href="#functions" aria-hidden="true">#</a></h2><h3 id="accepthmrupdate" tabindex="-1">acceptHMRUpdate <a class="header-anchor" href="#accepthmrupdate" aria-hidden="true">#</a></h3><p>▸ <strong>acceptHMRUpdate</strong>(<code>initialUseStore</code>, <code>hot</code>): (<code>newModule</code>: <code>any</code>) =&gt; <code>any</code></p><p>创建一个 <em>accept</em> 函数，在 Vite 应用中传递给 <code>i<wbr>mport.meta.hot</code>。</p><p><strong><code>Example</code></strong></p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">const</span><span style="color:#F6F6F4;"> useUser </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">defineStore</span><span style="color:#F6F6F4;">(</span><span style="color:#F286C4;">...</span><span style="color:#F6F6F4;">)</span></span>
<span class="line"><span style="color:#F286C4;">if</span><span style="color:#F6F6F4;"> (</span><span style="color:#F286C4;">import</span><span style="color:#F6F6F4;">.meta.hot) {</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#F286C4;">import</span><span style="color:#F6F6F4;">.meta.hot.</span><span style="color:#62E884;">accept</span><span style="color:#F6F6F4;">(</span><span style="color:#62E884;">acceptHMRUpdate</span><span style="color:#F6F6F4;">(useUser, </span><span style="color:#F286C4;">import</span><span style="color:#F6F6F4;">.meta.hot))</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span>
<span class="line"></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#AB5959;">const</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">useUser</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">=</span><span style="color:#393A34;"> </span><span style="color:#59873A;">defineStore</span><span style="color:#999999;">(...)</span></span>
<span class="line"><span style="color:#1E754F;">if</span><span style="color:#393A34;"> </span><span style="color:#999999;">(</span><span style="color:#1E754F;">import</span><span style="color:#999999;">.</span><span style="color:#998418;">meta</span><span style="color:#999999;">.</span><span style="color:#B07D48;">hot</span><span style="color:#999999;">)</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#1E754F;">import</span><span style="color:#999999;">.</span><span style="color:#998418;">meta</span><span style="color:#999999;">.</span><span style="color:#B07D48;">hot</span><span style="color:#999999;">.</span><span style="color:#59873A;">accept</span><span style="color:#999999;">(</span><span style="color:#59873A;">acceptHMRUpdate</span><span style="color:#999999;">(</span><span style="color:#B07D48;">useUser</span><span style="color:#999999;">,</span><span style="color:#393A34;"> </span><span style="color:#1E754F;">import</span><span style="color:#999999;">.</span><span style="color:#998418;">meta</span><span style="color:#999999;">.</span><span style="color:#B07D48;">hot</span><span style="color:#999999;">))</span></span>
<span class="line"><span style="color:#999999;">}</span></span>
<span class="line"></span></code></pre></div><h4 id="参数-3" tabindex="-1">参数 <a class="header-anchor" href="#参数-3" aria-hidden="true">#</a></h4><table><thead><tr><th style="text-align:left;">名称</th><th style="text-align:left;">类型</th><th style="text-align:left;">描述</th></tr></thead><tbody><tr><td style="text-align:left;"><code>initialUseStore</code></td><td style="text-align:left;"><a href="./../interfaces/pinia.StoreDefinition.html"><code>StoreDefinition</code></a>&lt;<code>string</code>, <a href="./pinia.html#statetree"><code>StateTree</code></a>, <a href="./pinia.html#_getterstree"><code>_GettersTree</code></a>&lt;<a href="./pinia.html#statetree"><code>StateTree</code></a>&gt;, <a href="./pinia.html#_actionstree"><code>_ActionsTree</code></a>&gt;</td><td style="text-align:left;">return of the defineStore to hot update</td></tr><tr><td style="text-align:left;"><code>hot</code></td><td style="text-align:left;"><code>any</code></td><td style="text-align:left;"><code>i<wbr>mport.meta.hot</code></td></tr></tbody></table><h4 id="返回值-3" tabindex="-1">返回值 <a class="header-anchor" href="#返回值-3" aria-hidden="true">#</a></h4><p><code>fn</code></p><p>▸ (<code>newModule</code>): <code>any</code></p><h5 id="参数-4" tabindex="-1">参数 <a class="header-anchor" href="#参数-4" aria-hidden="true">#</a></h5><table><thead><tr><th style="text-align:left;">名称</th><th style="text-align:left;">类型</th></tr></thead><tbody><tr><td style="text-align:left;"><code>newModule</code></td><td style="text-align:left;"><code>any</code></td></tr></tbody></table><h5 id="返回值-4" tabindex="-1">返回值 <a class="header-anchor" href="#返回值-4" aria-hidden="true">#</a></h5><p><code>any</code></p><hr><h3 id="createpinia" tabindex="-1">createPinia <a class="header-anchor" href="#createpinia" aria-hidden="true">#</a></h3><p>▸ <strong>createPinia</strong>(): <a href="./../interfaces/pinia.Pinia.html"><code>Pinia</code></a></p><p>创建一个 Pinia 实例，供应用使用。</p><h4 id="返回值-5" tabindex="-1">返回值 <a class="header-anchor" href="#返回值-5" aria-hidden="true">#</a></h4><p><a href="./../interfaces/pinia.Pinia.html"><code>Pinia</code></a></p><hr><h3 id="definestore" tabindex="-1">defineStore <a class="header-anchor" href="#definestore" aria-hidden="true">#</a></h3><p>▸ <strong>defineStore</strong>&lt;<code>Id</code>, <code>S</code>, <code>G</code>, <code>A</code>&gt;(<code>id</code>, <code>options</code>): <a href="./../interfaces/pinia.StoreDefinition.html"><code>StoreDefinition</code></a>&lt;<code>Id</code>, <code>S</code>, <code>G</code>, <code>A</code>&gt;</p><p>创建一个 <code>useStore</code> 函数，检索 store 实例</p><h4 id="类型参数-28" tabindex="-1">类型参数 <a class="header-anchor" href="#类型参数-28" aria-hidden="true">#</a></h4><table><thead><tr><th style="text-align:left;">名称</th><th style="text-align:left;">类型</th></tr></thead><tbody><tr><td style="text-align:left;"><code>Id</code></td><td style="text-align:left;">扩展自 <code>string</code></td></tr><tr><td style="text-align:left;"><code>S</code></td><td style="text-align:left;">扩展自 <a href="./pinia.html#statetree"><code>StateTree</code></a> = {}</td></tr><tr><td style="text-align:left;"><code>G</code></td><td style="text-align:left;">扩展自 <code>_GettersTree</code>&lt;<code>S</code>&gt; = {}</td></tr><tr><td style="text-align:left;"><code>A</code></td><td style="text-align:left;">{}</td></tr></tbody></table><h4 id="参数-5" tabindex="-1">参数 <a class="header-anchor" href="#参数-5" aria-hidden="true">#</a></h4><table><thead><tr><th style="text-align:left;">名称</th><th style="text-align:left;">类型</th><th style="text-align:left;">描述</th></tr></thead><tbody><tr><td style="text-align:left;"><code>id</code></td><td style="text-align:left;"><code>Id</code></td><td style="text-align:left;">id of the store (must be unique)</td></tr><tr><td style="text-align:left;"><code>options</code></td><td style="text-align:left;"><code>Omit</code>&lt;<a href="./../interfaces/pinia.DefineStoreOptions.html"><code>DefineStoreOptions</code></a>&lt;<code>Id</code>, <code>S</code>, <code>G</code>, <code>A</code>&gt;, <code>&quot;id&quot;</code>&gt;</td><td style="text-align:left;">options to define the store</td></tr></tbody></table><h4 id="返回值-6" tabindex="-1">返回值 <a class="header-anchor" href="#返回值-6" aria-hidden="true">#</a></h4><p><a href="./../interfaces/pinia.StoreDefinition.html"><code>StoreDefinition</code></a>&lt;<code>Id</code>, <code>S</code>, <code>G</code>, <code>A</code>&gt;</p><p>▸ <strong>defineStore</strong>&lt;<code>Id</code>, <code>S</code>, <code>G</code>, <code>A</code>&gt;(<code>options</code>): <a href="./../interfaces/pinia.StoreDefinition.html"><code>StoreDefinition</code></a>&lt;<code>Id</code>, <code>S</code>, <code>G</code>, <code>A</code>&gt;</p><p>创建一个 <code>useStore</code> 函数，检索 store 实例</p><h4 id="类型参数-29" tabindex="-1">类型参数 <a class="header-anchor" href="#类型参数-29" aria-hidden="true">#</a></h4><table><thead><tr><th style="text-align:left;">名称</th><th style="text-align:left;">类型</th></tr></thead><tbody><tr><td style="text-align:left;"><code>Id</code></td><td style="text-align:left;">extends <code>string</code></td></tr><tr><td style="text-align:left;"><code>S</code></td><td style="text-align:left;">extends <a href="./pinia.html#statetree"><code>StateTree</code></a> = {}</td></tr><tr><td style="text-align:left;"><code>G</code></td><td style="text-align:left;">extends <a href="./pinia.html#_getterstree"><code>_GettersTree</code></a>&lt;<code>S</code>&gt; = {}</td></tr><tr><td style="text-align:left;"><code>A</code></td><td style="text-align:left;">{}</td></tr></tbody></table><h4 id="参数-6" tabindex="-1">参数 <a class="header-anchor" href="#参数-6" aria-hidden="true">#</a></h4><table><thead><tr><th style="text-align:left;">名称</th><th style="text-align:left;">类型</th><th style="text-align:left;">描述</th></tr></thead><tbody><tr><td style="text-align:left;"><code>options</code></td><td style="text-align:left;"><a href="./../interfaces/pinia.DefineStoreOptions.html"><code>DefineStoreOptions</code></a>&lt;<code>Id</code>, <code>S</code>, <code>G</code>, <code>A</code>&gt;</td><td style="text-align:left;">options to define the store</td></tr></tbody></table><h4 id="返回值-7" tabindex="-1">返回值 <a class="header-anchor" href="#返回值-7" aria-hidden="true">#</a></h4><p><a href="./../interfaces/pinia.StoreDefinition.html"><code>StoreDefinition</code></a>&lt;<code>Id</code>, <code>S</code>, <code>G</code>, <code>A</code>&gt;</p><p>▸ <strong>defineStore</strong>&lt;<code>Id</code>, <code>SS</code>&gt;(<code>id</code>, <code>storeSetup</code>, <code>options?</code>): <a href="./../interfaces/pinia.StoreDefinition.html"><code>StoreDefinition</code></a>&lt;<code>Id</code>, <a href="./pinia.html#_extractstatefromsetupstore"><code>_ExtractStateFromSetupStore</code></a>&lt;<code>SS</code>&gt;, <a href="./pinia.html#_extractgettersfromsetupstore"><code>_ExtractGettersFromSetupStore</code></a>&lt;<code>SS</code>&gt;, <a href="./pinia.html#_extractactionsfromsetupstore"><code>_ExtractActionsFromSetupStore</code></a>&lt;<code>SS</code>&gt;&gt;</p><p>创建一个 <code>useStore</code> 函数，检索 store 实例</p><h4 id="类型参数-30" tabindex="-1">类型参数 <a class="header-anchor" href="#类型参数-30" aria-hidden="true">#</a></h4><table><thead><tr><th style="text-align:left;">名称</th><th style="text-align:left;">类型</th></tr></thead><tbody><tr><td style="text-align:left;"><code>Id</code></td><td style="text-align:left;">扩展自 <code>string</code></td></tr><tr><td style="text-align:left;"><code>SS</code></td><td style="text-align:left;"><code>SS</code></td></tr></tbody></table><h4 id="参数-7" tabindex="-1">参数 <a class="header-anchor" href="#参数-7" aria-hidden="true">#</a></h4><table><thead><tr><th style="text-align:left;">名称</th><th style="text-align:left;">类型</th><th style="text-align:left;">描述</th></tr></thead><tbody><tr><td style="text-align:left;"><code>id</code></td><td style="text-align:left;"><code>Id</code></td><td style="text-align:left;">id of the store (must be unique)</td></tr><tr><td style="text-align:left;"><code>storeSetup</code></td><td style="text-align:left;">() =&gt; <code>SS</code></td><td style="text-align:left;">function that defines the store</td></tr><tr><td style="text-align:left;"><code>options?</code></td><td style="text-align:left;"><a href="./../interfaces/pinia.DefineSetupStoreOptions.html"><code>DefineSetupStoreOptions</code></a>&lt;<code>Id</code>, <a href="./pinia.html#_extractstatefromsetupstore"><code>_ExtractStateFromSetupStore</code></a>&lt;<code>SS</code>&gt;, <a href="./pinia.html#_extractgettersfromsetupstore"><code>_ExtractGettersFromSetupStore</code></a>&lt;<code>SS</code>&gt;, <a href="./pinia.html#_extractactionsfromsetupstore"><code>_ExtractActionsFromSetupStore</code></a>&lt;<code>SS</code>&gt;&gt;</td><td style="text-align:left;">extra options</td></tr></tbody></table><h4 id="返回值-8" tabindex="-1">返回值 <a class="header-anchor" href="#返回值-8" aria-hidden="true">#</a></h4><p><a href="./../interfaces/pinia.StoreDefinition.html"><code>StoreDefinition</code></a>&lt;<code>Id</code>, <a href="./pinia.html#_extractstatefromsetupstore"><code>_ExtractStateFromSetupStore</code></a>&lt;<code>SS</code>&gt;, <a href="./pinia.html#_extractgettersfromsetupstore"><code>_ExtractGettersFromSetupStore</code></a>&lt;<code>SS</code>&gt;, <a href="./pinia.html#_extractactionsfromsetupstore"><code>_ExtractActionsFromSetupStore</code></a>&lt;<code>SS</code>&gt;&gt;</p><hr><h3 id="getactivepinia" tabindex="-1">getActivePinia <a class="header-anchor" href="#getactivepinia" aria-hidden="true">#</a></h3><p>▸ <strong>getActivePinia</strong>(): <code>undefined</code> | <a href="./../interfaces/pinia.Pinia.html"><code>Pinia</code></a></p><p>如果有的话，获取当前激活的 pinia</p><h4 id="返回值-9" tabindex="-1">返回值 <a class="header-anchor" href="#返回值-9" aria-hidden="true">#</a></h4><p><code>undefined</code> | <a href="./../interfaces/pinia.Pinia.html"><code>Pinia</code></a></p><hr><h3 id="mapactions" tabindex="-1">mapActions <a class="header-anchor" href="#mapactions" aria-hidden="true">#</a></h3><p>▸ <strong>mapActions</strong>&lt;<code>Id</code>, <code>S</code>, <code>G</code>, <code>A</code>, <code>KeyMapper</code>&gt;(<code>useStore</code>, <code>keyMapper</code>): <a href="./pinia.html#_mapactionsobjectreturn"><code>_MapActionsObjectReturn</code></a>&lt;<code>A</code>, <code>KeyMapper</code>&gt;</p><p>通过生成一个传递到组件的 <code>methods</code> 字段的对象， 允许直接使用 store 的 action，而不需要使用组合式 API(<code>setup()</code>)。 该对象的值是 action， 而键是产生的方法名称。</p><p><strong><code>Example</code></strong></p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">export</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">default</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">  methods</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">// 其他方法属性</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">// useCounterStore 有两个 action，分别是 \`increment\` 与 \`setCount\`。</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">...</span><span style="color:#62E884;">mapActions</span><span style="color:#F6F6F4;">(useCounterStore, { moar</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">increment</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">, setIt</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">setCount</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;"> })</span></span>
<span class="line"><span style="color:#F6F6F4;">  },</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#62E884;">created</span><span style="color:#F6F6F4;">() {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#BF9EEE;font-style:italic;">this</span><span style="color:#F6F6F4;">.</span><span style="color:#62E884;">moar</span><span style="color:#F6F6F4;">()</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#BF9EEE;font-style:italic;">this</span><span style="color:#F6F6F4;">.</span><span style="color:#62E884;">setIt</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">2</span><span style="color:#F6F6F4;">)</span></span>
<span class="line"><span style="color:#F6F6F4;">  }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span>
<span class="line"></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#1E754F;">export</span><span style="color:#393A34;"> </span><span style="color:#1E754F;">default</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#998418;">methods</span><span style="color:#999999;">:</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#999999;">    </span><span style="color:#A0ADA0;">// 其他方法属性</span></span>
<span class="line"><span style="color:#999999;">    </span><span style="color:#A0ADA0;">// useCounterStore 有两个 action，分别是 \`increment\` 与 \`setCount\`。</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#999999;">...</span><span style="color:#59873A;">mapActions</span><span style="color:#999999;">(</span><span style="color:#B07D48;">useCounterStore</span><span style="color:#999999;">,</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span><span style="color:#393A34;"> </span><span style="color:#998418;">moar</span><span style="color:#999999;">:</span><span style="color:#393A34;"> </span><span style="color:#B56959AA;">&#39;</span><span style="color:#B56959;">increment</span><span style="color:#B56959AA;">&#39;</span><span style="color:#999999;">,</span><span style="color:#393A34;"> </span><span style="color:#998418;">setIt</span><span style="color:#999999;">:</span><span style="color:#393A34;"> </span><span style="color:#B56959AA;">&#39;</span><span style="color:#B56959;">setCount</span><span style="color:#B56959AA;">&#39;</span><span style="color:#393A34;"> </span><span style="color:#999999;">})</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#999999;">},</span></span>
<span class="line"></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#59873A;">created</span><span style="color:#999999;">()</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#A65E2B;">this</span><span style="color:#999999;">.</span><span style="color:#59873A;">moar</span><span style="color:#999999;">()</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#A65E2B;">this</span><span style="color:#999999;">.</span><span style="color:#59873A;">setIt</span><span style="color:#999999;">(</span><span style="color:#2F798A;">2</span><span style="color:#999999;">)</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#999999;">}</span></span>
<span class="line"><span style="color:#999999;">}</span></span>
<span class="line"></span></code></pre></div><h4 id="类型参数-31" tabindex="-1">类型参数 <a class="header-anchor" href="#类型参数-31" aria-hidden="true">#</a></h4><table><thead><tr><th style="text-align:left;">名称</th><th style="text-align:left;">类型</th></tr></thead><tbody><tr><td style="text-align:left;"><code>Id</code></td><td style="text-align:left;">扩展自 <code>string</code></td></tr><tr><td style="text-align:left;"><code>S</code></td><td style="text-align:left;">扩展自 <a href="./pinia.html#statetree"><code>StateTree</code></a></td></tr><tr><td style="text-align:left;"><code>G</code></td><td style="text-align:left;">扩展自 <code>_GettersTree</code>&lt;<code>S</code>&gt;</td></tr><tr><td style="text-align:left;"><code>A</code></td><td style="text-align:left;"><code>A</code></td></tr><tr><td style="text-align:left;"><code>KeyMapper</code></td><td style="text-align:left;">扩展自 <code>Record</code>&lt;<code>string</code>, keyof <code>A</code>&gt;</td></tr></tbody></table><h4 id="参数-8" tabindex="-1">参数 <a class="header-anchor" href="#参数-8" aria-hidden="true">#</a></h4><table><thead><tr><th style="text-align:left;">名称</th><th style="text-align:left;">类型</th><th style="text-align:left;">描述</th></tr></thead><tbody><tr><td style="text-align:left;"><code>useStore</code></td><td style="text-align:left;"><a href="./../interfaces/pinia.StoreDefinition.html"><code>StoreDefinition</code></a>&lt;<code>Id</code>, <code>S</code>, <code>G</code>, <code>A</code>&gt;</td><td style="text-align:left;">store to map from</td></tr><tr><td style="text-align:left;"><code>keyMapper</code></td><td style="text-align:left;"><code>KeyMapper</code></td><td style="text-align:left;">object to define new names for the actions</td></tr></tbody></table><h4 id="返回值-10" tabindex="-1">返回值 <a class="header-anchor" href="#返回值-10" aria-hidden="true">#</a></h4><p><a href="./pinia.html#_mapactionsobjectreturn"><code>_MapActionsObjectReturn</code></a>&lt;<code>A</code>, <code>KeyMapper</code>&gt;</p><p>▸ <strong>mapActions</strong>&lt;<code>Id</code>, <code>S</code>, <code>G</code>, <code>A</code>&gt;(<code>useStore</code>, <code>keys</code>): <a href="./pinia.html#_mapactionsreturn"><code>_MapActionsReturn</code></a>&lt;<code>A</code>&gt;</p><p>允许直接使用 store 里的 action， 而不是必须使用组合式 API(<code>setup()</code>)， 通过生成一个对象，传递到组件的 <code>methods</code> 字段。</p><p><strong><code>Example</code></strong></p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">export</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">default</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">  methods</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">// 其他方法属性</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">...</span><span style="color:#62E884;">mapActions</span><span style="color:#F6F6F4;">(useCounterStore, [</span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">increment</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">, </span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">setCount</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">])</span></span>
<span class="line"><span style="color:#F6F6F4;">  },</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#62E884;">created</span><span style="color:#F6F6F4;">() {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#BF9EEE;font-style:italic;">this</span><span style="color:#F6F6F4;">.</span><span style="color:#62E884;">increment</span><span style="color:#F6F6F4;">()</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#BF9EEE;font-style:italic;">this</span><span style="color:#F6F6F4;">.</span><span style="color:#62E884;">setCount</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">2</span><span style="color:#F6F6F4;">) </span><span style="color:#7B7F8B;">// 像往常一样传递参数</span></span>
<span class="line"><span style="color:#F6F6F4;">  }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span>
<span class="line"></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#1E754F;">export</span><span style="color:#393A34;"> </span><span style="color:#1E754F;">default</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#998418;">methods</span><span style="color:#999999;">:</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#999999;">    </span><span style="color:#A0ADA0;">// 其他方法属性</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#999999;">...</span><span style="color:#59873A;">mapActions</span><span style="color:#999999;">(</span><span style="color:#B07D48;">useCounterStore</span><span style="color:#999999;">,</span><span style="color:#393A34;"> </span><span style="color:#999999;">[</span><span style="color:#B56959AA;">&#39;</span><span style="color:#B56959;">increment</span><span style="color:#B56959AA;">&#39;</span><span style="color:#999999;">,</span><span style="color:#393A34;"> </span><span style="color:#B56959AA;">&#39;</span><span style="color:#B56959;">setCount</span><span style="color:#B56959AA;">&#39;</span><span style="color:#999999;">])</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#999999;">},</span></span>
<span class="line"></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#59873A;">created</span><span style="color:#999999;">()</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#A65E2B;">this</span><span style="color:#999999;">.</span><span style="color:#59873A;">increment</span><span style="color:#999999;">()</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#A65E2B;">this</span><span style="color:#999999;">.</span><span style="color:#59873A;">setCount</span><span style="color:#999999;">(</span><span style="color:#2F798A;">2</span><span style="color:#999999;">)</span><span style="color:#393A34;"> </span><span style="color:#A0ADA0;">// 像往常一样传递参数</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#999999;">}</span></span>
<span class="line"><span style="color:#999999;">}</span></span>
<span class="line"></span></code></pre></div><h4 id="类型参数-32" tabindex="-1">类型参数 <a class="header-anchor" href="#类型参数-32" aria-hidden="true">#</a></h4><table><thead><tr><th style="text-align:left;">名称</th><th style="text-align:left;">类型</th></tr></thead><tbody><tr><td style="text-align:left;"><code>Id</code></td><td style="text-align:left;">扩展自 <code>string</code></td></tr><tr><td style="text-align:left;"><code>S</code></td><td style="text-align:left;">扩展自 <a href="./pinia.html#statetree"><code>StateTree</code></a></td></tr><tr><td style="text-align:left;"><code>G</code></td><td style="text-align:left;">扩展自 <a href="./pinia.html#_getterstree"><code>_GettersTree</code></a>&lt;<code>S</code>&gt;</td></tr><tr><td style="text-align:left;"><code>A</code></td><td style="text-align:left;"><code>A</code></td></tr></tbody></table><h4 id="参数-9" tabindex="-1">参数 <a class="header-anchor" href="#参数-9" aria-hidden="true">#</a></h4><table><thead><tr><th style="text-align:left;">名称</th><th style="text-align:left;">类型</th><th style="text-align:left;">描述</th></tr></thead><tbody><tr><td style="text-align:left;"><code>useStore</code></td><td style="text-align:left;"><a href="./../interfaces/pinia.StoreDefinition.html"><code>StoreDefinition</code></a>&lt;<code>Id</code>, <code>S</code>, <code>G</code>, <code>A</code>&gt;</td><td style="text-align:left;">store to map from</td></tr><tr><td style="text-align:left;"><code>keys</code></td><td style="text-align:left;">keyof <code>A</code>[]</td><td style="text-align:left;">array of action names to map</td></tr></tbody></table><h4 id="返回值-11" tabindex="-1">返回值 <a class="header-anchor" href="#返回值-11" aria-hidden="true">#</a></h4><p><a href="./pinia.html#_mapactionsreturn"><code>_MapActionsReturn</code></a>&lt;<code>A</code>&gt;</p><hr><h3 id="mapgetters" tabindex="-1">mapGetters <a class="header-anchor" href="#mapgetters" aria-hidden="true">#</a></h3><p>▸ <strong>mapGetters</strong>&lt;<code>Id</code>, <code>S</code>, <code>G</code>, <code>A</code>, <code>KeyMapper</code>&gt;(<code>useStore</code>, <code>keyMapper</code>): <a href="./pinia.html#_mapstateobjectreturn"><code>_MapStateObjectReturn</code></a>&lt;<code>Id</code>, <code>S</code>, <code>G</code>, <code>A</code>, <code>KeyMapper</code>&gt;</p><p>通过生成一个对象传递到组件的 <code>computed</code> 字段中。 允许使用来自一个 store 的 state 和 getter，而不必使用组合式 API(<code>setup()</code>)。 该对象的值是 state 属性/ getter 而键则是产生的计算属性的名称。 另外，你还可以传递一个自定义函数， 该函数将接收 state 的作为其第一个参数。 注意，虽然它可以通过 <code>this</code> 访问组件的实例，但它没有标注类型。</p><p><strong><code>Example</code></strong></p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">export</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">default</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">  computed</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">// 其他计算属性</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">// useCounterStore 有一个名为 \`count\` 的 state 属性以及一个名为 \`double\` 的 getter</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">...</span><span style="color:#62E884;">mapState</span><span style="color:#F6F6F4;">(useCounterStore, {</span></span>
<span class="line"><span style="color:#F6F6F4;">      n</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">count</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">,</span></span>
<span class="line"><span style="color:#F6F6F4;">      </span><span style="color:#62E884;">triple</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">store</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">=&gt;</span><span style="color:#F6F6F4;"> store.n </span><span style="color:#F286C4;">*</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">3</span><span style="color:#F6F6F4;">,</span></span>
<span class="line"><span style="color:#F6F6F4;">      </span><span style="color:#7B7F8B;">// 注意如果你想要使用 \`this\`，那你不能使用箭头函数</span></span>
<span class="line"><span style="color:#F6F6F4;">      </span><span style="color:#62E884;">custom</span><span style="color:#F6F6F4;">(</span><span style="color:#FFB86C;font-style:italic;">store</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;font-style:italic;">this</span><span style="color:#F6F6F4;">.someComponentValue </span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;"> store.n</span></span>
<span class="line"><span style="color:#F6F6F4;">      },</span></span>
<span class="line"><span style="color:#F6F6F4;">      doubleN</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">double</span><span style="color:#DEE492;">&#39;</span></span>
<span class="line"><span style="color:#F6F6F4;">    })</span></span>
<span class="line"><span style="color:#F6F6F4;">  },</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#62E884;">created</span><span style="color:#F6F6F4;">() {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#BF9EEE;font-style:italic;">this</span><span style="color:#F6F6F4;">.n </span><span style="color:#7B7F8B;">// 2</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#BF9EEE;font-style:italic;">this</span><span style="color:#F6F6F4;">.doubleN </span><span style="color:#7B7F8B;">// 4</span></span>
<span class="line"><span style="color:#F6F6F4;">  }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span>
<span class="line"></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#1E754F;">export</span><span style="color:#393A34;"> </span><span style="color:#1E754F;">default</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#998418;">computed</span><span style="color:#999999;">:</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#999999;">    </span><span style="color:#A0ADA0;">// 其他计算属性</span></span>
<span class="line"><span style="color:#999999;">    </span><span style="color:#A0ADA0;">// useCounterStore 有一个名为 \`count\` 的 state 属性以及一个名为 \`double\` 的 getter</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#999999;">...</span><span style="color:#59873A;">mapState</span><span style="color:#999999;">(</span><span style="color:#B07D48;">useCounterStore</span><span style="color:#999999;">,</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">      </span><span style="color:#998418;">n</span><span style="color:#999999;">:</span><span style="color:#393A34;"> </span><span style="color:#B56959AA;">&#39;</span><span style="color:#B56959;">count</span><span style="color:#B56959AA;">&#39;</span><span style="color:#999999;">,</span></span>
<span class="line"><span style="color:#393A34;">      </span><span style="color:#59873A;">triple</span><span style="color:#999999;">:</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">store</span><span style="color:#393A34;"> </span><span style="color:#999999;">=&gt;</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">store</span><span style="color:#999999;">.</span><span style="color:#B07D48;">n</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">*</span><span style="color:#393A34;"> </span><span style="color:#2F798A;">3</span><span style="color:#999999;">,</span></span>
<span class="line"><span style="color:#999999;">      </span><span style="color:#A0ADA0;">// 注意如果你想要使用 \`this\`，那你不能使用箭头函数</span></span>
<span class="line"><span style="color:#393A34;">      </span><span style="color:#59873A;">custom</span><span style="color:#999999;">(</span><span style="color:#B07D48;">store</span><span style="color:#999999;">)</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">        </span><span style="color:#1E754F;">return</span><span style="color:#393A34;"> </span><span style="color:#A65E2B;">this</span><span style="color:#999999;">.</span><span style="color:#B07D48;">someComponentValue</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">+</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">store</span><span style="color:#999999;">.</span><span style="color:#B07D48;">n</span></span>
<span class="line"><span style="color:#393A34;">      </span><span style="color:#999999;">},</span></span>
<span class="line"><span style="color:#393A34;">      </span><span style="color:#998418;">doubleN</span><span style="color:#999999;">:</span><span style="color:#393A34;"> </span><span style="color:#B56959AA;">&#39;</span><span style="color:#B56959;">double</span><span style="color:#B56959AA;">&#39;</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#999999;">})</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#999999;">},</span></span>
<span class="line"></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#59873A;">created</span><span style="color:#999999;">()</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#A65E2B;">this</span><span style="color:#999999;">.</span><span style="color:#B07D48;">n</span><span style="color:#393A34;"> </span><span style="color:#A0ADA0;">// 2</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#A65E2B;">this</span><span style="color:#999999;">.</span><span style="color:#B07D48;">doubleN</span><span style="color:#393A34;"> </span><span style="color:#A0ADA0;">// 4</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#999999;">}</span></span>
<span class="line"><span style="color:#999999;">}</span></span>
<span class="line"></span></code></pre></div><h4 id="类型参数-33" tabindex="-1">类型参数 <a class="header-anchor" href="#类型参数-33" aria-hidden="true">#</a></h4><table><thead><tr><th style="text-align:left;">名称</th><th style="text-align:left;">类型</th></tr></thead><tbody><tr><td style="text-align:left;"><code>Id</code></td><td style="text-align:left;">extends <code>string</code></td></tr><tr><td style="text-align:left;"><code>S</code></td><td style="text-align:left;">extends <a href="./pinia.html#statetree"><code>StateTree</code></a></td></tr><tr><td style="text-align:left;"><code>G</code></td><td style="text-align:left;">extends <a href="./pinia.html#_getterstree"><code>_GettersTree</code></a>&lt;<code>S</code>&gt;</td></tr><tr><td style="text-align:left;"><code>A</code></td><td style="text-align:left;"><code>A</code></td></tr><tr><td style="text-align:left;"><code>KeyMapper</code></td><td style="text-align:left;">extends <code>Record</code>&lt;<code>string</code>, keyof <code>S</code> | keyof <code>G</code> | (<code>store</code>: <a href="./pinia.html#store"><code>Store</code></a>&lt;<code>Id</code>, <code>S</code>, <code>G</code>, <code>A</code>&gt;) =&gt; <code>any</code>&gt;</td></tr></tbody></table><h4 id="参数-10" tabindex="-1">参数 <a class="header-anchor" href="#参数-10" aria-hidden="true">#</a></h4><table><thead><tr><th style="text-align:left;">名称</th><th style="text-align:left;">类型</th><th style="text-align:left;">描述</th></tr></thead><tbody><tr><td style="text-align:left;"><code>useStore</code></td><td style="text-align:left;"><a href="./../interfaces/pinia.StoreDefinition.html"><code>StoreDefinition</code></a>&lt;<code>Id</code>, <code>S</code>, <code>G</code>, <code>A</code>&gt;</td><td style="text-align:left;">store to map from</td></tr><tr><td style="text-align:left;"><code>keyMapper</code></td><td style="text-align:left;"><code>KeyMapper</code></td><td style="text-align:left;">object of state properties or getters</td></tr></tbody></table><h4 id="返回值-12" tabindex="-1">返回值 <a class="header-anchor" href="#返回值-12" aria-hidden="true">#</a></h4><p><a href="./pinia.html#_mapstateobjectreturn"><code>_MapStateObjectReturn</code></a>&lt;<code>Id</code>, <code>S</code>, <code>G</code>, <code>A</code>, <code>KeyMapper</code>&gt;</p><p>▸ <strong>mapGetters</strong>&lt;<code>Id</code>, <code>S</code>, <code>G</code>, <code>A</code>, <code>Keys</code>&gt;(<code>useStore</code>, <code>keys</code>): <a href="./pinia.html#_mapstatereturn"><code>_MapStateReturn</code></a>&lt;<code>S</code>, <code>G</code>, <code>Keys</code>&gt;</p><p>通过生成一个对象传递到组件的 <code>computed</code> 字段中， 以允许使用来自一个 store 的 state 和 getter， 而不必使用组合式 API(<code>setup()</code>)，</p><p><strong><code>Example</code></strong></p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">export</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">default</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">  computed</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">// 其他计算属性</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">...</span><span style="color:#62E884;">mapState</span><span style="color:#F6F6F4;">(useCounterStore, [</span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">count</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">, </span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">double</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">])</span></span>
<span class="line"><span style="color:#F6F6F4;">  },</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#62E884;">created</span><span style="color:#F6F6F4;">() {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#BF9EEE;font-style:italic;">this</span><span style="color:#F6F6F4;">.count </span><span style="color:#7B7F8B;">// 2</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#BF9EEE;font-style:italic;">this</span><span style="color:#F6F6F4;">.double </span><span style="color:#7B7F8B;">// 4</span></span>
<span class="line"><span style="color:#F6F6F4;">  }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span>
<span class="line"></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#1E754F;">export</span><span style="color:#393A34;"> </span><span style="color:#1E754F;">default</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#998418;">computed</span><span style="color:#999999;">:</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#999999;">    </span><span style="color:#A0ADA0;">// 其他计算属性</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#999999;">...</span><span style="color:#59873A;">mapState</span><span style="color:#999999;">(</span><span style="color:#B07D48;">useCounterStore</span><span style="color:#999999;">,</span><span style="color:#393A34;"> </span><span style="color:#999999;">[</span><span style="color:#B56959AA;">&#39;</span><span style="color:#B56959;">count</span><span style="color:#B56959AA;">&#39;</span><span style="color:#999999;">,</span><span style="color:#393A34;"> </span><span style="color:#B56959AA;">&#39;</span><span style="color:#B56959;">double</span><span style="color:#B56959AA;">&#39;</span><span style="color:#999999;">])</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#999999;">},</span></span>
<span class="line"></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#59873A;">created</span><span style="color:#999999;">()</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#A65E2B;">this</span><span style="color:#999999;">.</span><span style="color:#B07D48;">count</span><span style="color:#393A34;"> </span><span style="color:#A0ADA0;">// 2</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#A65E2B;">this</span><span style="color:#999999;">.</span><span style="color:#B07D48;">double</span><span style="color:#393A34;"> </span><span style="color:#A0ADA0;">// 4</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#999999;">}</span></span>
<span class="line"><span style="color:#999999;">}</span></span>
<span class="line"></span></code></pre></div><h4 id="类型参数-34" tabindex="-1">类型参数 <a class="header-anchor" href="#类型参数-34" aria-hidden="true">#</a></h4><table><thead><tr><th style="text-align:left;">名称</th><th style="text-align:left;">类型</th></tr></thead><tbody><tr><td style="text-align:left;"><code>Id</code></td><td style="text-align:left;">extends <code>string</code></td></tr><tr><td style="text-align:left;"><code>S</code></td><td style="text-align:left;">extends <a href="./pinia.html#statetree"><code>StateTree</code></a></td></tr><tr><td style="text-align:left;"><code>G</code></td><td style="text-align:left;">extends <a href="./pinia.html#_getterstree"><code>_GettersTree</code></a>&lt;<code>S</code>&gt;</td></tr><tr><td style="text-align:left;"><code>A</code></td><td style="text-align:left;"><code>A</code></td></tr><tr><td style="text-align:left;"><code>Keys</code></td><td style="text-align:left;">extends <code>string</code> | <code>number</code> | <code>symbol</code></td></tr></tbody></table><h4 id="参数-11" tabindex="-1">参数 <a class="header-anchor" href="#参数-11" aria-hidden="true">#</a></h4><table><thead><tr><th style="text-align:left;">名称</th><th style="text-align:left;">类型</th><th style="text-align:left;">描述</th></tr></thead><tbody><tr><td style="text-align:left;"><code>useStore</code></td><td style="text-align:left;"><a href="./../interfaces/pinia.StoreDefinition.html"><code>StoreDefinition</code></a>&lt;<code>Id</code>, <code>S</code>, <code>G</code>, <code>A</code>&gt;</td><td style="text-align:left;">store to map from</td></tr><tr><td style="text-align:left;"><code>keys</code></td><td style="text-align:left;">readonly <code>Keys</code>[]</td><td style="text-align:left;">array of state properties or getters</td></tr></tbody></table><h4 id="返回值-13" tabindex="-1">返回值 <a class="header-anchor" href="#返回值-13" aria-hidden="true">#</a></h4><p><a href="./pinia.html#_mapstatereturn"><code>_MapStateReturn</code></a>&lt;<code>S</code>, <code>G</code>, <code>Keys</code>&gt;</p><hr><h3 id="mapstate" tabindex="-1">mapState <a class="header-anchor" href="#mapstate" aria-hidden="true">#</a></h3><p>▸ <strong>mapState</strong>&lt;<code>Id</code>, <code>S</code>, <code>G</code>, <code>A</code>, <code>KeyMapper</code>&gt;(<code>useStore</code>, <code>keyMapper</code>): <a href="./pinia.html#_mapstateobjectreturn"><code>_MapStateObjectReturn</code></a>&lt;<code>Id</code>, <code>S</code>, <code>G</code>, <code>A</code>, <code>KeyMapper</code>&gt;</p><p>通过生成一个对象，并传递至组件的 <code>computed</code> 字段， 以允许在不使用组合式 API(<code>setup()</code>)的情况下使用一个 store 的 state 和 getter。 该对象的值是 state 属性/getter， 而键是生成的计算属性名称。 你也可以选择传递一个自定义函数，该函数将接收 store 作为其第一个参数。 注意，虽然它可以通过 <code>this</code> 访问组件实例，但它没有标注类型。</p><p><strong><code>Example</code></strong></p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">export</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">default</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">  computed</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">// 其他计算属性</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">// useCounterStore 拥有一个名为 \`count\` 的 state 属性和一个名为 \`double\` 的 getter</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">...</span><span style="color:#62E884;">mapState</span><span style="color:#F6F6F4;">(useCounterStore, {</span></span>
<span class="line"><span style="color:#F6F6F4;">      n</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">count</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">,</span></span>
<span class="line"><span style="color:#F6F6F4;">      </span><span style="color:#62E884;">triple</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#FFB86C;font-style:italic;">store</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">=&gt;</span><span style="color:#F6F6F4;"> store.n </span><span style="color:#F286C4;">*</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">3</span><span style="color:#F6F6F4;">,</span></span>
<span class="line"><span style="color:#F6F6F4;">      </span><span style="color:#7B7F8B;">// 如果想使用 \`this\`，就不能使用箭头函数</span></span>
<span class="line"><span style="color:#F6F6F4;">      </span><span style="color:#62E884;">custom</span><span style="color:#F6F6F4;">(</span><span style="color:#FFB86C;font-style:italic;">store</span><span style="color:#F6F6F4;">) {</span></span>
<span class="line"><span style="color:#F6F6F4;">        </span><span style="color:#F286C4;">return</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;font-style:italic;">this</span><span style="color:#F6F6F4;">.someComponentValue </span><span style="color:#F286C4;">+</span><span style="color:#F6F6F4;"> store.n</span></span>
<span class="line"><span style="color:#F6F6F4;">      },</span></span>
<span class="line"><span style="color:#F6F6F4;">      doubleN</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">double</span><span style="color:#DEE492;">&#39;</span></span>
<span class="line"><span style="color:#F6F6F4;">    })</span></span>
<span class="line"><span style="color:#F6F6F4;">  },</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#62E884;">created</span><span style="color:#F6F6F4;">() {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#BF9EEE;font-style:italic;">this</span><span style="color:#F6F6F4;">.n </span><span style="color:#7B7F8B;">// 2</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#BF9EEE;font-style:italic;">this</span><span style="color:#F6F6F4;">.doubleN </span><span style="color:#7B7F8B;">// 4</span></span>
<span class="line"><span style="color:#F6F6F4;">  }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span>
<span class="line"></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#1E754F;">export</span><span style="color:#393A34;"> </span><span style="color:#1E754F;">default</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#998418;">computed</span><span style="color:#999999;">:</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#999999;">    </span><span style="color:#A0ADA0;">// 其他计算属性</span></span>
<span class="line"><span style="color:#999999;">    </span><span style="color:#A0ADA0;">// useCounterStore 拥有一个名为 \`count\` 的 state 属性和一个名为 \`double\` 的 getter</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#999999;">...</span><span style="color:#59873A;">mapState</span><span style="color:#999999;">(</span><span style="color:#B07D48;">useCounterStore</span><span style="color:#999999;">,</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">      </span><span style="color:#998418;">n</span><span style="color:#999999;">:</span><span style="color:#393A34;"> </span><span style="color:#B56959AA;">&#39;</span><span style="color:#B56959;">count</span><span style="color:#B56959AA;">&#39;</span><span style="color:#999999;">,</span></span>
<span class="line"><span style="color:#393A34;">      </span><span style="color:#59873A;">triple</span><span style="color:#999999;">:</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">store</span><span style="color:#393A34;"> </span><span style="color:#999999;">=&gt;</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">store</span><span style="color:#999999;">.</span><span style="color:#B07D48;">n</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">*</span><span style="color:#393A34;"> </span><span style="color:#2F798A;">3</span><span style="color:#999999;">,</span></span>
<span class="line"><span style="color:#999999;">      </span><span style="color:#A0ADA0;">// 如果想使用 \`this\`，就不能使用箭头函数</span></span>
<span class="line"><span style="color:#393A34;">      </span><span style="color:#59873A;">custom</span><span style="color:#999999;">(</span><span style="color:#B07D48;">store</span><span style="color:#999999;">)</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">        </span><span style="color:#1E754F;">return</span><span style="color:#393A34;"> </span><span style="color:#A65E2B;">this</span><span style="color:#999999;">.</span><span style="color:#B07D48;">someComponentValue</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">+</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">store</span><span style="color:#999999;">.</span><span style="color:#B07D48;">n</span></span>
<span class="line"><span style="color:#393A34;">      </span><span style="color:#999999;">},</span></span>
<span class="line"><span style="color:#393A34;">      </span><span style="color:#998418;">doubleN</span><span style="color:#999999;">:</span><span style="color:#393A34;"> </span><span style="color:#B56959AA;">&#39;</span><span style="color:#B56959;">double</span><span style="color:#B56959AA;">&#39;</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#999999;">})</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#999999;">},</span></span>
<span class="line"></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#59873A;">created</span><span style="color:#999999;">()</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#A65E2B;">this</span><span style="color:#999999;">.</span><span style="color:#B07D48;">n</span><span style="color:#393A34;"> </span><span style="color:#A0ADA0;">// 2</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#A65E2B;">this</span><span style="color:#999999;">.</span><span style="color:#B07D48;">doubleN</span><span style="color:#393A34;"> </span><span style="color:#A0ADA0;">// 4</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#999999;">}</span></span>
<span class="line"><span style="color:#999999;">}</span></span>
<span class="line"></span></code></pre></div><h4 id="类型参数-35" tabindex="-1">类型参数 <a class="header-anchor" href="#类型参数-35" aria-hidden="true">#</a></h4><table><thead><tr><th style="text-align:left;">名称</th><th style="text-align:left;">类型</th></tr></thead><tbody><tr><td style="text-align:left;"><code>Id</code></td><td style="text-align:left;">extends <code>string</code></td></tr><tr><td style="text-align:left;"><code>S</code></td><td style="text-align:left;">extends <a href="./pinia.html#statetree"><code>StateTree</code></a></td></tr><tr><td style="text-align:left;"><code>G</code></td><td style="text-align:left;">extends <a href="./pinia.html#_getterstree"><code>_GettersTree</code></a>&lt;<code>S</code>&gt;</td></tr><tr><td style="text-align:left;"><code>A</code></td><td style="text-align:left;"><code>A</code></td></tr><tr><td style="text-align:left;"><code>KeyMapper</code></td><td style="text-align:left;">extends <code>Record</code>&lt;<code>string</code>, keyof <code>S</code> | keyof <code>G</code> | (<code>store</code>: <a href="./pinia.html#store"><code>Store</code></a>&lt;<code>Id</code>, <code>S</code>, <code>G</code>, <code>A</code>&gt;) =&gt; <code>any</code>&gt;</td></tr></tbody></table><h4 id="参数-12" tabindex="-1">参数 <a class="header-anchor" href="#参数-12" aria-hidden="true">#</a></h4><table><thead><tr><th style="text-align:left;">名称</th><th style="text-align:left;">类型</th><th style="text-align:left;">描述</th></tr></thead><tbody><tr><td style="text-align:left;"><code>useStore</code></td><td style="text-align:left;"><a href="./../interfaces/pinia.StoreDefinition.html"><code>StoreDefinition</code></a>&lt;<code>Id</code>, <code>S</code>, <code>G</code>, <code>A</code>&gt;</td><td style="text-align:left;">store to map from</td></tr><tr><td style="text-align:left;"><code>keyMapper</code></td><td style="text-align:left;"><code>KeyMapper</code></td><td style="text-align:left;">object of state properties or getters</td></tr></tbody></table><h4 id="返回值-14" tabindex="-1">返回值 <a class="header-anchor" href="#返回值-14" aria-hidden="true">#</a></h4><p><a href="./pinia.html#_mapstateobjectreturn"><code>_MapStateObjectReturn</code></a>&lt;<code>Id</code>, <code>S</code>, <code>G</code>, <code>A</code>, <code>KeyMapper</code>&gt;</p><p>▸ <strong>mapState</strong>&lt;<code>Id</code>, <code>S</code>, <code>G</code>, <code>A</code>, <code>Keys</code>&gt;(<code>useStore</code>, <code>keys</code>): <a href="./pinia.html#_mapstatereturn"><code>_MapStateReturn</code></a>&lt;<code>S</code>, <code>G</code>, <code>Keys</code>&gt;</p><p>通过生成一个对象，并传递到组件的 <code>computed</code> 字段， 允许在不使用组合式 API(<code>setup()</code>)的情况下 使用一个 store 的 state 和 getter，</p><p><strong><code>Example</code></strong></p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">export</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">default</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">  computed</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">// 其他计算属性</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">...</span><span style="color:#62E884;">mapState</span><span style="color:#F6F6F4;">(useCounterStore, [</span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">count</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">, </span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">double</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">])</span></span>
<span class="line"><span style="color:#F6F6F4;">  },</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#62E884;">created</span><span style="color:#F6F6F4;">() {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#BF9EEE;font-style:italic;">this</span><span style="color:#F6F6F4;">.count </span><span style="color:#7B7F8B;">// 2</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#BF9EEE;font-style:italic;">this</span><span style="color:#F6F6F4;">.double </span><span style="color:#7B7F8B;">// 4</span></span>
<span class="line"><span style="color:#F6F6F4;">  }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span>
<span class="line"></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#1E754F;">export</span><span style="color:#393A34;"> </span><span style="color:#1E754F;">default</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#998418;">computed</span><span style="color:#999999;">:</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#999999;">    </span><span style="color:#A0ADA0;">// 其他计算属性</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#999999;">...</span><span style="color:#59873A;">mapState</span><span style="color:#999999;">(</span><span style="color:#B07D48;">useCounterStore</span><span style="color:#999999;">,</span><span style="color:#393A34;"> </span><span style="color:#999999;">[</span><span style="color:#B56959AA;">&#39;</span><span style="color:#B56959;">count</span><span style="color:#B56959AA;">&#39;</span><span style="color:#999999;">,</span><span style="color:#393A34;"> </span><span style="color:#B56959AA;">&#39;</span><span style="color:#B56959;">double</span><span style="color:#B56959AA;">&#39;</span><span style="color:#999999;">])</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#999999;">},</span></span>
<span class="line"></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#59873A;">created</span><span style="color:#999999;">()</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#A65E2B;">this</span><span style="color:#999999;">.</span><span style="color:#B07D48;">count</span><span style="color:#393A34;"> </span><span style="color:#A0ADA0;">// 2</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#A65E2B;">this</span><span style="color:#999999;">.</span><span style="color:#B07D48;">double</span><span style="color:#393A34;"> </span><span style="color:#A0ADA0;">// 4</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#999999;">}</span></span>
<span class="line"><span style="color:#999999;">}</span></span>
<span class="line"></span></code></pre></div><h4 id="类型参数-36" tabindex="-1">类型参数 <a class="header-anchor" href="#类型参数-36" aria-hidden="true">#</a></h4><table><thead><tr><th style="text-align:left;">名称</th><th style="text-align:left;">类型</th></tr></thead><tbody><tr><td style="text-align:left;"><code>Id</code></td><td style="text-align:left;">extends <code>string</code></td></tr><tr><td style="text-align:left;"><code>S</code></td><td style="text-align:left;">extends <a href="./pinia.html#statetree"><code>StateTree</code></a></td></tr><tr><td style="text-align:left;"><code>G</code></td><td style="text-align:left;">extends <a href="./pinia.html#_getterstree"><code>_GettersTree</code></a>&lt;<code>S</code>&gt;</td></tr><tr><td style="text-align:left;"><code>A</code></td><td style="text-align:left;"><code>A</code></td></tr><tr><td style="text-align:left;"><code>Keys</code></td><td style="text-align:left;">extends <code>string</code> | <code>number</code> | <code>symbol</code></td></tr></tbody></table><h4 id="参数-13" tabindex="-1">参数 <a class="header-anchor" href="#参数-13" aria-hidden="true">#</a></h4><table><thead><tr><th style="text-align:left;">名称</th><th style="text-align:left;">类型</th><th style="text-align:left;">描述</th></tr></thead><tbody><tr><td style="text-align:left;"><code>useStore</code></td><td style="text-align:left;"><a href="./../interfaces/pinia.StoreDefinition.html"><code>StoreDefinition</code></a>&lt;<code>Id</code>, <code>S</code>, <code>G</code>, <code>A</code>&gt;</td><td style="text-align:left;">store to map from</td></tr><tr><td style="text-align:left;"><code>keys</code></td><td style="text-align:left;">readonly <code>Keys</code>[]</td><td style="text-align:left;">array of state properties or getters</td></tr></tbody></table><h4 id="返回值-15" tabindex="-1">返回值 <a class="header-anchor" href="#返回值-15" aria-hidden="true">#</a></h4><p><a href="./pinia.html#_mapstatereturn"><code>_MapStateReturn</code></a>&lt;<code>S</code>, <code>G</code>, <code>Keys</code>&gt;</p><hr><h3 id="mapstores" tabindex="-1">mapStores <a class="header-anchor" href="#mapstores" aria-hidden="true">#</a></h3><p>▸ <strong>mapStores</strong>&lt;<code>Stores</code>&gt;(...<code>stores</code>): <a href="./pinia.html#_spread"><code>_Spread</code></a>&lt;<code>Stores</code>&gt;</p><p>通过生成一个对象，传递到组件的 <code>computed</code> 字段 以允许在不使用组合式 API(<code>setup()</code>)的情况下使用 store。 它接受一个 store 定义的列表参数。</p><p><strong><code>Example</code></strong></p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">export</span><span style="color:#F6F6F4;"> </span><span style="color:#F286C4;">default</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">  computed</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">// 其他计算属性</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">...</span><span style="color:#62E884;">mapStores</span><span style="color:#F6F6F4;">(useUserStore, useCartStore)</span></span>
<span class="line"><span style="color:#F6F6F4;">  },</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#62E884;">created</span><span style="color:#F6F6F4;">() {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#BF9EEE;font-style:italic;">this</span><span style="color:#F6F6F4;">.userStore </span><span style="color:#7B7F8B;">// id 为 &quot;user&quot; 的 store</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#BF9EEE;font-style:italic;">this</span><span style="color:#F6F6F4;">.cartStore </span><span style="color:#7B7F8B;">// id 为 &quot;cart&quot; 的 store</span></span>
<span class="line"><span style="color:#F6F6F4;">  }</span></span>
<span class="line"><span style="color:#F6F6F4;">}</span></span>
<span class="line"></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#1E754F;">export</span><span style="color:#393A34;"> </span><span style="color:#1E754F;">default</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#998418;">computed</span><span style="color:#999999;">:</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#999999;">    </span><span style="color:#A0ADA0;">// 其他计算属性</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#999999;">...</span><span style="color:#59873A;">mapStores</span><span style="color:#999999;">(</span><span style="color:#B07D48;">useUserStore</span><span style="color:#999999;">,</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">useCartStore</span><span style="color:#999999;">)</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#999999;">},</span></span>
<span class="line"></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#59873A;">created</span><span style="color:#999999;">()</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#A65E2B;">this</span><span style="color:#999999;">.</span><span style="color:#B07D48;">userStore</span><span style="color:#393A34;"> </span><span style="color:#A0ADA0;">// id 为 &quot;user&quot; 的 store</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#A65E2B;">this</span><span style="color:#999999;">.</span><span style="color:#B07D48;">cartStore</span><span style="color:#393A34;"> </span><span style="color:#A0ADA0;">// id 为 &quot;cart&quot; 的 store</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#999999;">}</span></span>
<span class="line"><span style="color:#999999;">}</span></span>
<span class="line"></span></code></pre></div><h4 id="类型参数-37" tabindex="-1">类型参数 <a class="header-anchor" href="#类型参数-37" aria-hidden="true">#</a></h4><table><thead><tr><th style="text-align:left;">名称</th><th style="text-align:left;">类型</th></tr></thead><tbody><tr><td style="text-align:left;"><code>Stores</code></td><td style="text-align:left;">扩展 <code>any</code>[]</td></tr></tbody></table><h4 id="参数-14" tabindex="-1">参数 <a class="header-anchor" href="#参数-14" aria-hidden="true">#</a></h4><table><thead><tr><th style="text-align:left;">名称</th><th style="text-align:left;">类型</th><th style="text-align:left;">描述</th></tr></thead><tbody><tr><td style="text-align:left;"><code>...stores</code></td><td style="text-align:left;">[...Stores[]]</td><td style="text-align:left;">list of stores to map to an object</td></tr></tbody></table><h4 id="返回值-16" tabindex="-1">返回值 <a class="header-anchor" href="#返回值-16" aria-hidden="true">#</a></h4><p><a href="./pinia.html#_spread"><code>_Spread</code></a>&lt;<code>Stores</code>&gt;</p><hr><h3 id="mapwritablestate" tabindex="-1">mapWritableState <a class="header-anchor" href="#mapwritablestate" aria-hidden="true">#</a></h3><p>▸ <strong>mapWritableState</strong>&lt;<code>Id</code>, <code>S</code>, <code>G</code>, <code>A</code>, <code>KeyMapper</code>&gt;(<code>useStore</code>, <code>keyMapper</code>): <a href="./pinia.html#_mapwritablestateobjectreturn"><code>_MapWritableStateObjectReturn</code></a>&lt;<code>S</code>, <code>KeyMapper</code>&gt;</p><p>除了创建的计算属性的 setter，其他与 <code>mapState()</code> 相同， 所以 state 可以被修改。 与 <code>mapState()</code> 不同的是，只有 <code>state</code> 属性可以被添加。</p><h4 id="类型参数-38" tabindex="-1">类型参数 <a class="header-anchor" href="#类型参数-38" aria-hidden="true">#</a></h4><table><thead><tr><th style="text-align:left;">名称</th><th style="text-align:left;">类型</th></tr></thead><tbody><tr><td style="text-align:left;"><code>Id</code></td><td style="text-align:left;">extends <code>string</code></td></tr><tr><td style="text-align:left;"><code>S</code></td><td style="text-align:left;">extends <a href="./pinia.html#statetree"><code>StateTree</code></a></td></tr><tr><td style="text-align:left;"><code>G</code></td><td style="text-align:left;">extends <a href="./pinia.html#_getterstree"><code>_GettersTree</code></a>&lt;<code>S</code>&gt;</td></tr><tr><td style="text-align:left;"><code>A</code></td><td style="text-align:left;"><code>A</code></td></tr><tr><td style="text-align:left;"><code>KeyMapper</code></td><td style="text-align:left;">extends <code>Record</code>&lt;<code>string</code>, keyof <code>S</code>&gt;</td></tr></tbody></table><h4 id="参数-15" tabindex="-1">参数 <a class="header-anchor" href="#参数-15" aria-hidden="true">#</a></h4><table><thead><tr><th style="text-align:left;">名称</th><th style="text-align:left;">类型</th><th style="text-align:left;">描述</th></tr></thead><tbody><tr><td style="text-align:left;"><code>useStore</code></td><td style="text-align:left;"><a href="./../interfaces/pinia.StoreDefinition.html"><code>StoreDefinition</code></a>&lt;<code>Id</code>, <code>S</code>, <code>G</code>, <code>A</code>&gt;</td><td style="text-align:left;">store to map from</td></tr><tr><td style="text-align:left;"><code>keyMapper</code></td><td style="text-align:left;"><code>KeyMapper</code></td><td style="text-align:left;">object of state properties</td></tr></tbody></table><h4 id="返回值-17" tabindex="-1">返回值 <a class="header-anchor" href="#返回值-17" aria-hidden="true">#</a></h4><p><a href="./pinia.html#_mapwritablestateobjectreturn"><code>_MapWritableStateObjectReturn</code></a>&lt;<code>S</code>, <code>KeyMapper</code>&gt;</p><p>▸ <strong>mapWritableState</strong>&lt;<code>Id</code>, <code>S</code>, <code>G</code>, <code>A</code>&gt;(<code>useStore</code>, <code>keys</code>): <a href="./pinia.html#_mapwritablestatereturn"><code>_MapWritableStateReturn</code></a>&lt;<code>S</code>&gt;</p><p>通过生成一个对象并传递到组件的 <code>computed</code> 字段 以允许在不使用组合式 API(<code>setup()</code>)的情况下 使用来自一个 store 的 state 和 getter，。</p><h4 id="类型参数-39" tabindex="-1">类型参数 <a class="header-anchor" href="#类型参数-39" aria-hidden="true">#</a></h4><table><thead><tr><th style="text-align:left;">名称</th><th style="text-align:left;">类型</th></tr></thead><tbody><tr><td style="text-align:left;"><code>Id</code></td><td style="text-align:left;">extends <code>string</code></td></tr><tr><td style="text-align:left;"><code>S</code></td><td style="text-align:left;">extends <a href="./pinia.html#statetree"><code>StateTree</code></a></td></tr><tr><td style="text-align:left;"><code>G</code></td><td style="text-align:left;">extends <a href="./pinia.html#_getterstree"><code>_GettersTree</code></a>&lt;<code>S</code>&gt;</td></tr><tr><td style="text-align:left;"><code>A</code></td><td style="text-align:left;"><code>A</code></td></tr></tbody></table><h4 id="参数-16" tabindex="-1">参数 <a class="header-anchor" href="#参数-16" aria-hidden="true">#</a></h4><table><thead><tr><th style="text-align:left;">名称</th><th style="text-align:left;">类型</th><th style="text-align:left;">描述</th></tr></thead><tbody><tr><td style="text-align:left;"><code>useStore</code></td><td style="text-align:left;"><a href="./../interfaces/pinia.StoreDefinition.html"><code>StoreDefinition</code></a>&lt;<code>Id</code>, <code>S</code>, <code>G</code>, <code>A</code>&gt;</td><td style="text-align:left;">store to map from</td></tr><tr><td style="text-align:left;"><code>keys</code></td><td style="text-align:left;">keyof <code>S</code>[]</td><td style="text-align:left;">array of state properties</td></tr></tbody></table><h4 id="返回值-18" tabindex="-1">返回值 <a class="header-anchor" href="#返回值-18" aria-hidden="true">#</a></h4><p><a href="./pinia.html#_mapwritablestatereturn"><code>_MapWritableStateReturn</code></a>&lt;<code>S</code>&gt;</p><hr><h3 id="setactivepinia" tabindex="-1">setActivePinia <a class="header-anchor" href="#setactivepinia" aria-hidden="true">#</a></h3><p>▸ <strong>setActivePinia</strong>(<code>pinia</code>): <code>undefined</code> | <a href="./../interfaces/pinia.Pinia.html"><code>Pinia</code></a></p><p>设置或取消设置激活的 pinia。 在 SSR 和内部调用 action 和 getter 时使用。</p><h4 id="参数-17" tabindex="-1">参数 <a class="header-anchor" href="#参数-17" aria-hidden="true">#</a></h4><table><thead><tr><th style="text-align:left;">名称</th><th style="text-align:left;">类型</th><th style="text-align:left;">描述</th></tr></thead><tbody><tr><td style="text-align:left;"><code>pinia</code></td><td style="text-align:left;"><code>undefined</code> | <a href="./../interfaces/pinia.Pinia.html"><code>Pinia</code></a></td><td style="text-align:left;">Pinia instance</td></tr></tbody></table><h4 id="返回值-19" tabindex="-1">返回值 <a class="header-anchor" href="#返回值-19" aria-hidden="true">#</a></h4><p><code>undefined</code> | <a href="./../interfaces/pinia.Pinia.html"><code>Pinia</code></a></p><hr><h3 id="setmapstoresuffix" tabindex="-1">setMapStoreSuffix <a class="header-anchor" href="#setmapstoresuffix" aria-hidden="true">#</a></h3><p>▸ <strong>setMapStoreSuffix</strong>(<code>suffix</code>): <code>void</code></p><p>改变由 <code>mapStores()</code> 添加的后缀。可以设置为空字符串。 默认为<code>&quot;Store&quot;</code>。如果你需要使用 TypeScript， 请确保扩展 MapStoresCustomization 接口。</p><h4 id="parameters" tabindex="-1">参数 <a class="header-anchor" href="#parameters" aria-hidden="true">#</a></h4><table><thead><tr><th style="text-align:left;">名称</th><th style="text-align:left;">类型</th><th style="text-align:left;">描述</th></tr></thead><tbody><tr><td style="text-align:left;"><code>suffix</code></td><td style="text-align:left;"><code>string</code></td><td style="text-align:left;">new suffix</td></tr></tbody></table><h4 id="返回值-20" tabindex="-1">返回值 <a class="header-anchor" href="#返回值-20" aria-hidden="true">#</a></h4><p><code>void</code></p><hr><h3 id="skiphydrate" tabindex="-1">skipHydrate <a class="header-anchor" href="#skiphydrate" aria-hidden="true">#</a></h3><p>▸ <strong>skipHydrate</strong>&lt;<code>T</code>&gt;(<code>obj</code>): <code>T</code></p><p>告诉 Pinia 跳过给定对象的激活过程。当你在 store 中返回一个有状态的对象，但它并不是真正的状态时，(仅)在 setup store 中这是很有用的。 例如，在一个 setup store 中返回一个路由器实例。</p><h4 id="类型参数-40" tabindex="-1">类型参数 <a class="header-anchor" href="#类型参数-40" aria-hidden="true">#</a></h4><table><thead><tr><th style="text-align:left;">名称</th><th style="text-align:left;">类型</th></tr></thead><tbody><tr><td style="text-align:left;"><code>T</code></td><td style="text-align:left;"><code>any</code></td></tr></tbody></table><h4 id="参数-18" tabindex="-1">参数 <a class="header-anchor" href="#参数-18" aria-hidden="true">#</a></h4><table><thead><tr><th style="text-align:left;">名称</th><th style="text-align:left;">类型</th><th style="text-align:left;">描述</th></tr></thead><tbody><tr><td style="text-align:left;"><code>obj</code></td><td style="text-align:left;"><code>T</code></td><td style="text-align:left;">target object</td></tr></tbody></table><h4 id="返回值-21" tabindex="-1">返回值 <a class="header-anchor" href="#返回值-21" aria-hidden="true">#</a></h4><p><code>T</code></p><p>obj</p><hr><h3 id="storetorefs" tabindex="-1">storeToRefs <a class="header-anchor" href="#storetorefs" aria-hidden="true">#</a></h3><p>▸ <strong>storeToRefs</strong>&lt;<code>SS</code>&gt;(<code>store</code>): <code>ToRefs</code>&lt;<a href="./pinia.html#storestate"><code>StoreState</code></a>&lt;<code>SS</code>&gt; &amp; <a href="./pinia.html#storegetters"><code>StoreGetters</code></a>&lt;<code>SS</code>&gt; &amp; <a href="./../interfaces/pinia.PiniaCustomStateProperties.html"><code>PiniaCustomStateProperties</code></a>&lt;<a href="./pinia.html#storestate"><code>StoreState</code></a>&lt;<code>SS</code>&gt;&gt;&gt;</p><p>创建一个引用对象，包含 store 的所有 state、 getter 和 plugin 添加的 state 属性。 类似于 <code>toRefs()</code>，但专门为 Pinia store 设计， 所以 method 和非响应式属性会被完全忽略。</p><h4 id="类型参数-41" tabindex="-1">类型参数 <a class="header-anchor" href="#类型参数-41" aria-hidden="true">#</a></h4><table><thead><tr><th style="text-align:left;">名称</th><th style="text-align:left;">类型</th></tr></thead><tbody><tr><td style="text-align:left;"><code>SS</code></td><td style="text-align:left;">extends <a href="./../interfaces/pinia._StoreWithState.html"><code>_StoreWithState</code></a>&lt;<code>string</code>, <a href="./pinia.html#statetree"><code>StateTree</code></a>, <a href="./pinia.html#_getterstree"><code>_GettersTree</code></a>&lt;<a href="./pinia.html#statetree"><code>StateTree</code></a>&gt;, <a href="./pinia.html#_actionstree"><code>_ActionsTree</code></a>, <code>SS</code>&gt; &amp; <a href="./pinia.html#statetree"><code>StateTree</code></a> &amp; <a href="./pinia.html#_storewithgetters"><code>_StoreWithGetters</code></a>&lt;<a href="./pinia.html#_getterstree"><code>_GettersTree</code></a>&lt;<a href="./pinia.html#statetree"><code>StateTree</code></a>&gt;&gt; &amp; <a href="./../interfaces/pinia.PiniaCustomProperties.html"><code>PiniaCustomProperties</code></a>&lt;<code>string</code>, <a href="./pinia.html#statetree"><code>StateTree</code></a>, <a href="./pinia.html#_getterstree"><code>_GettersTree</code></a>&lt;<a href="./pinia.html#statetree"><code>StateTree</code></a>&gt;, <a href="./pinia.html#_actionstree"><code>_ActionsTree</code></a>, <code>SS</code>&gt; &amp; <a href="./../interfaces/pinia.PiniaCustomStateProperties.html"><code>PiniaCustomStateProperties</code></a>&lt;<a href="./pinia.html#statetree"><code>StateTree</code></a>, <code>SS</code>&gt;</td></tr></tbody></table><h4 id="参数-19" tabindex="-1">参数 <a class="header-anchor" href="#参数-19" aria-hidden="true">#</a></h4><table><thead><tr><th style="text-align:left;">名称</th><th style="text-align:left;">类型</th><th style="text-align:left;">描述</th></tr></thead><tbody><tr><td style="text-align:left;"><code>store</code></td><td style="text-align:left;"><code>SS</code></td><td style="text-align:left;">store to extract the refs from</td></tr></tbody></table><h4 id="返回值-22" tabindex="-1">返回值 <a class="header-anchor" href="#返回值-22" aria-hidden="true">#</a></h4><p><code>ToRefs</code>&lt;<a href="./pinia.html#storestate"><code>StoreState</code></a>&lt;<code>SS</code>&gt; &amp; <a href="./pinia.html#storegetters"><code>StoreGetters</code></a>&lt;<code>SS</code>&gt; &amp; <a href="./../interfaces/pinia.PiniaCustomStateProperties.html"><code>PiniaCustomStateProperties</code></a>&lt;<a href="./pinia.html#storestate"><code>StoreState</code></a>&lt;<code>SS</code>&gt;&gt;&gt;</p>`,409),l=[n];function r(c,d,p,i,h,y){return t(),a("div",null,l)}const u=e(o,[["render",r]]);export{g as __pageData,u as default};
