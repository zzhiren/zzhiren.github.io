import{_ as e,o as s,c as a,a as t}from"./app.09b4d0c2.js";const f=JSON.parse('{"title":"接口：_StoreWithState<Id, S, G, A>","description":"","frontmatter":{"sidebar":"auto","editLinks":false,"sidebarDepth":3},"headers":[{"level":2,"title":"类型参数","slug":"type-parameters","link":"#type-parameters","children":[]},{"level":2,"title":"层次结构","slug":"hierarchy","link":"#hierarchy","children":[]},{"level":2,"title":"属性","slug":"属性","link":"#属性","children":[{"level":3,"title":"$id","slug":"id","link":"#id","children":[]},{"level":3,"title":"$state","slug":"state","link":"#state","children":[]},{"level":3,"title":"_customProperties","slug":"customproperties","link":"#customproperties","children":[]}]},{"level":2,"title":"方法","slug":"methods","link":"#methods","children":[{"level":3,"title":"$dispose","slug":"dispose","link":"#dispose","children":[]},{"level":3,"title":"$onAction","slug":"onaction","link":"#onaction","children":[]},{"level":3,"title":"$patch","slug":"patch","link":"#patch","children":[]},{"level":3,"title":"$reset","slug":"reset","link":"#reset","children":[]},{"level":3,"title":"$subscribe","slug":"subscribe","link":"#subscribe","children":[]}]}],"relativePath":"zh/api/interfaces/pinia._StoreWithState.md"}'),n={name:"zh/api/interfaces/pinia._StoreWithState.md"},o=t(`<p><a href="./../">API 文档</a> / <a href="./../modules/pinia.html">pinia</a> / _StoreWithState</p><h1 id="interface-storewithstate-id-s-g-a" tabindex="-1">接口：_StoreWithState&lt;Id, S, G, A&gt; <a class="header-anchor" href="#interface-storewithstate-id-s-g-a" aria-hidden="true">#</a></h1><p><a href="./../modules/pinia.html">pinia</a>._StoreWithState</p><p>具有 state 和部分功能的基础 store。不应直接使用。</p><h2 id="type-parameters" tabindex="-1">类型参数 <a class="header-anchor" href="#type-parameters" aria-hidden="true">#</a></h2><table><thead><tr><th style="text-align:left;">名称</th><th style="text-align:left;">类型</th></tr></thead><tbody><tr><td style="text-align:left;"><code>Id</code></td><td style="text-align:left;">extends <code>string</code></td></tr><tr><td style="text-align:left;"><code>S</code></td><td style="text-align:left;">extends <a href="./../modules/pinia.html#statetree"><code>StateTree</code></a></td></tr><tr><td style="text-align:left;"><code>G</code></td><td style="text-align:left;"><code>G</code></td></tr><tr><td style="text-align:left;"><code>A</code></td><td style="text-align:left;"><code>A</code></td></tr></tbody></table><h2 id="hierarchy" tabindex="-1">层次结构 <a class="header-anchor" href="#hierarchy" aria-hidden="true">#</a></h2><ul><li><p><a href="./pinia.StoreProperties.html"><code>StoreProperties</code></a>&lt;<code>Id</code>&gt;</p><p>↳ <strong><code>_StoreWithState</code></strong></p></li></ul><h2 id="属性" tabindex="-1">属性 <a class="header-anchor" href="#属性" aria-hidden="true">#</a></h2><h3 id="id" tabindex="-1">$id <a class="header-anchor" href="#id" aria-hidden="true">#</a></h3><p>• <strong>$id</strong>: <code>Id</code></p><p>store 的唯一标识符</p><h4 id="继承于" tabindex="-1">继承于 <a class="header-anchor" href="#继承于" aria-hidden="true">#</a></h4><p><a href="./pinia.StoreProperties.html">StoreProperties</a>.<a href="./pinia.StoreProperties.html#$id">$id</a></p><hr><h3 id="state" tabindex="-1">$state <a class="header-anchor" href="#state" aria-hidden="true">#</a></h3><p>• <strong>$state</strong>: <code>UnwrapRef</code>&lt;<code>S</code>&gt; &amp; <a href="./pinia.PiniaCustomStateProperties.html"><code>PiniaCustomStateProperties</code></a>&lt;<code>S</code>&gt;</p><p>Store 的 State。给它赋值可替换整个 state。</p><hr><h3 id="customproperties" tabindex="-1">_customProperties <a class="header-anchor" href="#customproperties" aria-hidden="true">#</a></h3><p>• <strong>_customProperties</strong>: <code>Set</code>&lt;<code>string</code>&gt;</p><p>供 devtools 插件使用，用于检索插件添加的属性。 生产版本会被移除。 用户可以用它来添加应在 devtools 中显示的 store 属性键。</p><h4 id="继承自" tabindex="-1">继承自 <a class="header-anchor" href="#继承自" aria-hidden="true">#</a></h4><p><a href="./pinia.StoreProperties.html">StoreProperties</a>.<a href="./pinia.StoreProperties.html#_customproperties">_customProperties</a></p><h2 id="methods" tabindex="-1">方法 <a class="header-anchor" href="#methods" aria-hidden="true">#</a></h2><h3 id="dispose" tabindex="-1">$dispose <a class="header-anchor" href="#dispose" aria-hidden="true">#</a></h3><p>▸ <strong>$dispose</strong>(): <code>void</code></p><p>停止 store 的相关作用域，并从 store 注册表中删除它。 插件可以覆盖此方法来清理已添加的任何副作用函数。 例如， devtools 插件停止显示来自 devtools 的已停止的 store。</p><h4 id="返回值" tabindex="-1">返回值 <a class="header-anchor" href="#返回值" aria-hidden="true">#</a></h4><p><code>void</code></p><hr><h3 id="onaction" tabindex="-1">$onAction <a class="header-anchor" href="#onaction" aria-hidden="true">#</a></h3><p>▸ <strong>$onAction</strong>(<code>callback</code>, <code>detached?</code>): () =&gt; <code>void</code></p><p>设置一个回调，当一个 action 即将被调用时，就会被调用。 回调接收一个对象， 其包含被调用 action 的所有相关信息：</p><ul><li><code>store</code>: 被调用的 store</li><li><code>name</code>: action 的名称</li><li><code>args</code>: 传递给 action 的参数</li></ul><p>除此之外，它会接收两个函数， 允许在 action 完成或失败时执行的回调。</p><p>它还会返回一个用来删除回调的函数。 请注意，当在组件内调用 <code>store.$onAction()</code> 时，除非 <code>detached</code> 被设置为 true， 否则当组件被卸载时，它将被自动清理掉。</p><p><strong><code>Example</code></strong></p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F6F6F4;">store.</span><span style="color:#62E884;">$onAction</span><span style="color:#F6F6F4;">(({ </span><span style="color:#FFB86C;font-style:italic;">after</span><span style="color:#F6F6F4;">, </span><span style="color:#FFB86C;font-style:italic;">onError</span><span style="color:#F6F6F4;"> }) </span><span style="color:#F286C4;">=&gt;</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;"> </span><span style="color:#7B7F8B;">// 你可以在这里创建所有钩子之间的共享变量，</span></span>
<span class="line"><span style="color:#F6F6F4;"> </span><span style="color:#7B7F8B;">// 同时设置侦听器并清理它们。</span></span>
<span class="line"><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">after</span><span style="color:#F6F6F4;">((</span><span style="color:#FFB86C;font-style:italic;">resolvedValue</span><span style="color:#F6F6F4;">) </span><span style="color:#F286C4;">=&gt;</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">   </span><span style="color:#7B7F8B;">// 可以用来清理副作用 </span></span>
<span class="line"><span style="color:#F6F6F4;">   </span><span style="color:#7B7F8B;">// \`resolvedValue\` 是 action 返回的值，</span></span>
<span class="line"><span style="color:#F6F6F4;">   </span><span style="color:#7B7F8B;">// 如果是一个 Promise，它将是已经 resolved 的值</span></span>
<span class="line"><span style="color:#F6F6F4;"> })</span></span>
<span class="line"><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">onError</span><span style="color:#F6F6F4;">((</span><span style="color:#FFB86C;font-style:italic;">error</span><span style="color:#F6F6F4;">) </span><span style="color:#F286C4;">=&gt;</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">   </span><span style="color:#7B7F8B;">// 可以用于向上传递错误</span></span>
<span class="line"><span style="color:#F6F6F4;"> })</span></span>
<span class="line"><span style="color:#F6F6F4;">})</span></span>
<span class="line"></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#B07D48;">store</span><span style="color:#999999;">.</span><span style="color:#59873A;">$onAction</span><span style="color:#999999;">(({</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">after</span><span style="color:#999999;">,</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">onError</span><span style="color:#393A34;"> </span><span style="color:#999999;">})</span><span style="color:#393A34;"> </span><span style="color:#999999;">=&gt;</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#999999;"> </span><span style="color:#A0ADA0;">// 你可以在这里创建所有钩子之间的共享变量，</span></span>
<span class="line"><span style="color:#999999;"> </span><span style="color:#A0ADA0;">// 同时设置侦听器并清理它们。</span></span>
<span class="line"><span style="color:#393A34;"> </span><span style="color:#59873A;">after</span><span style="color:#999999;">((</span><span style="color:#B07D48;">resolvedValue</span><span style="color:#999999;">)</span><span style="color:#393A34;"> </span><span style="color:#999999;">=&gt;</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#999999;">   </span><span style="color:#A0ADA0;">// 可以用来清理副作用 </span></span>
<span class="line"><span style="color:#999999;">   </span><span style="color:#A0ADA0;">// \`resolvedValue\` 是 action 返回的值，</span></span>
<span class="line"><span style="color:#999999;">   </span><span style="color:#A0ADA0;">// 如果是一个 Promise，它将是已经 resolved 的值</span></span>
<span class="line"><span style="color:#393A34;"> </span><span style="color:#999999;">})</span></span>
<span class="line"><span style="color:#393A34;"> </span><span style="color:#59873A;">onError</span><span style="color:#999999;">((</span><span style="color:#B07D48;">error</span><span style="color:#999999;">)</span><span style="color:#393A34;"> </span><span style="color:#999999;">=&gt;</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#999999;">   </span><span style="color:#A0ADA0;">// 可以用于向上传递错误</span></span>
<span class="line"><span style="color:#393A34;"> </span><span style="color:#999999;">})</span></span>
<span class="line"><span style="color:#999999;">})</span></span>
<span class="line"></span></code></pre></div><h4 id="参数" tabindex="-1">参数 <a class="header-anchor" href="#参数" aria-hidden="true">#</a></h4><table><thead><tr><th style="text-align:left;">名称</th><th style="text-align:left;">类型</th><th style="text-align:left;">描述</th></tr></thead><tbody><tr><td style="text-align:left;"><code>callback</code></td><td style="text-align:left;"><a href="./../modules/pinia.html#storeonactionlistener"><code>StoreOnActionListener</code></a>&lt;<code>Id</code>, <code>S</code>, <code>G</code>, <code>A</code>&gt;</td><td style="text-align:left;">callback called before every action</td></tr><tr><td style="text-align:left;"><code>detached?</code></td><td style="text-align:left;"><code>boolean</code></td><td style="text-align:left;">detach the subscription from the context this is called from</td></tr></tbody></table><h4 id="返回值-1" tabindex="-1">返回值 <a class="header-anchor" href="#返回值-1" aria-hidden="true">#</a></h4><p><code>fn</code></p><p>删除侦听器的函数</p><p>▸ (): <code>void</code></p><p>设置一个回调，当一个 action 即将被调用时，就会被调用。 回调接收一个对象， 其包含被调用 action 的所有相关信息：</p><ul><li><code>store</code>: 被调用的 store</li><li><code>name</code>: action 的名称</li><li><code>args</code>: 传递给 action 的参数</li></ul><p>除此之外，它会接收两个函数， 允许在 action 完成或失败时执行的回调。</p><p>它还会返回一个用来来删除回调的函数。 请注意，当在组件内调用 <code>store.$onAction()</code> 时，除非 <code>detached</code> 被设置为 true， 否则当组件被卸载时，它将被自动清理掉。</p><p><strong><code>Example</code></strong></p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F6F6F4;">store.</span><span style="color:#62E884;">$onAction</span><span style="color:#F6F6F4;">(({ </span><span style="color:#FFB86C;font-style:italic;">after</span><span style="color:#F6F6F4;">, </span><span style="color:#FFB86C;font-style:italic;">onError</span><span style="color:#F6F6F4;"> }) </span><span style="color:#F286C4;">=&gt;</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#7B7F8B;">// 你可以在这里创建所有钩子之间的共享变量，</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#7B7F8B;">// 同时设置侦听器并清理它们。</span></span>
<span class="line"><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">after</span><span style="color:#F6F6F4;">((</span><span style="color:#FFB86C;font-style:italic;">resolvedValue</span><span style="color:#F6F6F4;">) </span><span style="color:#F286C4;">=&gt;</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">   </span><span style="color:#7B7F8B;">// 可以用来清理副作用 </span></span>
<span class="line"><span style="color:#F6F6F4;">   </span><span style="color:#7B7F8B;">// \`resolvedValue\` 是 action 返回的值，</span></span>
<span class="line"><span style="color:#F6F6F4;">   </span><span style="color:#7B7F8B;">// 如果是一个 Promise，它将是已解决的值</span></span>
<span class="line"><span style="color:#F6F6F4;"> })</span></span>
<span class="line"><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">onError</span><span style="color:#F6F6F4;">((</span><span style="color:#FFB86C;font-style:italic;">error</span><span style="color:#F6F6F4;">) </span><span style="color:#F286C4;">=&gt;</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">   </span><span style="color:#7B7F8B;">// 可以用于向上传递错误</span></span>
<span class="line"><span style="color:#F6F6F4;"> })</span></span>
<span class="line"><span style="color:#F6F6F4;">})</span></span>
<span class="line"></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#B07D48;">store</span><span style="color:#999999;">.</span><span style="color:#59873A;">$onAction</span><span style="color:#999999;">(({</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">after</span><span style="color:#999999;">,</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">onError</span><span style="color:#393A34;"> </span><span style="color:#999999;">})</span><span style="color:#393A34;"> </span><span style="color:#999999;">=&gt;</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#999999;">  </span><span style="color:#A0ADA0;">// 你可以在这里创建所有钩子之间的共享变量，</span></span>
<span class="line"><span style="color:#999999;">  </span><span style="color:#A0ADA0;">// 同时设置侦听器并清理它们。</span></span>
<span class="line"><span style="color:#393A34;"> </span><span style="color:#59873A;">after</span><span style="color:#999999;">((</span><span style="color:#B07D48;">resolvedValue</span><span style="color:#999999;">)</span><span style="color:#393A34;"> </span><span style="color:#999999;">=&gt;</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#999999;">   </span><span style="color:#A0ADA0;">// 可以用来清理副作用 </span></span>
<span class="line"><span style="color:#999999;">   </span><span style="color:#A0ADA0;">// \`resolvedValue\` 是 action 返回的值，</span></span>
<span class="line"><span style="color:#999999;">   </span><span style="color:#A0ADA0;">// 如果是一个 Promise，它将是已解决的值</span></span>
<span class="line"><span style="color:#393A34;"> </span><span style="color:#999999;">})</span></span>
<span class="line"><span style="color:#393A34;"> </span><span style="color:#59873A;">onError</span><span style="color:#999999;">((</span><span style="color:#B07D48;">error</span><span style="color:#999999;">)</span><span style="color:#393A34;"> </span><span style="color:#999999;">=&gt;</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#999999;">   </span><span style="color:#A0ADA0;">// 可以用于向上传递错误</span></span>
<span class="line"><span style="color:#393A34;"> </span><span style="color:#999999;">})</span></span>
<span class="line"><span style="color:#999999;">})</span></span>
<span class="line"></span></code></pre></div><h5 id="返回值-2" tabindex="-1">返回值 <a class="header-anchor" href="#返回值-2" aria-hidden="true">#</a></h5><p><code>void</code></p><p>移除侦听器的函数</p><hr><h3 id="patch" tabindex="-1">$patch <a class="header-anchor" href="#patch" aria-hidden="true">#</a></h3><p>▸ <strong>$patch</strong>(<code>partialState</code>): <code>void</code></p><p>将一个 state 补丁应用于当前状态。允许传递嵌套值</p><h4 id="参数-1" tabindex="-1">参数 <a class="header-anchor" href="#参数-1" aria-hidden="true">#</a></h4><table><thead><tr><th style="text-align:left;">名称</th><th style="text-align:left;">类型</th><th style="text-align:left;">描述</th></tr></thead><tbody><tr><td style="text-align:left;"><code>partialState</code></td><td style="text-align:left;"><a href="./../modules/pinia.html#_deeppartial"><code>_DeepPartial</code></a>&lt;<code>UnwrapRef</code>&lt;<code>S</code>&gt;&gt;</td><td style="text-align:left;">patch to apply to the state</td></tr></tbody></table><h4 id="返回值-3" tabindex="-1">返回值 <a class="header-anchor" href="#返回值-3" aria-hidden="true">#</a></h4><p><code>void</code></p><p>▸ <strong>$patch</strong>&lt;<code>F</code>&gt;(<code>stateMutator</code>): <code>void</code></p><p>将多个变更分组到一个函数中。 当 mutation 对象(如 Sets 或数组)或者应用对象补丁不方便时很有用，例如追加到数组中。 传递给 <code>$patch()</code> 的函数<strong>必须是同步的</strong>。</p><h4 id="type-parameters_1" tabindex="-1">类型参数 <a class="header-anchor" href="#type-parameters_1" aria-hidden="true">#</a></h4><table><thead><tr><th style="text-align:left;">名称</th><th style="text-align:left;">类型</th></tr></thead><tbody><tr><td style="text-align:left;"><code>F</code></td><td style="text-align:left;">extends (<code>state</code>: <code>UnwrapRef</code>&lt;<code>S</code>&gt;) =&gt; <code>any</code></td></tr></tbody></table><h4 id="参数-2" tabindex="-1">参数 <a class="header-anchor" href="#参数-2" aria-hidden="true">#</a></h4><table><thead><tr><th style="text-align:left;">名称</th><th style="text-align:left;">类型</th><th style="text-align:left;">描述</th></tr></thead><tbody><tr><td style="text-align:left;"><code>stateMutator</code></td><td style="text-align:left;"><code>ReturnType</code>&lt;<code>F</code>&gt; extends <code>Promise</code>&lt;<code>any</code>&gt; ? <code>never</code> : <code>F</code></td><td style="text-align:left;">function that mutates <code>state</code>, cannot be async</td></tr></tbody></table><h4 id="返回值-returns" tabindex="-1">返回值 {returns} <a class="header-anchor" href="#返回值-returns" aria-hidden="true">#</a></h4><p><code>void</code></p><hr><h3 id="reset" tabindex="-1">$reset <a class="header-anchor" href="#reset" aria-hidden="true">#</a></h3><p>▸ <strong>$reset</strong>(): <code>void</code></p><p>通过建立一个新的状态对象，将 store 重设为初始状态。 TODO: make this options only</p><h4 id="返回值-4" tabindex="-1">返回值 <a class="header-anchor" href="#返回值-4" aria-hidden="true">#</a></h4><p><code>void</code></p><hr><h3 id="subscribe" tabindex="-1">$subscribe <a class="header-anchor" href="#subscribe" aria-hidden="true">#</a></h3><p>▸ <strong>$subscribe</strong>(<code>callback</code>, <code>options?</code>): () =&gt; <code>void</code></p><p>设置一个回调，当状态发生变化时被调用。它会返回一个用来移除此回调的函数。 请注意，当在组件内调用 <code>store.$subscribe()</code> 时，除非 <code>detached</code> 被设置为 true， 否则当组件被卸载时，它将被自动清理掉。</p><h4 id="参数-3" tabindex="-1">参数 <a class="header-anchor" href="#参数-3" aria-hidden="true">#</a></h4><table><thead><tr><th style="text-align:left;">名称</th><th style="text-align:left;">类型</th><th style="text-align:left;">描述</th></tr></thead><tbody><tr><td style="text-align:left;"><code>callback</code></td><td style="text-align:left;"><a href="./../modules/pinia.html#subscriptioncallback"><code>SubscriptionCallback</code></a>&lt;<code>S</code>&gt;</td><td style="text-align:left;">callback passed to the watcher</td></tr><tr><td style="text-align:left;"><code>options?</code></td><td style="text-align:left;">{ <code>detached?</code>: <code>boolean</code> } &amp; <code>WatchOptions</code>&lt;<code>boolean</code>&gt;</td><td style="text-align:left;"><code>watch</code> options + <code>detached</code> to detach the subscription from the context (usually a component) this is called from. Note that the <code>flush</code> option does not affect calls to <code>store.$patch()</code>.</td></tr></tbody></table><h4 id="返回值-5" tabindex="-1">返回值 <a class="header-anchor" href="#返回值-5" aria-hidden="true">#</a></h4><p><code>fn</code></p><p>删除侦听器的函数</p><p>▸ (): <code>void</code></p><p>设置一个回调，当状态发生变化时被调用。它还会返回一个用来移除回调的函数。 请注意，当在组件内调用 <code>store.$subscribe()</code> 时，除非 <code>detached</code> 被设置为 true， 否则当组件被卸载时，它将被自动清理掉。</p><h5 id="返回值-6" tabindex="-1">返回值 <a class="header-anchor" href="#返回值-6" aria-hidden="true">#</a></h5><p><code>void</code></p><p>移除侦听器的函数</p>`,90),l=[o];function p(r,c,d,i,h,y){return s(),a("div",null,l)}const g=e(n,[["render",p]]);export{f as __pageData,g as default};
