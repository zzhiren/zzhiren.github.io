import{_ as s,o as n,c as a,a as l}from"./app.09b4d0c2.js";const d=JSON.parse('{"title":"Testing stores","description":"","frontmatter":{},"headers":[{"level":2,"title":"Unit testing a store","slug":"unit-testing-a-store","link":"#unit-testing-a-store","children":[]},{"level":2,"title":"Unit testing components","slug":"unit-testing-components","link":"#unit-testing-components","children":[{"level":3,"title":"Initial State","slug":"initial-state","link":"#initial-state","children":[]},{"level":3,"title":"Customizing behavior of actions","slug":"customizing-behavior-of-actions","link":"#customizing-behavior-of-actions","children":[]},{"level":3,"title":"Specifying the createSpy function","slug":"specifying-the-createspy-function","link":"#specifying-the-createspy-function","children":[]},{"level":3,"title":"Mocking getters","slug":"mocking-getters","link":"#mocking-getters","children":[]},{"level":3,"title":"Pinia Plugins","slug":"pinia-plugins","link":"#pinia-plugins","children":[]}]},{"level":2,"title":"E2E tests","slug":"e2e-tests","link":"#e2e-tests","children":[]},{"level":2,"title":"Unit test components (Vue 2)","slug":"unit-test-components-vue-2","link":"#unit-test-components-vue-2","children":[]}],"relativePath":"cookbook/testing.md"}'),p={name:"cookbook/testing.md"},o=l(`<h1 id="testing-stores" tabindex="-1">Testing stores <a class="header-anchor" href="#testing-stores" aria-hidden="true">#</a></h1><p>Stores will, by design, be used at many places and can make testing much harder than it should be. Fortunately, this doesn&#39;t have to be the case. We need to take care of three things when testing stores:</p><ul><li>The <code>pinia</code> instance: Stores cannot work without it</li><li><code>actions</code>: most of the time, they contain the most complex logic of our stores. Wouldn&#39;t it be nice if they were mocked by default?</li><li>Plugins: If you rely on plugins, you will have to install them for tests too</li></ul><p>Depending on what or how you are testing, we need to take care of these three things differently.</p><h2 id="unit-testing-a-store" tabindex="-1">Unit testing a store <a class="header-anchor" href="#unit-testing-a-store" aria-hidden="true">#</a></h2><p>To unit test a store, the most important part is creating a <code>pinia</code> instance:</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;">// stores/counter.spec.ts</span></span>
<span class="line"><span style="color:#F286C4;">import</span><span style="color:#F6F6F4;"> { setActivePinia, createPinia } </span><span style="color:#F286C4;">from</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">pinia</span><span style="color:#DEE492;">&#39;</span></span>
<span class="line"><span style="color:#F286C4;">import</span><span style="color:#F6F6F4;"> { useCounterStore } </span><span style="color:#F286C4;">from</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">../src/stores/counter</span><span style="color:#DEE492;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#62E884;">describe</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">Counter Store</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">, () </span><span style="color:#F286C4;">=&gt;</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#62E884;">beforeEach</span><span style="color:#F6F6F4;">(() </span><span style="color:#F286C4;">=&gt;</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">// creates a fresh pinia and makes it active</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">// so it&#39;s automatically picked up by any useStore() call</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#7B7F8B;">// without having to pass it to it: \`useStore(pinia)\`</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#62E884;">setActivePinia</span><span style="color:#F6F6F4;">(</span><span style="color:#62E884;">createPinia</span><span style="color:#F6F6F4;">())</span></span>
<span class="line"><span style="color:#F6F6F4;">  })</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#62E884;">it</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">increments</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">, () </span><span style="color:#F286C4;">=&gt;</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">const</span><span style="color:#F6F6F4;"> counter </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">useCounterStore</span><span style="color:#F6F6F4;">()</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#62E884;">expect</span><span style="color:#F6F6F4;">(counter.n).</span><span style="color:#62E884;">toBe</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;">)</span></span>
<span class="line"><span style="color:#F6F6F4;">    counter.</span><span style="color:#62E884;">increment</span><span style="color:#F6F6F4;">()</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#62E884;">expect</span><span style="color:#F6F6F4;">(counter.n).</span><span style="color:#62E884;">toBe</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">)</span></span>
<span class="line"><span style="color:#F6F6F4;">  })</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#62E884;">it</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">increments by amount</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">, () </span><span style="color:#F286C4;">=&gt;</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#F286C4;">const</span><span style="color:#F6F6F4;"> counter </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">useCounterStore</span><span style="color:#F6F6F4;">()</span></span>
<span class="line"><span style="color:#F6F6F4;">    counter.</span><span style="color:#62E884;">increment</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">10</span><span style="color:#F6F6F4;">)</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#62E884;">expect</span><span style="color:#F6F6F4;">(counter.n).</span><span style="color:#62E884;">toBe</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">10</span><span style="color:#F6F6F4;">)</span></span>
<span class="line"><span style="color:#F6F6F4;">  })</span></span>
<span class="line"><span style="color:#F6F6F4;">})</span></span>
<span class="line"></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#A0ADA0;">// stores/counter.spec.ts</span></span>
<span class="line"><span style="color:#1E754F;">import</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">setActivePinia</span><span style="color:#999999;">,</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">createPinia</span><span style="color:#393A34;"> </span><span style="color:#999999;">}</span><span style="color:#393A34;"> </span><span style="color:#1E754F;">from</span><span style="color:#393A34;"> </span><span style="color:#B56959AA;">&#39;</span><span style="color:#B56959;">pinia</span><span style="color:#B56959AA;">&#39;</span></span>
<span class="line"><span style="color:#1E754F;">import</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">useCounterStore</span><span style="color:#393A34;"> </span><span style="color:#999999;">}</span><span style="color:#393A34;"> </span><span style="color:#1E754F;">from</span><span style="color:#393A34;"> </span><span style="color:#B56959AA;">&#39;</span><span style="color:#B56959;">../src/stores/counter</span><span style="color:#B56959AA;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#59873A;">describe</span><span style="color:#999999;">(</span><span style="color:#B56959AA;">&#39;</span><span style="color:#B56959;">Counter Store</span><span style="color:#B56959AA;">&#39;</span><span style="color:#999999;">,</span><span style="color:#393A34;"> </span><span style="color:#999999;">()</span><span style="color:#393A34;"> </span><span style="color:#999999;">=&gt;</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#59873A;">beforeEach</span><span style="color:#999999;">(()</span><span style="color:#393A34;"> </span><span style="color:#999999;">=&gt;</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#999999;">    </span><span style="color:#A0ADA0;">// creates a fresh pinia and makes it active</span></span>
<span class="line"><span style="color:#999999;">    </span><span style="color:#A0ADA0;">// so it&#39;s automatically picked up by any useStore() call</span></span>
<span class="line"><span style="color:#999999;">    </span><span style="color:#A0ADA0;">// without having to pass it to it: \`useStore(pinia)\`</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#59873A;">setActivePinia</span><span style="color:#999999;">(</span><span style="color:#59873A;">createPinia</span><span style="color:#999999;">())</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#999999;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#59873A;">it</span><span style="color:#999999;">(</span><span style="color:#B56959AA;">&#39;</span><span style="color:#B56959;">increments</span><span style="color:#B56959AA;">&#39;</span><span style="color:#999999;">,</span><span style="color:#393A34;"> </span><span style="color:#999999;">()</span><span style="color:#393A34;"> </span><span style="color:#999999;">=&gt;</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#AB5959;">const</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">counter</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">=</span><span style="color:#393A34;"> </span><span style="color:#59873A;">useCounterStore</span><span style="color:#999999;">()</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#59873A;">expect</span><span style="color:#999999;">(</span><span style="color:#B07D48;">counter</span><span style="color:#999999;">.</span><span style="color:#B07D48;">n</span><span style="color:#999999;">).</span><span style="color:#59873A;">toBe</span><span style="color:#999999;">(</span><span style="color:#2F798A;">0</span><span style="color:#999999;">)</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#B07D48;">counter</span><span style="color:#999999;">.</span><span style="color:#59873A;">increment</span><span style="color:#999999;">()</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#59873A;">expect</span><span style="color:#999999;">(</span><span style="color:#B07D48;">counter</span><span style="color:#999999;">.</span><span style="color:#B07D48;">n</span><span style="color:#999999;">).</span><span style="color:#59873A;">toBe</span><span style="color:#999999;">(</span><span style="color:#2F798A;">1</span><span style="color:#999999;">)</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#999999;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#59873A;">it</span><span style="color:#999999;">(</span><span style="color:#B56959AA;">&#39;</span><span style="color:#B56959;">increments by amount</span><span style="color:#B56959AA;">&#39;</span><span style="color:#999999;">,</span><span style="color:#393A34;"> </span><span style="color:#999999;">()</span><span style="color:#393A34;"> </span><span style="color:#999999;">=&gt;</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#AB5959;">const</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">counter</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">=</span><span style="color:#393A34;"> </span><span style="color:#59873A;">useCounterStore</span><span style="color:#999999;">()</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#B07D48;">counter</span><span style="color:#999999;">.</span><span style="color:#59873A;">increment</span><span style="color:#999999;">(</span><span style="color:#2F798A;">10</span><span style="color:#999999;">)</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#59873A;">expect</span><span style="color:#999999;">(</span><span style="color:#B07D48;">counter</span><span style="color:#999999;">.</span><span style="color:#B07D48;">n</span><span style="color:#999999;">).</span><span style="color:#59873A;">toBe</span><span style="color:#999999;">(</span><span style="color:#2F798A;">10</span><span style="color:#999999;">)</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#999999;">})</span></span>
<span class="line"><span style="color:#999999;">})</span></span>
<span class="line"></span></code></pre></div><p>If you have any store plugins, there is one important thing to know: <strong>plugins won&#39;t be used until <code>pinia</code> is installed in an App</strong>. This can be solved by creating an empty App or a fake one:</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">import</span><span style="color:#F6F6F4;"> { setActivePinia, createPinia } </span><span style="color:#F286C4;">from</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">pinia</span><span style="color:#DEE492;">&#39;</span></span>
<span class="line"><span style="color:#F286C4;">import</span><span style="color:#F6F6F4;"> { createApp } </span><span style="color:#F286C4;">from</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">vue</span><span style="color:#DEE492;">&#39;</span></span>
<span class="line"><span style="color:#F286C4;">import</span><span style="color:#F6F6F4;"> { somePlugin } </span><span style="color:#F286C4;">from</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">../src/stores/plugin</span><span style="color:#DEE492;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;">// same code as above...</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;">// you don&#39;t need to create one app per test</span></span>
<span class="line"><span style="color:#F286C4;">const</span><span style="color:#F6F6F4;"> app </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">createApp</span><span style="color:#F6F6F4;">({})</span></span>
<span class="line"><span style="color:#62E884;">beforeEach</span><span style="color:#F6F6F4;">(() </span><span style="color:#F286C4;">=&gt;</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#F286C4;">const</span><span style="color:#F6F6F4;"> pinia </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">createPinia</span><span style="color:#F6F6F4;">().</span><span style="color:#62E884;">use</span><span style="color:#F6F6F4;">(somePlugin)</span></span>
<span class="line"><span style="color:#F6F6F4;">  app.</span><span style="color:#62E884;">use</span><span style="color:#F6F6F4;">(pinia)</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#62E884;">setActivePinia</span><span style="color:#F6F6F4;">(pinia)</span></span>
<span class="line"><span style="color:#F6F6F4;">})</span></span>
<span class="line"></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#1E754F;">import</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">setActivePinia</span><span style="color:#999999;">,</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">createPinia</span><span style="color:#393A34;"> </span><span style="color:#999999;">}</span><span style="color:#393A34;"> </span><span style="color:#1E754F;">from</span><span style="color:#393A34;"> </span><span style="color:#B56959AA;">&#39;</span><span style="color:#B56959;">pinia</span><span style="color:#B56959AA;">&#39;</span></span>
<span class="line"><span style="color:#1E754F;">import</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">createApp</span><span style="color:#393A34;"> </span><span style="color:#999999;">}</span><span style="color:#393A34;"> </span><span style="color:#1E754F;">from</span><span style="color:#393A34;"> </span><span style="color:#B56959AA;">&#39;</span><span style="color:#B56959;">vue</span><span style="color:#B56959AA;">&#39;</span></span>
<span class="line"><span style="color:#1E754F;">import</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">somePlugin</span><span style="color:#393A34;"> </span><span style="color:#999999;">}</span><span style="color:#393A34;"> </span><span style="color:#1E754F;">from</span><span style="color:#393A34;"> </span><span style="color:#B56959AA;">&#39;</span><span style="color:#B56959;">../src/stores/plugin</span><span style="color:#B56959AA;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A0ADA0;">// same code as above...</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A0ADA0;">// you don&#39;t need to create one app per test</span></span>
<span class="line"><span style="color:#AB5959;">const</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">app</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">=</span><span style="color:#393A34;"> </span><span style="color:#59873A;">createApp</span><span style="color:#999999;">({})</span></span>
<span class="line"><span style="color:#59873A;">beforeEach</span><span style="color:#999999;">(()</span><span style="color:#393A34;"> </span><span style="color:#999999;">=&gt;</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#AB5959;">const</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">pinia</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">=</span><span style="color:#393A34;"> </span><span style="color:#59873A;">createPinia</span><span style="color:#999999;">().</span><span style="color:#59873A;">use</span><span style="color:#999999;">(</span><span style="color:#B07D48;">somePlugin</span><span style="color:#999999;">)</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#B07D48;">app</span><span style="color:#999999;">.</span><span style="color:#59873A;">use</span><span style="color:#999999;">(</span><span style="color:#B07D48;">pinia</span><span style="color:#999999;">)</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#59873A;">setActivePinia</span><span style="color:#999999;">(</span><span style="color:#B07D48;">pinia</span><span style="color:#999999;">)</span></span>
<span class="line"><span style="color:#999999;">})</span></span>
<span class="line"></span></code></pre></div><h2 id="unit-testing-components" tabindex="-1">Unit testing components <a class="header-anchor" href="#unit-testing-components" aria-hidden="true">#</a></h2><p>This can be achieved with <code>createTestingPinia()</code>, which returns a pinia instance designed to help unit tests components.</p><p>Start by installing <code>@pinia/testing</code>:</p><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F6F6F4;">npm </span><span style="color:#E7EE98;">i</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">-D</span><span style="color:#F6F6F4;"> </span><span style="color:#E7EE98;">@pinia/testing</span></span>
<span class="line"></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#59873A;">npm</span><span style="color:#393A34;"> </span><span style="color:#B56959;">i</span><span style="color:#393A34;"> </span><span style="color:#A65E2B;">-D</span><span style="color:#393A34;"> </span><span style="color:#B56959;">@pinia/testing</span></span>
<span class="line"></span></code></pre></div><p>And make sure to create a testing pinia in your tests when mounting a component:</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">import</span><span style="color:#F6F6F4;"> { mount } </span><span style="color:#F286C4;">from</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">@vue/test-utils</span><span style="color:#DEE492;">&#39;</span></span>
<span class="line"><span style="color:#F286C4;">import</span><span style="color:#F6F6F4;"> { createTestingPinia } </span><span style="color:#F286C4;">from</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">@pinia/testing</span><span style="color:#DEE492;">&#39;</span></span>
<span class="line"><span style="color:#7B7F8B;">// import any store you want to interact with in tests</span></span>
<span class="line"><span style="color:#F286C4;">import</span><span style="color:#F6F6F4;"> { useSomeStore } </span><span style="color:#F286C4;">from</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">@/stores/myStore</span><span style="color:#DEE492;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F286C4;">const</span><span style="color:#F6F6F4;"> wrapper </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">mount</span><span style="color:#F6F6F4;">(Counter, {</span></span>
<span class="line"><span style="color:#F6F6F4;">  global</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">    plugins</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> [</span><span style="color:#62E884;">createTestingPinia</span><span style="color:#F6F6F4;">()],</span></span>
<span class="line"><span style="color:#F6F6F4;">  },</span></span>
<span class="line"><span style="color:#F6F6F4;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F286C4;">const</span><span style="color:#F6F6F4;"> store </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">useSomeStore</span><span style="color:#F6F6F4;">() </span><span style="color:#7B7F8B;">// uses the testing pinia!</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;">// state can be directly manipulated</span></span>
<span class="line"><span style="color:#F6F6F4;">store.name </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">my new name</span><span style="color:#DEE492;">&#39;</span></span>
<span class="line"><span style="color:#7B7F8B;">// can also be done through patch</span></span>
<span class="line"><span style="color:#F6F6F4;">store.</span><span style="color:#62E884;">$patch</span><span style="color:#F6F6F4;">({ name</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">new name</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;"> })</span></span>
<span class="line"><span style="color:#62E884;">expect</span><span style="color:#F6F6F4;">(store.name).</span><span style="color:#62E884;">toBe</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">new name</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;">// actions are stubbed by default, meaning they don&#39;t execute their code by default.</span></span>
<span class="line"><span style="color:#7B7F8B;">// See below to customize this behavior.</span></span>
<span class="line"><span style="color:#F6F6F4;">store.</span><span style="color:#62E884;">someAction</span><span style="color:#F6F6F4;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#62E884;">expect</span><span style="color:#F6F6F4;">(store.someAction).</span><span style="color:#62E884;">toHaveBeenCalledTimes</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">)</span></span>
<span class="line"><span style="color:#62E884;">expect</span><span style="color:#F6F6F4;">(store.someAction).</span><span style="color:#62E884;">toHaveBeenLastCalledWith</span><span style="color:#F6F6F4;">()</span></span>
<span class="line"></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#1E754F;">import</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">mount</span><span style="color:#393A34;"> </span><span style="color:#999999;">}</span><span style="color:#393A34;"> </span><span style="color:#1E754F;">from</span><span style="color:#393A34;"> </span><span style="color:#B56959AA;">&#39;</span><span style="color:#B56959;">@vue/test-utils</span><span style="color:#B56959AA;">&#39;</span></span>
<span class="line"><span style="color:#1E754F;">import</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">createTestingPinia</span><span style="color:#393A34;"> </span><span style="color:#999999;">}</span><span style="color:#393A34;"> </span><span style="color:#1E754F;">from</span><span style="color:#393A34;"> </span><span style="color:#B56959AA;">&#39;</span><span style="color:#B56959;">@pinia/testing</span><span style="color:#B56959AA;">&#39;</span></span>
<span class="line"><span style="color:#A0ADA0;">// import any store you want to interact with in tests</span></span>
<span class="line"><span style="color:#1E754F;">import</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">useSomeStore</span><span style="color:#393A34;"> </span><span style="color:#999999;">}</span><span style="color:#393A34;"> </span><span style="color:#1E754F;">from</span><span style="color:#393A34;"> </span><span style="color:#B56959AA;">&#39;</span><span style="color:#B56959;">@/stores/myStore</span><span style="color:#B56959AA;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#AB5959;">const</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">wrapper</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">=</span><span style="color:#393A34;"> </span><span style="color:#59873A;">mount</span><span style="color:#999999;">(</span><span style="color:#B07D48;">Counter</span><span style="color:#999999;">,</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#998418;">global</span><span style="color:#999999;">:</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#998418;">plugins</span><span style="color:#999999;">:</span><span style="color:#393A34;"> </span><span style="color:#999999;">[</span><span style="color:#59873A;">createTestingPinia</span><span style="color:#999999;">()],</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#999999;">},</span></span>
<span class="line"><span style="color:#999999;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#AB5959;">const</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">store</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">=</span><span style="color:#393A34;"> </span><span style="color:#59873A;">useSomeStore</span><span style="color:#999999;">()</span><span style="color:#393A34;"> </span><span style="color:#A0ADA0;">// uses the testing pinia!</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A0ADA0;">// state can be directly manipulated</span></span>
<span class="line"><span style="color:#B07D48;">store</span><span style="color:#999999;">.</span><span style="color:#B07D48;">name</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">=</span><span style="color:#393A34;"> </span><span style="color:#B56959AA;">&#39;</span><span style="color:#B56959;">my new name</span><span style="color:#B56959AA;">&#39;</span></span>
<span class="line"><span style="color:#A0ADA0;">// can also be done through patch</span></span>
<span class="line"><span style="color:#B07D48;">store</span><span style="color:#999999;">.</span><span style="color:#59873A;">$patch</span><span style="color:#999999;">({</span><span style="color:#393A34;"> </span><span style="color:#998418;">name</span><span style="color:#999999;">:</span><span style="color:#393A34;"> </span><span style="color:#B56959AA;">&#39;</span><span style="color:#B56959;">new name</span><span style="color:#B56959AA;">&#39;</span><span style="color:#393A34;"> </span><span style="color:#999999;">})</span></span>
<span class="line"><span style="color:#59873A;">expect</span><span style="color:#999999;">(</span><span style="color:#B07D48;">store</span><span style="color:#999999;">.</span><span style="color:#B07D48;">name</span><span style="color:#999999;">).</span><span style="color:#59873A;">toBe</span><span style="color:#999999;">(</span><span style="color:#B56959AA;">&#39;</span><span style="color:#B56959;">new name</span><span style="color:#B56959AA;">&#39;</span><span style="color:#999999;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A0ADA0;">// actions are stubbed by default, meaning they don&#39;t execute their code by default.</span></span>
<span class="line"><span style="color:#A0ADA0;">// See below to customize this behavior.</span></span>
<span class="line"><span style="color:#B07D48;">store</span><span style="color:#999999;">.</span><span style="color:#59873A;">someAction</span><span style="color:#999999;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#59873A;">expect</span><span style="color:#999999;">(</span><span style="color:#B07D48;">store</span><span style="color:#999999;">.</span><span style="color:#B07D48;">someAction</span><span style="color:#999999;">).</span><span style="color:#59873A;">toHaveBeenCalledTimes</span><span style="color:#999999;">(</span><span style="color:#2F798A;">1</span><span style="color:#999999;">)</span></span>
<span class="line"><span style="color:#59873A;">expect</span><span style="color:#999999;">(</span><span style="color:#B07D48;">store</span><span style="color:#999999;">.</span><span style="color:#B07D48;">someAction</span><span style="color:#999999;">).</span><span style="color:#59873A;">toHaveBeenLastCalledWith</span><span style="color:#999999;">()</span></span>
<span class="line"></span></code></pre></div><p>Please note that if you are using Vue 2, <code>@vue/test-utils</code> requires a <a href="#Unit-test-components-Vue-2-">slightly different configuration</a>.</p><h3 id="initial-state" tabindex="-1">Initial State <a class="header-anchor" href="#initial-state" aria-hidden="true">#</a></h3><p>You can set the initial state of <strong>all of your stores</strong> when creating a testing pinia by passing an <code>initialState</code> object. This object will be used by the testing pinia to <em>patch</em> stores when they are created. Let&#39;s say you want to initialize the state of this store:</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">import</span><span style="color:#F6F6F4;"> { defineStore } </span><span style="color:#F286C4;">from</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">pinia</span><span style="color:#DEE492;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F286C4;">const</span><span style="color:#F6F6F4;"> useCounterStore </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">defineStore</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">counter</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">, {</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#62E884;">state</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> () </span><span style="color:#F286C4;">=&gt;</span><span style="color:#F6F6F4;"> ({ n</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">0</span><span style="color:#F6F6F4;"> }),</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#7B7F8B;">// ...</span></span>
<span class="line"><span style="color:#F6F6F4;">})</span></span>
<span class="line"></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#1E754F;">import</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">defineStore</span><span style="color:#393A34;"> </span><span style="color:#999999;">}</span><span style="color:#393A34;"> </span><span style="color:#1E754F;">from</span><span style="color:#393A34;"> </span><span style="color:#B56959AA;">&#39;</span><span style="color:#B56959;">pinia</span><span style="color:#B56959AA;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#AB5959;">const </span><span style="color:#B07D48;">useCounterStore</span><span style="color:#AB5959;"> = </span><span style="color:#59873A;">defineStore</span><span style="color:#999999;">(</span><span style="color:#B56959AA;">&#39;</span><span style="color:#B56959;">counter</span><span style="color:#B56959AA;">&#39;</span><span style="color:#999999;">,</span><span style="color:#AB5959;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#999999;">  </span><span style="color:#59873A;">state</span><span style="color:#999999;">: () =&gt; ({ </span><span style="color:#998418;">n</span><span style="color:#999999;">: </span><span style="color:#2F798A;">0</span><span style="color:#999999;"> }),</span></span>
<span class="line"><span style="color:#999999;">  </span><span style="color:#A0ADA0;">// ...</span></span>
<span class="line"><span style="color:#999999;">})</span></span>
<span class="line"></span></code></pre></div><p>Since the store is named <em>&quot;counter&quot;</em>, you need to add a matching object to <code>initialState</code>:</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;">// somewhere in your test</span></span>
<span class="line"><span style="color:#F286C4;">const</span><span style="color:#F6F6F4;"> wrapper </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">mount</span><span style="color:#F6F6F4;">(Counter, {</span></span>
<span class="line"><span style="color:#F6F6F4;">  global</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">    plugins</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> [</span></span>
<span class="line"><span style="color:#F6F6F4;">      </span><span style="color:#62E884;">createTestingPinia</span><span style="color:#F6F6F4;">({</span></span>
<span class="line"><span style="color:#F6F6F4;">        initialState</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">          counter</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> { n</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">20</span><span style="color:#F6F6F4;"> }, </span><span style="color:#7B7F8B;">// start the counter at 20 instead of 0</span></span>
<span class="line"><span style="color:#F6F6F4;">        },</span></span>
<span class="line"><span style="color:#F6F6F4;">      }),</span></span>
<span class="line"><span style="color:#F6F6F4;">    ],</span></span>
<span class="line"><span style="color:#F6F6F4;">  },</span></span>
<span class="line"><span style="color:#F6F6F4;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F286C4;">const</span><span style="color:#F6F6F4;"> store </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">useSomeStore</span><span style="color:#F6F6F4;">() </span><span style="color:#7B7F8B;">// uses the testing pinia!</span></span>
<span class="line"><span style="color:#F6F6F4;">store.n </span><span style="color:#7B7F8B;">// 20</span></span>
<span class="line"></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#A0ADA0;">// somewhere in your test</span></span>
<span class="line"><span style="color:#AB5959;">const </span><span style="color:#B07D48;">wrapper</span><span style="color:#AB5959;"> = </span><span style="color:#59873A;">mount</span><span style="color:#999999;">(</span><span style="color:#B07D48;">Counter</span><span style="color:#999999;">,</span><span style="color:#AB5959;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#999999;">  </span><span style="color:#998418;">global</span><span style="color:#999999;">: {</span></span>
<span class="line"><span style="color:#999999;">    </span><span style="color:#998418;">plugins</span><span style="color:#999999;">: [</span></span>
<span class="line"><span style="color:#999999;">      </span><span style="color:#59873A;">createTestingPinia</span><span style="color:#999999;">({</span></span>
<span class="line"><span style="color:#999999;">        </span><span style="color:#998418;">initialState</span><span style="color:#999999;">: {</span></span>
<span class="line"><span style="color:#999999;">          </span><span style="color:#998418;">counter</span><span style="color:#999999;">: { </span><span style="color:#998418;">n</span><span style="color:#999999;">: </span><span style="color:#2F798A;">20</span><span style="color:#999999;"> }, </span><span style="color:#A0ADA0;">// start the counter at 20 instead of 0</span></span>
<span class="line"><span style="color:#999999;">        },</span></span>
<span class="line"><span style="color:#999999;">      }),</span></span>
<span class="line"><span style="color:#999999;">    ],</span></span>
<span class="line"><span style="color:#999999;">  },</span></span>
<span class="line"><span style="color:#999999;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#AB5959;">const </span><span style="color:#B07D48;">store</span><span style="color:#AB5959;"> = </span><span style="color:#59873A;">useSomeStore</span><span style="color:#999999;">()</span><span style="color:#AB5959;"> </span><span style="color:#A0ADA0;">// uses the testing pinia!</span></span>
<span class="line"><span style="color:#B07D48;">store</span><span style="color:#999999;">.</span><span style="color:#B07D48;">n</span><span style="color:#393A34;"> </span><span style="color:#A0ADA0;">// 20</span></span>
<span class="line"></span></code></pre></div><h3 id="customizing-behavior-of-actions" tabindex="-1">Customizing behavior of actions <a class="header-anchor" href="#customizing-behavior-of-actions" aria-hidden="true">#</a></h3><p><code>createTestingPinia</code> stubs out all store actions unless told otherwise. This allows you to test your components and stores separately.</p><p>If you want to revert this behavior and normally execute your actions during tests, specify <code>stubActions: false</code> when calling <code>createTestingPinia</code>:</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">const</span><span style="color:#F6F6F4;"> wrapper </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">mount</span><span style="color:#F6F6F4;">(Counter, {</span></span>
<span class="line"><span style="color:#F6F6F4;">  global</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">    plugins</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> [</span><span style="color:#62E884;">createTestingPinia</span><span style="color:#F6F6F4;">({ stubActions</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">false</span><span style="color:#F6F6F4;"> })],</span></span>
<span class="line"><span style="color:#F6F6F4;">  },</span></span>
<span class="line"><span style="color:#F6F6F4;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F286C4;">const</span><span style="color:#F6F6F4;"> store </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">useSomeStore</span><span style="color:#F6F6F4;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;">// Now this call WILL execute the implementation defined by the store</span></span>
<span class="line"><span style="color:#F6F6F4;">store.</span><span style="color:#62E884;">someAction</span><span style="color:#F6F6F4;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;">// ...but it&#39;s still wrapped with a spy, so you can inspect calls</span></span>
<span class="line"><span style="color:#62E884;">expect</span><span style="color:#F6F6F4;">(store.someAction).</span><span style="color:#62E884;">toHaveBeenCalledTimes</span><span style="color:#F6F6F4;">(</span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;">)</span></span>
<span class="line"></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#AB5959;">const</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">wrapper</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">=</span><span style="color:#393A34;"> </span><span style="color:#59873A;">mount</span><span style="color:#999999;">(</span><span style="color:#B07D48;">Counter</span><span style="color:#999999;">,</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#998418;">global</span><span style="color:#999999;">:</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#998418;">plugins</span><span style="color:#999999;">:</span><span style="color:#393A34;"> </span><span style="color:#999999;">[</span><span style="color:#59873A;">createTestingPinia</span><span style="color:#999999;">({</span><span style="color:#393A34;"> </span><span style="color:#998418;">stubActions</span><span style="color:#999999;">:</span><span style="color:#393A34;"> </span><span style="color:#1E754F;">false</span><span style="color:#393A34;"> </span><span style="color:#999999;">})],</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#999999;">},</span></span>
<span class="line"><span style="color:#999999;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#AB5959;">const</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">store</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">=</span><span style="color:#393A34;"> </span><span style="color:#59873A;">useSomeStore</span><span style="color:#999999;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A0ADA0;">// Now this call WILL execute the implementation defined by the store</span></span>
<span class="line"><span style="color:#B07D48;">store</span><span style="color:#999999;">.</span><span style="color:#59873A;">someAction</span><span style="color:#999999;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A0ADA0;">// ...but it&#39;s still wrapped with a spy, so you can inspect calls</span></span>
<span class="line"><span style="color:#59873A;">expect</span><span style="color:#999999;">(</span><span style="color:#B07D48;">store</span><span style="color:#999999;">.</span><span style="color:#B07D48;">someAction</span><span style="color:#999999;">).</span><span style="color:#59873A;">toHaveBeenCalledTimes</span><span style="color:#999999;">(</span><span style="color:#2F798A;">1</span><span style="color:#999999;">)</span></span>
<span class="line"></span></code></pre></div><h3 id="specifying-the-createspy-function" tabindex="-1">Specifying the createSpy function <a class="header-anchor" href="#specifying-the-createspy-function" aria-hidden="true">#</a></h3><p>When using Jest, or vitest with <code>globals: true</code>, <code>createTestingPinia</code> automatically stubs actions using the spy function based on the existing test framework (<code>jest.fn</code> or <code>vitest.fn</code>). If you are not using <code>globals: true</code> or using a different framework, you&#39;ll need to provide a <a href="/api/interfaces/pinia_testing.TestingOptions.html#createspy">createSpy</a> option:</p><div class="vp-code-group"><div class="tabs"><input type="radio" name="group-SUN2-" id="tab-tlOW-5I" checked="checked"><label for="tab-tlOW-5I">vitest</label><input type="radio" name="group-SUN2-" id="tab-aD66EGw"><label for="tab-aD66EGw">sinon</label></div><div class="blocks"><div class="language-ts active"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#7B7F8B;">// NOTE: not needed with \`globals: true\`</span></span>
<span class="line"><span style="color:#F286C4;">import</span><span style="color:#F6F6F4;"> { vi } </span><span style="color:#F286C4;">from</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">vitest</span><span style="color:#DEE492;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#62E884;">createTestingPinia</span><span style="color:#F6F6F4;">({</span></span>
<span class="line"><span style="color:#F6F6F4;">  createSpy</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> vi.fn,</span></span>
<span class="line"><span style="color:#F6F6F4;">})</span></span>
<span class="line"></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#A0ADA0;">// NOTE: not needed with \`globals: true\`</span></span>
<span class="line"><span style="color:#1E754F;">import</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">vi</span><span style="color:#393A34;"> </span><span style="color:#999999;">}</span><span style="color:#393A34;"> </span><span style="color:#1E754F;">from</span><span style="color:#393A34;"> </span><span style="color:#B56959AA;">&#39;</span><span style="color:#B56959;">vitest</span><span style="color:#B56959AA;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#59873A;">createTestingPinia</span><span style="color:#999999;">({</span></span>
<span class="line"><span style="color:#999999;">  </span><span style="color:#998418;">createSpy</span><span style="color:#999999;">: </span><span style="color:#B07D48;">vi</span><span style="color:#999999;">.</span><span style="color:#B07D48;">fn</span><span style="color:#999999;">,</span></span>
<span class="line"><span style="color:#999999;">})</span></span>
<span class="line"></span></code></pre></div><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">import</span><span style="color:#F6F6F4;"> sinon </span><span style="color:#F286C4;">from</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">sinon</span><span style="color:#DEE492;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#62E884;">createTestingPinia</span><span style="color:#F6F6F4;">({</span></span>
<span class="line"><span style="color:#F6F6F4;">  createSpy</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> sinon.spy,</span></span>
<span class="line"><span style="color:#F6F6F4;">})</span></span>
<span class="line"></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#1E754F;">import</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">sinon</span><span style="color:#393A34;"> </span><span style="color:#1E754F;">from</span><span style="color:#393A34;"> </span><span style="color:#B56959AA;">&#39;</span><span style="color:#B56959;">sinon</span><span style="color:#B56959AA;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#59873A;">createTestingPinia</span><span style="color:#999999;">({</span></span>
<span class="line"><span style="color:#999999;">  </span><span style="color:#998418;">createSpy</span><span style="color:#999999;">: </span><span style="color:#B07D48;">sinon</span><span style="color:#999999;">.</span><span style="color:#B07D48;">spy</span><span style="color:#999999;">,</span></span>
<span class="line"><span style="color:#999999;">})</span></span>
<span class="line"></span></code></pre></div></div></div><p>You can find more examples in <a href="https://github.com/vuejs/pinia/blob/v2/packages/testing/src/testing.spec.ts" target="_blank" rel="noreferrer">the tests of the testing package</a>.</p><h3 id="mocking-getters" tabindex="-1">Mocking getters <a class="header-anchor" href="#mocking-getters" aria-hidden="true">#</a></h3><p>By default, any getter will be computed like regular usage but you can manually force a value by setting the getter to anything you want:</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">import</span><span style="color:#F6F6F4;"> { defineStore } </span><span style="color:#F286C4;">from</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">pinia</span><span style="color:#DEE492;">&#39;</span></span>
<span class="line"><span style="color:#F286C4;">import</span><span style="color:#F6F6F4;"> { createTestingPinia } </span><span style="color:#F286C4;">from</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">@pinia/testing</span><span style="color:#DEE492;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F286C4;">const</span><span style="color:#F6F6F4;"> useCounterStore </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">defineStore</span><span style="color:#F6F6F4;">(</span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">counter</span><span style="color:#DEE492;">&#39;</span><span style="color:#F6F6F4;">, {</span></span>
<span class="line"><span style="color:#F6F6F4;">  </span><span style="color:#62E884;">state</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> () </span><span style="color:#F286C4;">=&gt;</span><span style="color:#F6F6F4;"> ({ n</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">1</span><span style="color:#F6F6F4;"> }),</span></span>
<span class="line"><span style="color:#F6F6F4;">  getters</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">    </span><span style="color:#62E884;">double</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> (</span><span style="color:#FFB86C;font-style:italic;">state</span><span style="color:#F6F6F4;">) </span><span style="color:#F286C4;">=&gt;</span><span style="color:#F6F6F4;"> state.n </span><span style="color:#F286C4;">*</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">2</span><span style="color:#F6F6F4;">,</span></span>
<span class="line"><span style="color:#F6F6F4;">  },</span></span>
<span class="line"><span style="color:#F6F6F4;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F286C4;">const</span><span style="color:#F6F6F4;"> pinia </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">createTestingPinia</span><span style="color:#F6F6F4;">()</span></span>
<span class="line"><span style="color:#F286C4;">const</span><span style="color:#F6F6F4;"> counter </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">useCounterStore</span><span style="color:#F6F6F4;">(pinia)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F6F6F4;">counter.double </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">3</span><span style="color:#F6F6F4;"> </span><span style="color:#7B7F8B;">// 🪄 getters are writable only in tests</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;">// set to undefined to reset the default behavior</span></span>
<span class="line"><span style="color:#7B7F8B;">// @ts-expect-error: usually it&#39;s a number</span></span>
<span class="line"><span style="color:#F6F6F4;">counter.double </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">undefined</span></span>
<span class="line"><span style="color:#F6F6F4;">counter.double </span><span style="color:#7B7F8B;">// 2 (=1 x 2)</span></span>
<span class="line"></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#1E754F;">import</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">defineStore</span><span style="color:#393A34;"> </span><span style="color:#999999;">}</span><span style="color:#393A34;"> </span><span style="color:#1E754F;">from</span><span style="color:#393A34;"> </span><span style="color:#B56959AA;">&#39;</span><span style="color:#B56959;">pinia</span><span style="color:#B56959AA;">&#39;</span></span>
<span class="line"><span style="color:#1E754F;">import</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">createTestingPinia</span><span style="color:#393A34;"> </span><span style="color:#999999;">}</span><span style="color:#393A34;"> </span><span style="color:#1E754F;">from</span><span style="color:#393A34;"> </span><span style="color:#B56959AA;">&#39;</span><span style="color:#B56959;">@pinia/testing</span><span style="color:#B56959AA;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#AB5959;">const </span><span style="color:#B07D48;">useCounterStore</span><span style="color:#AB5959;"> = </span><span style="color:#59873A;">defineStore</span><span style="color:#999999;">(</span><span style="color:#B56959AA;">&#39;</span><span style="color:#B56959;">counter</span><span style="color:#B56959AA;">&#39;</span><span style="color:#999999;">,</span><span style="color:#AB5959;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#999999;">  </span><span style="color:#59873A;">state</span><span style="color:#999999;">: () =&gt; ({ </span><span style="color:#998418;">n</span><span style="color:#999999;">: </span><span style="color:#2F798A;">1</span><span style="color:#999999;"> }),</span></span>
<span class="line"><span style="color:#999999;">  </span><span style="color:#998418;">getters</span><span style="color:#999999;">: {</span></span>
<span class="line"><span style="color:#999999;">    </span><span style="color:#59873A;">double</span><span style="color:#999999;">: (</span><span style="color:#B07D48;">state</span><span style="color:#999999;">) =&gt; </span><span style="color:#B07D48;">state</span><span style="color:#999999;">.</span><span style="color:#B07D48;">n</span><span style="color:#999999;"> </span><span style="color:#AB5959;">*</span><span style="color:#999999;"> </span><span style="color:#2F798A;">2</span><span style="color:#999999;">,</span></span>
<span class="line"><span style="color:#999999;">  },</span></span>
<span class="line"><span style="color:#999999;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#AB5959;">const </span><span style="color:#B07D48;">pinia</span><span style="color:#AB5959;"> = </span><span style="color:#59873A;">createTestingPinia</span><span style="color:#999999;">()</span></span>
<span class="line"><span style="color:#AB5959;">const </span><span style="color:#B07D48;">counter</span><span style="color:#AB5959;"> = </span><span style="color:#59873A;">useCounterStore</span><span style="color:#999999;">(</span><span style="color:#B07D48;">pinia</span><span style="color:#999999;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B07D48;">counter</span><span style="color:#999999;">.</span><span style="color:#B07D48;">double</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">=</span><span style="color:#393A34;"> </span><span style="color:#2F798A;">3</span><span style="color:#393A34;"> </span><span style="color:#A0ADA0;">// 🪄 getters are writable only in tests</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A0ADA0;">// set to undefined to reset the default behavior</span></span>
<span class="line"><span style="color:#A0ADA0;">// @ts-expect-error: usually it&#39;s a number</span></span>
<span class="line"><span style="color:#B07D48;">counter</span><span style="color:#999999;">.</span><span style="color:#B07D48;">double</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">=</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">undefined</span></span>
<span class="line"><span style="color:#B07D48;">counter</span><span style="color:#999999;">.</span><span style="color:#B07D48;">double</span><span style="color:#393A34;"> </span><span style="color:#A0ADA0;">// 2 (=1 x 2)</span></span>
<span class="line"></span></code></pre></div><h3 id="pinia-plugins" tabindex="-1">Pinia Plugins <a class="header-anchor" href="#pinia-plugins" aria-hidden="true">#</a></h3><p>If you have any pinia plugins, make sure to pass them when calling <code>createTestingPinia()</code> so they are properly applied. <strong>Do not add them with <code>testingPinia.use(MyPlugin)</code></strong> like you would do with a regular pinia:</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">import</span><span style="color:#F6F6F4;"> { createTestingPinia } </span><span style="color:#F286C4;">from</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">@pinia/testing</span><span style="color:#DEE492;">&#39;</span></span>
<span class="line"><span style="color:#F286C4;">import</span><span style="color:#F6F6F4;"> { somePlugin } </span><span style="color:#F286C4;">from</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">../src/stores/plugin</span><span style="color:#DEE492;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B7F8B;">// inside some test</span></span>
<span class="line"><span style="color:#F286C4;">const</span><span style="color:#F6F6F4;"> wrapper </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">mount</span><span style="color:#F6F6F4;">(Counter, {</span></span>
<span class="line"><span style="color:#F6F6F4;">  global</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> {</span></span>
<span class="line"><span style="color:#F6F6F4;">    plugins</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> [</span></span>
<span class="line"><span style="color:#F6F6F4;">      </span><span style="color:#62E884;">createTestingPinia</span><span style="color:#F6F6F4;">({</span></span>
<span class="line"><span style="color:#F6F6F4;">        stubActions</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#BF9EEE;">false</span><span style="color:#F6F6F4;">,</span></span>
<span class="line"><span style="color:#F6F6F4;">        plugins</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> [somePlugin],</span></span>
<span class="line"><span style="color:#F6F6F4;">      }),</span></span>
<span class="line"><span style="color:#F6F6F4;">    ],</span></span>
<span class="line"><span style="color:#F6F6F4;">  },</span></span>
<span class="line"><span style="color:#F6F6F4;">})</span></span>
<span class="line"></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#1E754F;">import</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">createTestingPinia</span><span style="color:#393A34;"> </span><span style="color:#999999;">}</span><span style="color:#393A34;"> </span><span style="color:#1E754F;">from</span><span style="color:#393A34;"> </span><span style="color:#B56959AA;">&#39;</span><span style="color:#B56959;">@pinia/testing</span><span style="color:#B56959AA;">&#39;</span></span>
<span class="line"><span style="color:#1E754F;">import</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">somePlugin</span><span style="color:#393A34;"> </span><span style="color:#999999;">}</span><span style="color:#393A34;"> </span><span style="color:#1E754F;">from</span><span style="color:#393A34;"> </span><span style="color:#B56959AA;">&#39;</span><span style="color:#B56959;">../src/stores/plugin</span><span style="color:#B56959AA;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A0ADA0;">// inside some test</span></span>
<span class="line"><span style="color:#AB5959;">const</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">wrapper</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">=</span><span style="color:#393A34;"> </span><span style="color:#59873A;">mount</span><span style="color:#999999;">(</span><span style="color:#B07D48;">Counter</span><span style="color:#999999;">,</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#998418;">global</span><span style="color:#999999;">:</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#998418;">plugins</span><span style="color:#999999;">:</span><span style="color:#393A34;"> </span><span style="color:#999999;">[</span></span>
<span class="line"><span style="color:#393A34;">      </span><span style="color:#59873A;">createTestingPinia</span><span style="color:#999999;">({</span></span>
<span class="line"><span style="color:#393A34;">        </span><span style="color:#998418;">stubActions</span><span style="color:#999999;">:</span><span style="color:#393A34;"> </span><span style="color:#1E754F;">false</span><span style="color:#999999;">,</span></span>
<span class="line"><span style="color:#393A34;">        </span><span style="color:#998418;">plugins</span><span style="color:#999999;">:</span><span style="color:#393A34;"> </span><span style="color:#999999;">[</span><span style="color:#B07D48;">somePlugin</span><span style="color:#999999;">],</span></span>
<span class="line"><span style="color:#393A34;">      </span><span style="color:#999999;">}),</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#999999;">],</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#999999;">},</span></span>
<span class="line"><span style="color:#999999;">})</span></span>
<span class="line"></span></code></pre></div><h2 id="e2e-tests" tabindex="-1">E2E tests <a class="header-anchor" href="#e2e-tests" aria-hidden="true">#</a></h2><p>When it comes to Pinia, you don&#39;t need to change anything for E2E tests, that&#39;s the whole point of these tests! You could maybe test HTTP requests, but that&#39;s way beyond the scope of this guide 😄.</p><h2 id="unit-test-components-vue-2" tabindex="-1">Unit test components (Vue 2) <a class="header-anchor" href="#unit-test-components-vue-2" aria-hidden="true">#</a></h2><p>When using <a href="https://v1.test-utils.vuejs.org/" target="_blank" rel="noreferrer">Vue Test Utils 1</a>, install Pinia on a <code>localVue</code>:</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula-soft vp-code-dark"><code><span class="line"><span style="color:#F286C4;">import</span><span style="color:#F6F6F4;"> { PiniaVuePlugin } </span><span style="color:#F286C4;">from</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">pinia</span><span style="color:#DEE492;">&#39;</span></span>
<span class="line"><span style="color:#F286C4;">import</span><span style="color:#F6F6F4;"> { createLocalVue, mount } </span><span style="color:#F286C4;">from</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">@vue/test-utils</span><span style="color:#DEE492;">&#39;</span></span>
<span class="line"><span style="color:#F286C4;">import</span><span style="color:#F6F6F4;"> { createTestingPinia } </span><span style="color:#F286C4;">from</span><span style="color:#F6F6F4;"> </span><span style="color:#DEE492;">&#39;</span><span style="color:#E7EE98;">@pinia/testing</span><span style="color:#DEE492;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F286C4;">const</span><span style="color:#F6F6F4;"> localVue </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">createLocalVue</span><span style="color:#F6F6F4;">()</span></span>
<span class="line"><span style="color:#F6F6F4;">localVue.</span><span style="color:#62E884;">use</span><span style="color:#F6F6F4;">(PiniaVuePlugin)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F286C4;">const</span><span style="color:#F6F6F4;"> wrapper </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">mount</span><span style="color:#F6F6F4;">(Counter, {</span></span>
<span class="line"><span style="color:#F6F6F4;">  localVue,</span></span>
<span class="line"><span style="color:#F6F6F4;">  pinia</span><span style="color:#F286C4;">:</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">createTestingPinia</span><span style="color:#F6F6F4;">(),</span></span>
<span class="line"><span style="color:#F6F6F4;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F286C4;">const</span><span style="color:#F6F6F4;"> store </span><span style="color:#F286C4;">=</span><span style="color:#F6F6F4;"> </span><span style="color:#62E884;">useSomeStore</span><span style="color:#F6F6F4;">() </span><span style="color:#7B7F8B;">// uses the testing pinia!</span></span>
<span class="line"></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#1E754F;">import</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">PiniaVuePlugin</span><span style="color:#393A34;"> </span><span style="color:#999999;">}</span><span style="color:#393A34;"> </span><span style="color:#1E754F;">from</span><span style="color:#393A34;"> </span><span style="color:#B56959AA;">&#39;</span><span style="color:#B56959;">pinia</span><span style="color:#B56959AA;">&#39;</span></span>
<span class="line"><span style="color:#1E754F;">import</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">createLocalVue</span><span style="color:#999999;">,</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">mount</span><span style="color:#393A34;"> </span><span style="color:#999999;">}</span><span style="color:#393A34;"> </span><span style="color:#1E754F;">from</span><span style="color:#393A34;"> </span><span style="color:#B56959AA;">&#39;</span><span style="color:#B56959;">@vue/test-utils</span><span style="color:#B56959AA;">&#39;</span></span>
<span class="line"><span style="color:#1E754F;">import</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">createTestingPinia</span><span style="color:#393A34;"> </span><span style="color:#999999;">}</span><span style="color:#393A34;"> </span><span style="color:#1E754F;">from</span><span style="color:#393A34;"> </span><span style="color:#B56959AA;">&#39;</span><span style="color:#B56959;">@pinia/testing</span><span style="color:#B56959AA;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#AB5959;">const</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">localVue</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">=</span><span style="color:#393A34;"> </span><span style="color:#59873A;">createLocalVue</span><span style="color:#999999;">()</span></span>
<span class="line"><span style="color:#B07D48;">localVue</span><span style="color:#999999;">.</span><span style="color:#59873A;">use</span><span style="color:#999999;">(</span><span style="color:#B07D48;">PiniaVuePlugin</span><span style="color:#999999;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#AB5959;">const</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">wrapper</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">=</span><span style="color:#393A34;"> </span><span style="color:#59873A;">mount</span><span style="color:#999999;">(</span><span style="color:#B07D48;">Counter</span><span style="color:#999999;">,</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#B07D48;">localVue</span><span style="color:#999999;">,</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#998418;">pinia</span><span style="color:#999999;">:</span><span style="color:#393A34;"> </span><span style="color:#59873A;">createTestingPinia</span><span style="color:#999999;">(),</span></span>
<span class="line"><span style="color:#999999;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#AB5959;">const</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">store</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">=</span><span style="color:#393A34;"> </span><span style="color:#59873A;">useSomeStore</span><span style="color:#999999;">()</span><span style="color:#393A34;"> </span><span style="color:#A0ADA0;">// uses the testing pinia!</span></span>
<span class="line"></span></code></pre></div>`,40),e=[o];function t(c,r,y,i,F,A){return n(),a("div",null,e)}const E=s(p,[["render",t]]);export{d as __pageData,E as default};
